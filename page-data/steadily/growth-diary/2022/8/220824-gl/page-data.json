{"componentChunkName":"component---src-templates-blog-template-js","path":"/steadily/growth-diary/2022/8/220824-gl/","result":{"data":{"cur":{"id":"f1b493ea-093c-538d-9124-8584c47fad41","html":"<h2 id=\"-성장일지\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\" aria-label=\" 성장일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-ecmascript\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-ecmascript\" aria-label=\"code classlanguage textjavascriptcode ecmascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> ECMAScript</h3>\n<p>ECMAScript는 자바스크립트의 표준 사양인 ECMA-262를 말한다. ECMA-262에서는 프로그래밍 언어의 값, 타입, 객체와 프로퍼티, 함수, 등의 핵심 문법을 규정<br/></p>\n<blockquote>\n<p>각 브라우저 제조사는 ECMAScript 사양을 준수하면서 브라우저에 내장되는 자바스크립트 엔진을 구현</p>\n</blockquote>\n<p>자바스크립트는 크게 베이스가 되는 ECMAScript와 실행 환경에 따른 클라이언트 사이드 WEB API를 아우른다.<br/></p>\n<blockquote>\n<p>자바스크립트가 단일 쓰레드이지만 어떻게 비동기 처리가 가능한지가 이와 관련있다. 추후 이벤트 루프와 테스크 큐와 함께 자세히 다뤄볼 예정</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-특징\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%8A%B9%EC%A7%95\" aria-label=\"code classlanguage textjavascriptcode 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 특징</h3>\n<p>자바스크립트는 HTML, CSS와 함께 웹을 구성하는 요소 중 하나로서 <code class=\"language-text\">웹 브라우저에서 동작하는 유일한 프로그래밍 언어</code><br/>\n또한, 개발자가 별도의 컴파일 작업을 수행하지 않는 <code class=\"language-text\">인터프리터 언어</code>로 대부분의 모던 자바스크립트 엔진(크롬의 V8, 파이어폭스의 SpiderMonkey 등)은 인터프리터 방식에 컴파일러의 장점을 결합해 처리 속도가 느린 인터프리터의 단점을 해결함</p>\n<ul>\n<li>\n<p>컴파일러 언어</p>\n<ul>\n<li>코드가 실행되기 전 컴파일 시, 소스코드 전체를 머신코드로 변환 후 실행</li>\n<li>실행 파일을 생성</li>\n<li>컴파일을 한번만 하면 이후 실행을 반복함에 있어 속도가 빠르다.</li>\n</ul>\n</li>\n<li>\n<p>인터프리터 언어</p>\n<ul>\n<li>코드가 실행되는 런타임 때, 한 줄씩 바이트코드로 변환 후 실행</li>\n<li>실행 파일을 생성하지 않음</li>\n<li>인터프리트 자체가 곧 실행을 하며 이뤄지므로 실행 때마다 인터프리트 단계를 반복, 따라서 실행 속도가 비교적 느림</li>\n</ul>\n</li>\n</ul>\n<p>대부분의 모던 브라우저가 사용하는 인터프리터는 아주 전통적인 컴파일 방식은 아니지만, 나름의 복잡한 과정을 거치며 일부 소스코드를 컴파일하고 실행<br/>\n단, 자바스크립트는 런타임에 컴파일되고 따로 실행 파일이 생성되지 않는 점, 인터프리터 없이 실행될 수 없기 때문에 컴파일러 언어라고 할 수 없다.</p>\n<blockquote>\n<p>이와 관련된 사항은 자바스크립트의 <code class=\"language-text\">실행 컨텍스트</code>를 찾아보면 좋다.</p>\n</blockquote>\n<p>자바스크립트는 <code class=\"language-text\">명령형</code>, <code class=\"language-text\">함수형</code>, <code class=\"language-text\">프로토타입</code> 기반의 <code class=\"language-text\">객체지향 프로그래밍</code>을 지원하는 멀티 패러다임 프로그래밍 언어</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\">🪴 성장일지</a></p>\n<ul>\n<li><a href=\"#javascript-ecmascript\"><code class=\"language-text\">JavaScript</code> ECMAScript</a></li>\n<li><a href=\"#javascript-%ED%8A%B9%EC%A7%95\"><code class=\"language-text\">JavaScript</code> 특징</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🪴 성장일지 책 의 내용에 자극받아 시작하는 소박한  살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?\n성장하고 있는 것이 살아 있는 것이다.\n생명의 유일한 증거는 성장이다! 🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명  ECMAScript ECMAScript는 자바스크립트의 표준 사양인 ECMA-262를 말한다. ECMA-262에서는 프로그래밍 언어의 값, 타입, 객체와 프로퍼티, 함수, 등의 핵심 문법을 규정 각 브라우저 제조사는 ECMAScript 사양을 준수하면서 브라우저에 내장되는 자바스크립트 엔진을 구현 자바스크립트는 크게 베이스가 되는 ECMAScript와 실행 환경에 따른 클라이언트 사이드 WEB API를 아우른다. 자바스크립트가 단일 쓰레드이지만 어떻게 비동기 처리가 가능한지가 이와 관련있다. 추후 이벤트 루프와 테스크 큐와 함께 자세히 다뤄볼 예정  특징 자바스크립트는 HTML, CSS와 함께 웹을 구성하는 요소 중 하나로서 \n또한, 개발자가 별도의 컴…","frontmatter":{"date":"August 24, 2022","title":"220824(수)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/8/220824-gl/"}},"next":{"id":"0c515631-47bd-539f-8bf9-f3673d3e20fb","html":"<h2 id=\"-성장일지\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\" aria-label=\" 성장일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-프로토타입remind\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85remind\" aria-label=\"code classlanguage textjavascriptcode 프로토타입remind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 프로토타입(remind)</h3>\n<p>자바스크립트의 기반이 되는 개념으로 어떤 생성자 함수의 메서드를 담고 있는 특별한 객체<br/>\n이 생성자 함수를 통해 instance를 만들게 되면 instance는 <code class=\"language-text\">__proto__</code>라는 객체를 통해 생성자의 prototype 객체를 참조하고 그 메서드를 사용할 수 있음</p>\n<blockquote>\n<p>사실 <code class=\"language-text\">instance.__proto__</code>보다 <code class=\"language-text\">Object.getPrototypeOf(instance)</code>를 사용할 것을 권장</p>\n</blockquote>\n<p><code class=\"language-text\">__proto__</code>는 생략 가능한 프로퍼티 -> 자바스크립트 언어를 창시한 브랜든 아이크가 정한 것으로 이해의 영역이 아님! 그냥 그렇구나 하면 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 아래 5가지 모두 같은 Constructor를 가리키는 표현</span>\nConstructor<span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span> <span class=\"token comment\">// __proto__ 생략 가능</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototype</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>comstructor<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span></code></pre></div>\n<p>메서드 오버라이드</p>\n<ul>\n<li>스코프 체이닝과 마찬가지로, 같은 이름의 메서드가 여러 곳에 있을 때 가장 가까운 곳에서 그 메서드에 접근</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Dog</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bark</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' 왈왈~!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> hodu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hodu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhodu<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bark</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' 바우바우~!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hodu<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hodu 바우바우~! -> 즉, protorype의 메서드보다 instance의 자체 메서드가 더 우선</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hodu<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined -> this가 hodu가 아닌 hodu__proto__를 가리키게 됨</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hodu<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>hodu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hodu 왈왈~! -> call을 통해 this를 hodu로 바인딩해주면 해결</span></code></pre></div>\n<p>Object</p>\n<ul>\n<li>모든 생성자 함수에 의해 생성된 객체들은 prototype이라는 프로퍼티 자체가 ‘Object’이므로 Object의 prototype에 있는 모든 메서드에 접근 가능</li>\n<li>단, 정말 객체({})만이 가진 함수도 필요하므로 그 부분은 static method로 Object.freeze와 같은 형식으로 사용 가능</li>\n</ul>\n<p>다중 프로토타입 체인</p>\n<p>생성자의 prototype에 또다른 생성자의 인스턴스를 할당함으로써 그 생성자의 메서드도 사용할 수 있게 계속 체인하는 방법</p>\n<ul>\n<li>이 개념 자체가 자바스크립트에서 클래스를 구현 시 사용됨</li>\n</ul>\n<h3 id=\"code-classlanguage-textjavascriptcode-클래스remind\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%81%B4%EB%9E%98%EC%8A%A4remind\" aria-label=\"code classlanguage textjavascriptcode 클래스remind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 클래스(remind)</h3>\n<p>자바스크립트는 프로토타입 기반이기에 <code class=\"language-text\">상속</code>이라는 개념이 존재하지 않음<br/>\n이렇듯 상속의 개념이 존재하는 클래스를 따라하기 위한 다양한 기법들이 생겼음<br/>\n추후 ES6에서는 클래스 문법이 구현되었음(이마저도 프로토타입은 기반으로 한 것)</p>\n<ul>\n<li>superclass: 상위 클래스; super</li>\n<li>subclass: 하위 클래스; sub</li>\n</ul>\n<p>현실 세계는 이미 존재하는 수많은 개체들의 공통점, 차이점을 분석하여 클래스를 하나하나 정의하는 식<br/>\n프로그래밍에선 특정 클래스를 먼저 만든 후, 그 클래스의 성질과 각각이 갖는 개별 성질을 갖는 개체를 만들어내게 됨</p>\n<ul>\n<li>static method: 생성자 자체가 갖는 메서드(함수) ex) Array.from() -> instance가 활용 불가능</li>\n<li>prototype method: 생성자의 prototype이 갖는 메서드(함수) ex) Array.prototype.push() -> instance가 활용 가능</li>\n<li>instance method: instance가 갖는 메서드(함수)로 instance마다 직접 부여하는 메서드 함수</li>\n</ul>\n<p>클래스 상속: 자바스크립트에서 클래스 상속을 구현 -> 프로토타입 체이닝을 잘 연결했다는 의미</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">First</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">First</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 프로토타입에 Array의 instance(배열 리터럴 표현)을 할당</span>\n\n<span class=\"token keyword\">var</span> jayden <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">First</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jayden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njayden<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 프로토타입 체이닝에 의해 Array의 prototype method를 사용 가능해짐</span></code></pre></div>\n<p>위의 경우 2가지의 문제가 존재</p>\n<ol>\n<li>First.prototype에 []를 할당함으로써 [] 자체가 갖는 프로퍼티가 오류를 일으킬 가능성이 존재</li>\n<li>jayden의 생성자인 First에 다시 접근할 방법이 없음(First.prototype = []으로 했기 때문)</li>\n</ol>\n<p>1번 문제 해결법</p>\n<ul>\n<li>delete First.prototype.method 식으로 하나하나 지워주기</li>\n<li>비어있는 생성자 함수 Bridge를 통해 연결</li>\n<li>Object.create(생성자.prototype)을 사용해서 연결</li>\n</ul>\n<p>2번 문제 해결법</p>\n<p>Subclass.prototype.constructor = Subclass 로 다시 constructor라는 프로퍼티를 재할당</p>\n<p>ES6에 추가된 클래스 문법 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token constant\">ES6</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">staticMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' staticMethod'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' method'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> es6Instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ES6</span><span class=\"token punctuation\">(</span><span class=\"token string\">'es6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\">🪴 성장일지</a></p>\n<ul>\n<li><a href=\"#javascript-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85remind\"><code class=\"language-text\">JavaScript</code> 프로토타입(remind)</a></li>\n<li><a href=\"#javascript-%ED%81%B4%EB%9E%98%EC%8A%A4remind\"><code class=\"language-text\">JavaScript</code> 클래스(remind)</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 23, 2022","title":"220823(화)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/8/220823-gl/"}},"prev":{"id":"85796adc-764d-5b73-8198-bf5240e2521c","html":"<h2 id=\"-성장일지\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\" aria-label=\" 성장일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-표현식과-문\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC-%EB%AC%B8\" aria-label=\"code classlanguage textjavascriptcode 표현식과 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 표현식과 문</h3>\n<ul>\n<li>값: 식이 평가되어 생성된 결과</li>\n<li>리터럴: 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법(코드)\n<ul>\n<li>자바스크립트에서의 3도 단순히 3이 아닌 숫자 리터럴 3 의 개념으로 인지하자</li>\n</ul>\n</li>\n</ul>\n<p>표현식: 특정한 값으로 평가될 수 있는 문(명령문)<br/>\n문: 프로그램을 구성하는 기본 단위, 최소 실행 단위; 명령문;</p>\n<h3 id=\"code-classlanguage-textjavascriptcode-데이터-타입---객체\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85---%EA%B0%9D%EC%B2%B4\" aria-label=\"code classlanguage textjavascriptcode 데이터 타입   객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 데이터 타입 - 객체</h3>\n<p>자바스크립트는 객체 기반의 언어로, <code class=\"language-text\">자바스크립트를 이루고 있는 거의 모든 것은 객체</code>\n(숫자형, 문자형, 불린형, null, undefined, Symbol 6가지 이외는 전부 객체)</p>\n<p>데이터 타입은 곧 <code class=\"language-text\">값의 종류</code>를 의미<br/>\n데이터 타입이 필요한 이유</p>\n<ul>\n<li>값을 저장할 때 확보해야할 <code class=\"language-text\">메모리 공간의 크기</code>를 결정하기 위해</li>\n<li>값을 참조할 때 한번에 읽어야할 <code class=\"language-text\">메모리 공간의 크기</code>를 결정하기 위해</li>\n<li>메모리에서 읽은 2진수를 어떻게 해석할지 결정하기 위해</li>\n</ul>\n<p>동적 타입 언어</p>\n<ul>\n<li>변수 선언이 아닌, 할당 시 할당하는 값의 데이터 타입에 따라 변수의 데이터 타입이 결정되는 언어.</li>\n<li>변수가 재할당될 때, 언제든 데이터 타입이 바뀔 수 있음</li>\n<li>자유롭지만, 그만큼 변수의 데이터 타입에 대한 안정성이 떨어진다.</li>\n<li>자바스크립트, 파이썬 등이 해당</li>\n</ul>\n<p>정적 타입 언어</p>\n<ul>\n<li>동적 타입 언어의 반대로 대체적으로 그 안정성이 더 높지만, 다소 제한적임</li>\n<li>C, C++, 자바, 코틀린 등이 해당</li>\n</ul>\n<h3 id=\"code-classlanguage-textjavascriptcode-토이-프로젝트-중\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%86%A0%EC%9D%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A4%91\" aria-label=\"code classlanguage textjavascriptcode 토이 프로젝트 중 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 토이 프로젝트 중</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> testNumber <span class=\"token operator\">=</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testNumber<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalesString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 123,456,789 형태로 1000단위마다 , 가 찍히는 문자열이 반환된다.</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\">🪴 성장일지</a></p>\n<ul>\n<li><a href=\"#javascript-%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC-%EB%AC%B8\"><code class=\"language-text\">JavaScript</code> 표현식과 문</a></li>\n<li><a href=\"#javascript-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85---%EA%B0%9D%EC%B2%B4\"><code class=\"language-text\">JavaScript</code> 데이터 타입 - 객체</a></li>\n<li><a href=\"#javascript-%ED%86%A0%EC%9D%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A4%91\"><code class=\"language-text\">JavaScript</code> 토이 프로젝트 중</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 25, 2022","title":"220825(목)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/8/220825-gl/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/steadily/growth-diary/2022/8/220824-gl/","nextSlug":"/steadily/growth-diary/2022/8/220823-gl/","prevSlug":"/steadily/growth-diary/2022/8/220825-gl/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}