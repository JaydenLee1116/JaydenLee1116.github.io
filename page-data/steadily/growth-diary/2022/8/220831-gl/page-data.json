{"componentChunkName":"component---src-templates-blog-template-js","path":"/steadily/growth-diary/2022/8/220831-gl/","result":{"data":{"cur":{"id":"3f632908-d48e-5e38-9bde-606c2e0cec65","html":"<h2 id=\"-성장일지\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\" aria-label=\" 성장일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-함수형-프로그래밍\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"code classlanguage textjavascriptcode 함수형 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 함수형 프로그래밍</h3>\n<p>함수형 프로그래밍은 프로그래밍 패러다임 중 하나로 <code class=\"language-text\">수학적 함수의 계산을 통해 자료를 처리하고 상태와 가변 데이터를 멀리하는 프로그래밍 패러다임</code>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addMaker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"순수함수\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%88%98%ED%95%A8%EC%88%98\" aria-label=\"순수함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순수함수</h4>\n<ul>\n<li>동일 한입력에 대해 항상 같은 값을 반환하는 함수</li>\n<li>함수의 실행이 프로그램의 실행에 영향을 끼치지 않는 함수</li>\n<li>함수 내부에서 인자의 값이나 프로그램 상태를 변경하는 <code class=\"language-text\">부수 효과(side effect)</code>가 없는 함수</li>\n<li>흔히 우리가 생각하는 외부값을 참조하고 바꾸고, 인자의 값을 변경하는 <code class=\"language-text\">프로그래밍 함수</code>가 아닌 <code class=\"language-text\">수학에서의 함수</code>를 떠올리면 이해하기 좋다.</li>\n</ul>\n<blockquote>\n<p>수학에서의 함수\nex) <code class=\"language-text\">f(x, y) = 2x + 3y</code>처럼 인자 x, y에 대해 어떤 변경없이 동일한 인자에 대해 동일한 결과를 반환하며\n애초에 수학적 함수에서 <code class=\"language-text\">외부의 값을 참조한다.</code>는 개념 자체가 없다. 즉, 이것이 순수함수</p>\n</blockquote>\n<h4 id=\"비상태-불변성\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EC%83%81%ED%83%9C-%EB%B6%88%EB%B3%80%EC%84%B1\" aria-label=\"비상태 불변성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비상태, 불변성</h4>\n<ul>\n<li>함수형 프로그래밍에서의 데이터는 변하지 않는 <code class=\"language-text\">불변성</code>을 유지해야한다.</li>\n<li>⭐ 데이터의 변경이 필요한 경우, 원본 데이터 구조를 변경하지 않으며 그 데이터의 복사본을 만들어서 그 일부를 변경하고 변경한 복사본을 활용 혹은 반환한다.</li>\n</ul>\n<h4 id=\"일급-객체일급-함수\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EC%9D%BC%EA%B8%89-%ED%95%A8%EC%88%98\" aria-label=\"일급 객체일급 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일급 객체(일급 함수)</h4>\n<p>자바스크립트의 함수는 일급 객체로서 일급 함수로 다뤄진다. 함수가 <code class=\"language-text\">값으로</code> 다뤄질 수 있다는 의미이다.</p>\n<ul>\n<li>어떤 함수의 인자로 전달될 수 있다.</li>\n<li>어떤 함수의 반환값이 될 수 있다.</li>\n<li>어떤 자료구조에 저장될 수 있다.</li>\n<li>그 자체의 리터럴로 생성 가능하다.</li>\n</ul>\n<h3 id=\"code-classlanguage-text네트워크code-기초\" style=\"position:relative;\"><a href=\"#code-classlanguage-text%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%ACcode-%EA%B8%B0%EC%B4%88\" aria-label=\"code classlanguage text네트워크code 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">네트워크</code> 기초</h3>\n<ul>\n<li>네트워크란 <code class=\"language-text\">두 대 이상의 컴퓨터를 연결하여 서로 데이터를 전송할 수 있는 통신망</code>이다.<br/></li>\n<li>인터넷은 TCP/IP 프로토콜을 사용하는 세계 최대 규모의 네트워크이다. 전 세계의 컴퓨터가 서로 데이터를 전송할 수 있도록 만들어진 거대 통신망이다.</li>\n<li>패킷: 네트워크 통신 시 사용되는 작게 분할된 데이터 조각, 네트워크에서 전송하는 데이터의 기본 단위가 된다.\n<blockquote>\n<p>대역폭(최대 전송 속도로 전솔할 수 있는 단위 시간 당 데이터의 양)이 존재하기에 한 번에 큰 데이터를 보낼 수 없다. 그렇기에 데이터의 조각인 패킷으로 쪼개어 송신 후\n수신하여 다시 퍼즐을 맞추듯 그 패킷을 조합하여 원래의 형태를 갖추도록 한다. 이 때, 원래의 형태를 갖추기 위해 각 패킷에는 그 순서가 담긴 정보가 들어있다.</p>\n</blockquote>\n</li>\n<li>온프레미스와 클라우드\n<ul>\n<li>온프레미스: 회사의 서버를 운영하기 위해 사내에 서버를 두거나 데이터 센터에 두는 방식</li>\n<li>클라우드: 인터넷을 통해 제공되는 소프트웨어, 하드웨어 등의 컴퓨팅 서비스를 이용하여 서버를 빌리는 방식</li>\n</ul>\n</li>\n<li>DMZ: 네트워크 구성에서 외부 네트워크(인터넷)과 내부 네트워크(기업) 사이에 위치한 중간 지대로, 공개할 서버만 공개하고 공개하면 안되는 부분은 보안을 지키는 역할을 한다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\">🪴 성장일지</a></p>\n<ul>\n<li>\n<p><a href=\"#javascript-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\"><code class=\"language-text\">JavaScript</code> 함수형 프로그래밍</a></p>\n<ul>\n<li><a href=\"#%EC%88%9C%EC%88%98%ED%95%A8%EC%88%98\">순수함수</a></li>\n<li><a href=\"#%EB%B9%84%EC%83%81%ED%83%9C-%EB%B6%88%EB%B3%80%EC%84%B1\">비상태, 불변성</a></li>\n<li><a href=\"#%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EC%9D%BC%EA%B8%89-%ED%95%A8%EC%88%98\">일급 객체(일급 함수)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B8%B0%EC%B4%88\"><code class=\"language-text\">네트워크</code> 기초</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🪴 성장일지 책 의 내용에 자극받아 시작하는 소박한  살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?\n성장하고 있는 것이 살아 있는 것이다.\n생명의 유일한 증거는 성장이다! 🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명  함수형 프로그래밍 함수형 프로그래밍은 프로그래밍 패러다임 중 하나로 이다. 순수함수 동일 한입력에 대해 항상 같은 값을 반환하는 함수 함수의 실행이 프로그램의 실행에 영향을 끼치지 않는 함수 함수 내부에서 인자의 값이나 프로그램 상태를 변경하는 가 없는 함수 흔히 우리가 생각하는 외부값을 참조하고 바꾸고, 인자의 값을 변경하는 가 아닌 를 떠올리면 이해하기 좋다. 수학에서의 함수\nex) 처럼 인자 x, y에 대해 어떤 변경없이 동일한 인자에 대해 동일한 결과를 반환하며\n애초에 수학적 함수에서 는 개념 자체가 없다. 즉, 이것이 순수함수 비상태, 불변성 함수형 프로그래밍에서의 데이터는 변하지 않는 을 유지해야한다. ⭐ 데이터의 변경이 필요한 경우, 원본 …","frontmatter":{"date":"August 31, 2022","title":"220831(수)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/8/220831-gl/"}},"next":{"id":"1a85d911-d83d-520e-a7e6-913c6f58b698","html":"<h2 id=\"-성장일지\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\" aria-label=\" 성장일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-실행-컨텍스트\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"code classlanguage textjavascriptcode 실행 컨텍스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 실행 컨텍스트</h3>\n<p>자바스크립트는 컴파일 언어의 장점을 취한 인터프리터 언어이다.<br/>\n자바스크립트 코드는 평가(<code class=\"language-text\">컴파일</code>) 단계와 실행(<code class=\"language-text\">인터프리터</code>) 단계로 나누어져있는데, 평가 단계 후 코드 실행을 위한 환경 정보를 모아놓은 객체를 형성한다.<br/>\n즉, 코드 실행을 위한 환경 정보를 모아놓은 객체가 <code class=\"language-text\">실행 컨텍스트</code>이다.</p>\n<p>기본적으로 전역 코드에 대한 전역 실행 컨텍스트를 생성하고, 함수의 호출 시 함수의 선언부를 기준으로 실행 컨텍스트를 생성한다.</p>\n<h4 id=\"콜스택실행-컨텍스트-스택\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EC%8A%A4%ED%83%9D%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%83%9D\" aria-label=\"콜스택실행 컨텍스트 스택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜스택(실행 컨텍스트 스택)</h4>\n<p>스택 자료구조 형태로 실행 컨텍스트가 저장되는 구조이다. 최상단에 위치한 실행 컨텍스트부터 처리하며 콜스택을 비워나간다.<br/>\n즉, 코드의 실행 순서를 관리한다.</p>\n<h4 id=\"렉시컬-환경\" style=\"position:relative;\"><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"렉시컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렉시컬 환경</h4>\n<p>현재 실행 컨텍스트에서 선언된 식별자(변수, 함수, 클래스 등의 이름)를 등록한다.<br/>\n즉, 식별자와 스코프를 관리한다.</p>\n<h4 id=\"실행-컨텍스트의-구조\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"실행 컨텍스트의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트의 구조</h4>\n<ul>\n<li>VariableEnvironment: LexicalEnvironment와 같은 구조로 초기값을 snapshot 형식으로 갖고 있다.</li>\n<li>LexicalEnvironment(중요)\n<ul>\n<li>EnvironmentRecord: 현재 스코프에 대한 식별자 정보를 담고 있는 객체(호이스팅관련)\n<ul>\n<li>Object Envioronment Record: var, 함수 선언문에 의한 변수에 대한 정보를 담고 있는 객체</li>\n<li>Declarative Environment Record: let, const에 의한 변수 및 함수에 대한 정보를 담고 있는 객체</li>\n</ul>\n</li>\n<li>OuterEnvironmentReference: 함수가 정의되기 직전 스코프(외부 스코프)에 대한 LexicalRecord를 참조하는 객체(스코프 체인관련)</li>\n<li>ThisBinding: 객체 내부에서 객체를 가리키는 this를 binding하는 객체</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">실행 컨텍스트 생성 -> 렉시컬 환경 생성 -> 환경 레코드 생성(객체 환경 -> 선언적 환경) -> this 바인딩 -> 외부 렉시컬 환경 참조 결정</code></p>\n</blockquote>\n<h4 id=\"블록-레벨-스코프와-렉시컬-환경\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84%EC%99%80-%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"블록 레벨 스코프와 렉시컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>블록 레벨 스코프와 렉시컬 환경</h4>\n<p>if문과 같은 블록이 형성되었을 때, 해당 코드 블록을 위한 새로운 렉시컬 환경이 생성되며 기존의 렉시컬 환경과 교체한다.<br/>\nvar는 함수 레벨 스코프, let/const는 블록 레벨 스코프를 갖는다.</p>\n<h4 id=\"반드시-기억할-것\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%93%9C%EC%8B%9C-%EA%B8%B0%EC%96%B5%ED%95%A0-%EA%B2%83\" aria-label=\"반드시 기억할 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반드시 기억할 것</h4>\n<p>실행 컨텍스트의 생성은 함수를 호출할 때이다. 하지만 그 함수의 실행 컨텍스트에서 OuterEnvironmentReference는 <code class=\"language-text\">함수를 정의한 시점</code>을 기준으로 상위 스코프를 결정한다는 점은 꼭 기억하자!</p>\n<h3 id=\"code-classlanguage-textjavascriptcode-클로저\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%81%B4%EB%A1%9C%EC%A0%80\" aria-label=\"code classlanguage textjavascriptcode 클로저 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 클로저</h3>\n<p>클로저란 어떤 외부함수의 변수를 참조하는 내부함수(중첩함수)가 외부로 전달되어 실행될 수 있을 때 일어나는 현상이다.<br/>\n외부함수의 실행 컨텍스트는 이미 종료가 되었음에도 외부로 전달되 내부함수가 호출 가능하기에 외부함수의 <code class=\"language-text\">렉시컬 환경</code>이 GC(가비지 콜렉터)에 의해 메모리에서 제거되지 않게 된다. 이와 같은 현상이 곧 <code class=\"language-text\">클로저</code>이며 이런 클로저 현상을 이용하여 콜백함수에서 외부 데이터 참조, 정보 은닉, 부분적용함수, 커링함수 등으로 이용할 수 있다.</p>\n<blockquote>\n<p>클로저 현상 시 개념적으론 외부함수의 렉시컬 환경 전부가 메모리에서 지워지면 안되지만, 자바스크립트 엔진에서는 그 렉시컬 환경 내에서 실제 내부함수가 참조하는 변수에 대해서만 제거되지 않도록 구현되어있다.</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\">🪴 성장일지</a></p>\n<ul>\n<li>\n<p><a href=\"#javascript-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\"><code class=\"language-text\">JavaScript</code> 실행 컨텍스트</a></p>\n<ul>\n<li><a href=\"#%EC%BD%9C%EC%8A%A4%ED%83%9D%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%83%9D\">콜스택(실행 컨텍스트 스택)</a></li>\n<li><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\">렉시컬 환경</a></li>\n<li><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EA%B5%AC%EC%A1%B0\">실행 컨텍스트의 구조</a></li>\n<li><a href=\"#%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84%EC%99%80-%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\">블록 레벨 스코프와 렉시컬 환경</a></li>\n<li><a href=\"#%EB%B0%98%EB%93%9C%EC%8B%9C-%EA%B8%B0%EC%96%B5%ED%95%A0-%EA%B2%83\">반드시 기억할 것</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#javascript-%ED%81%B4%EB%A1%9C%EC%A0%80\"><code class=\"language-text\">JavaScript</code> 클로저</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 30, 2022","title":"220830(화)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/8/220830-gl/"}},"prev":{"id":"cb65482a-91a1-50bc-bdb6-9765d9b2b9ad","html":"<h2 id=\"-성장일지\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\" aria-label=\" 성장일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-모듈\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%EB%AA%A8%EB%93%88\" aria-label=\"code classlanguage textjavascriptcode 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 모듈</h3>\n<p>모듈: 애플리케이션을 구성하는 개별적 요소로서 재사용 가능한 코드 조각, 일반적으로 <code class=\"language-text\">기능을 기준으로 파일 단위로 분리</code></p>\n<p>자바스크립트는 주로 웹페이지의 보조로서 탄생한 언어이기 때문에, 일반적으로 모듈 기능을 갖고 있는 언어와 다르게 모듈 기능이 존재하지 않았음</p>\n<p>물론 클라이언트 사이드의 자바스크립트에선 <code class=\"language-text\">&lt;script></code>를 이용하여 여러 js 파일을 로드할 수는 있지만, 파일마다 독립적인 파일 스코프(모듈 스코프)가 없이 그냥 하나의 자바스크립트 파일처럼 작용함<br/>\n즉, 엄연히 기능적으로 파일이 구분되어있고 그 파일(모듈)을 불러와서 사용하는 모듈화가 아니었음</p>\n<h4 id=\"es6모듈esm\" style=\"position:relative;\"><a href=\"#es6%EB%AA%A8%EB%93%88esm\" aria-label=\"es6모듈esm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6모듈(ESM)</h4>\n<p>ES6에서 추가한 클라이언트 사이드 자바스크립트 모듈 기능<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app.mjs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4 id=\"export\" style=\"position:relative;\"><a href=\"#export\" aria-label=\"export permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>export</h4>\n<p>모듈 내부에서 선언한 모든 식별자는 기본적으로 해당 모듈 내부에서만 참조 가능<br/>\n외부에 공개하기 위해 <code class=\"language-text\">export</code> 식별자를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// test_export.mjs 파일</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">TEST</span> <span class=\"token operator\">=</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"import\" style=\"position:relative;\"><a href=\"#import\" aria-label=\"import permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>import</h4>\n<p>반대로 다른 모듈에서 공개한 식별자를 사용하기 위해 <code class=\"language-text\">import</code>를 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">TEST</span><span class=\"token punctuation\">,</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./test_export.mjs'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"code-classlanguage-text네트워크code-기본-규칙\" style=\"position:relative;\"><a href=\"#code-classlanguage-text%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%ACcode-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99\" aria-label=\"code classlanguage text네트워크code 기본 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">네트워크</code> 기본 규칙</h3>\n<ul>\n<li>\n<p>프로토콜: 네트워크끼리 통신하기 위해 정해놓은 <code class=\"language-text\">규칙</code></p>\n</li>\n<li>\n<p>OSI모델(OSI 7계층): 네트워크가 데이터를 주고받기 위한 표준 통신 규격</p>\n<ul>\n<li><code class=\"language-text\">응용</code> 계층(7)</li>\n<li><code class=\"language-text\">표현</code> 계층(6)</li>\n<li><code class=\"language-text\">세션</code> 계층(5)</li>\n<li><code class=\"language-text\">전송</code> 계층(4)</li>\n<li><code class=\"language-text\">네트워크</code> 계층(3)</li>\n<li><code class=\"language-text\">데이터 링크</code> 계층(2)</li>\n<li><code class=\"language-text\">물리</code> 계층(1)</li>\n</ul>\n</li>\n<li>\n<p>TCP/IP모델(TCP/IP 4계층): OSI 7계층을 4계층으로 간단화한 규격</p>\n<ul>\n<li><code class=\"language-text\">응용</code> 계층(4): OSI에서 응용, 표현, 세션</li>\n<li><code class=\"language-text\">전송</code> 계층(3): OSI에서 전송</li>\n<li><code class=\"language-text\">인터넷</code> 계층(2): OSI에서 네트워크</li>\n<li><code class=\"language-text\">네트워크 접속</code> 계층(1): OSI에서 데이터 링크, 물리</li>\n</ul>\n</li>\n<li>\n<p>캡슐화: OSI 7계층에서 표현, 세션 계층을 응용 계층에 포함하여 생각했을 때, 아래의 과정을 <code class=\"language-text\">캡슐화</code>라고 한다.</p>\n<hr>\n<p>응용 계층(<code class=\"language-text\">데이터</code> 전송) -><br/>\n전송 계층(<code class=\"language-text\">(전송)헤더</code> + 데이터 전송) -><br/>\n네트워크 계층(<code class=\"language-text\">(네트워크)헤더</code> + (전송)헤더 + 데이터 전송) -><br/>\n데이터링크 계층(<code class=\"language-text\">(네트워크 접속)헤더</code> + (인터넷)헤더 + (전송)헤더 + 데이터 + <code class=\"language-text\">트레일러</code> 전송) -><br/>\n물리 계층(<code class=\"language-text\">전기적 신호</code>로 수신 측에 전송)</p>\n<hr>\n</li>\n</ul>\n<blockquote>\n<p>위 과정이 거꾸로 수신 측에서 거꾸로 층을 올라가며 헤더를 해체하는 작업은 <code class=\"language-text\">역캡슐화</code></p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-함수-선언문과-함수-리터럴-구분\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8%EA%B3%BC-%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EA%B5%AC%EB%B6%84\" aria-label=\"code classlanguage textjavascriptcode 함수 선언문과 함수 리터럴 구분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 함수 선언문과 함수 리터럴 구분</h3>\n<p>함수 선언문은 값이 아닌 문이다! 즉, 표현식이 아니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그런데 함수를 이런 식으로 표현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addMaker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>흠… 애매하다. 함수 표현식 같이 생겼는데, 뒤에는 익명이 아닌 기명으로 마치 함수 선언문을 변수 add에 할당하고 있는 것처럼 보인다.<br/>\n근데 위에 식은 분명히 작동하고, 그렇다는 것은 우변이 <code class=\"language-text\">값</code>으로 작용하여 변수에 할당된 게 아닐까 생각할 수 있다.<br/>\n위와 같은 상황에서 우변은 (모양은 함수 선언문과 같지만) 함수 리터럴로 해석된다.<br/>\n즉, 함수 선언문으로서 해석되는 게 아닌 <code class=\"language-text\">함수 리터럴</code>로서 해석되는 표현식인 것이다.</p>\n<blockquote>\n<p>{}도 상황에 따라 블록문 혹은 객체 리터럴로 해석될 수 있는 것과 유사!</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'()안에 있는 함수 선언문 모양은 함수 리터럴로 해석됩니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: test is not defined -> 함수가 선언되지 않음</span>\n\n<span class=\"token comment\">/* 함수 리터럴이기에 즉시 실행 함수가 아래와 같은 모양으로 실행 가능한 것\n()안에서의 함수 선언문 모양은 함수 리터럴이기에 그 뒤에 바로 ()를 붙여서 실행해도 } 뒤에 ;가 자동으로 붙지 않는다. */</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'()안에 있는 함수 선언문 모양은 함수 리터럴로 해석됩니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\">🪴 성장일지</a></p>\n<ul>\n<li>\n<p><a href=\"#javascript-%EB%AA%A8%EB%93%88\"><code class=\"language-text\">JavaScript</code> 모듈</a></p>\n<ul>\n<li><a href=\"#es6%EB%AA%A8%EB%93%88esm\">ES6모듈(ESM)</a></li>\n<li><a href=\"#export\">export</a></li>\n<li><a href=\"#import\">import</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99\"><code class=\"language-text\">네트워크</code> 기본 규칙</a></p>\n</li>\n<li>\n<p><a href=\"#javascript-%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8%EA%B3%BC-%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EA%B5%AC%EB%B6%84\"><code class=\"language-text\">JavaScript</code> 함수 선언문과 함수 리터럴 구분</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 01, 2022","title":"220901(목)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/9/220901-gl/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/steadily/growth-diary/2022/8/220831-gl/","nextSlug":"/steadily/growth-diary/2022/8/220830-gl/","prevSlug":"/steadily/growth-diary/2022/9/220901-gl/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}