{"componentChunkName":"component---src-templates-blog-template-js","path":"/steadily/growth-diary/2023/5/30-gl/","result":{"data":{"cur":{"id":"be0642b3-4861-5bcb-b697-f304b308602a","html":"<h2 id=\"-성장일지-40\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-40\" aria-label=\" 성장일지 40 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎄 성장일지 4.0</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 (1.0)키워드<br/>\n최대한 간단하게 정리, 추후에 보면서 스스로 설명<br/>\n🍉 (2.0)경험 위주로<br/>\n단순 정보를 전달하기보다 무엇을 배웠고 어떻게 해결했는지 짧고 간단하게 작성<br/>\n❄️ (3.0)정해진 템플릿에 맞춰서<br/>\n키워드, 경험 모두 좋다. 다만 매일 작성하기로 마음 먹은만큼 핵심만 간결하게 정리할 수 있게 템플릿을 작성<br/>\n(3.1)230102부터 시작되는 학습에 관한 내용 추가<br/>\n(3.2)230313부터 좀더 경험, 감정 위주의 내용도 담기!<br/>\n🌾 (4.0)학습 키워드에서 최대한 간단한 정보 제공, 고민에서 내 경험을 자세히 적자!<br/></p>\n</blockquote>\n<h2 id=\"-오늘의-학습-키워드\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%95%99%EC%8A%B5-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\" 오늘의 학습 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔑 오늘의 학습 키워드</h2>\n<h3 id=\"테스트-코드\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\"테스트 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 코드</h3>\n<p>테스트 코드는 왜 작성할까?</p>\n<ul>\n<li>테스트 코드를 작성하면 개발자는 코드를 더욱 안전하게 리팩토링할 수 있다.</li>\n<li>테스트 코드를 작성하면 개발자는 나중에 코드를 더욱 손쉽게 유지보수할 수 있다.</li>\n<li>테스트 코드를 작성하면 개발자는 나중에 다른 사람이 만든 코드를 더욱 더 쉽게 이해할 수 있다.</li>\n</ul>\n<p>위의 3가지 이유가 가장 대표적인 이유인 것 같다.\n실제 현업에서는 시간 관계 상 테스트 코드를 작성하지 못하지만, 테스트 기반의 개발(TDD)을 도입하고 싶어하는 경우가 많다고 한다.(장기적으로 봤을 때는, 훨씬 더 득이 될테니..!)</p>\n<p>사실 그동안 <code class=\"language-text\">Jest</code>를 통한 간단한 단위 테스트는 진행해보았다.(주로 util 함수들) 그렇다면 리액트는 어떻게 테스트 코드를 작성할까?</p>\n<h3 id=\"리액트-테스트-코드\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\"리액트 테스트 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 테스트 코드</h3>\n<p>오늘은 리액트 테스트 코드에 대해서 학습했다. 리액트는 주로 컴포넌트 단위(엄밀히는 함수 단위)에 대한 유닛 테스트를 진행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> screen <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders learn react link'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> linkElement <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">learn react</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>linkElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'welcom message2 by queryByText'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>getByText<span class=\"token punctuation\">,</span> queryByText<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">queryByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">welcome</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>또한, 어떤 태그의 이벤트를 발생시켜서 벌어지는 일에 대한 세부적인 테스트도 진행할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>render<span class=\"token punctuation\">,</span> screen<span class=\"token punctuation\">,</span> fireEvent<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'App.js: button을 click하면 새로운 데이터가 노출된다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>getByText<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loading data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'newdata'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그렇다면 비동기 데이터를 받아오고 이에 대한 테스트틀 하고싶을 땐 어떻게 해야할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> screen<span class=\"token punctuation\">,</span> fireEvent<span class=\"token punctuation\">,</span> waitFor <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'App.js: button을 click하면 1번 API 응답 데이터가 노출된다'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//given</span>\n    <span class=\"token comment\">// 'https://jsonplaceholder.typicode.com/todos/1' 요청 후 응답 데이터의 title 값이다.</span>\n    <span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> <span class=\"token string\">\"delectus aut autem\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//when</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>getByText<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loading data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//then</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>좀더 자세한 테스트 코드 내용은 추후 더 배워보려 한다.(다음 프로젝트는 TDD로 해보기!)</p>\n<h2 id=\"-요약-및-하루-간단-회고\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%95%BD-%EB%B0%8F-%ED%95%98%EB%A3%A8-%EA%B0%84%EB%8B%A8-%ED%9A%8C%EA%B3%A0\" aria-label=\" 요약 및 하루 간단 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 요약 및 하루 간단 회고</h2>\n<p>최근 슬럼프 때문에 개발 의욕이 조금 낮아졌었는데…! 오늘 다시 팍팍 생겼다!!! 나는 이 일이랑 잘 맞는 편인가보다!</p>\n<h3 id=\"오늘의-잘한-점\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%8A%98%EC%9D%98-%EC%9E%98%ED%95%9C-%EC%A0%90\" aria-label=\"오늘의 잘한 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘의 잘한 점</h3>\n<ul>\n<li>오늘 열심히 목표한만큼 구현해낸 점</li>\n</ul>\n<h3 id=\"오늘의-아쉬운-점\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%8A%98%EC%9D%98-%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90\" aria-label=\"오늘의 아쉬운 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘의 아쉬운 점</h3>\n<ul>\n<li>없음!</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li>코드스쿼드 학습 내용</li>\n<li><a href=\"https://velog.io/@velopert/react-testing-library\">리액트 테스트 코드 작성하기</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-40\">🎄 성장일지 4.0</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%95%99%EC%8A%B5-%ED%82%A4%EC%9B%8C%EB%93%9C\">🔑 오늘의 학습 키워드</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\">테스트 코드</a></li>\n<li><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\">리액트 테스트 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%9A%94%EC%95%BD-%EB%B0%8F-%ED%95%98%EB%A3%A8-%EA%B0%84%EB%8B%A8-%ED%9A%8C%EA%B3%A0\">📝 요약 및 하루 간단 회고</a></p>\n<ul>\n<li><a href=\"#%EC%98%A4%EB%8A%98%EC%9D%98-%EC%9E%98%ED%95%9C-%EC%A0%90\">오늘의 잘한 점</a></li>\n<li><a href=\"#%EC%98%A4%EB%8A%98%EC%9D%98-%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90\">오늘의 아쉬운 점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","excerpt":"🎄 성장일지 4.0 책 의 내용에 자극받아 시작하는 소박한  살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?\n성장하고 있는 것이 살아 있는 것이다.\n생명의 유일한 증거는 성장이다! 🌳 (1.0)키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명\n🍉 (2.0)경험 위주로\n단순 정보를 전달하기보다 무엇을 배웠고 어떻게 해결했는지 짧고 간단하게 작성\n❄️ (3.0)정해진 템플릿에 맞춰서\n키워드, 경험 모두 좋다. 다만 매일 작성하기로 마음 먹은만큼 핵심만 간결하게 정리할 수 있게 템플릿을 작성\n(3.1)230102부터 시작되는 학습에 관한 내용 추가\n(3.2)230313부터 좀더 경험, 감정 위주의 내용도 담기!\n🌾 (4.0)학습 키워드에서 최대한 간단한 정보 제공, 고민에서 내 경험을 자세히 적자! 🔑 오늘의 학습 키워드 테스트 코드 테스트 코드는 왜 작성할까? 테스트 코드를 작성하면 개발자는 코드를 더욱 안전하게 리팩토링할 수 있다. 테스트 코드를 작성하면 개발자는 나중에 코드를 더…","frontmatter":{"date":"May 30, 2023","title":"230530(화)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/5/30-gl/"}},"next":{"id":"6517a344-6de8-5051-aa7b-dacc09c77408","html":"<h2 id=\"-react\" style=\"position:relative;\"><a href=\"#-react\" aria-label=\" react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📎 React</h2>\n<p>이 글은 <a href=\"https://react.dev/\">리액트 공식문서 - 함수 컴포넌트</a>를 읽고 작성한 글입니다. 모든 내용을 다루지는 않고 개인적으로 부족했다고 느꼈던 부분, 새롭게\n알게 된 부분들을 간단하게 정리할 예정입니다.</p>\n<h2 id=\"learn-react---describing-the-ui\" style=\"position:relative;\"><a href=\"#learn-react---describing-the-ui\" aria-label=\"learn react   describing the ui permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Learn React - Describing the UI</h2>\n<p>리액트는 UI(User Interface)를 렌더링하기 위한 자바스크립트 라이브러리이다. UI는 버튼, 텍스트 그리고 이미지들과 같은 작은 단위로부터 구성된다.\n리액트는 그 작은 단위들을 재사용 가능하고, 중첩 가능하게 결합할 수 있게 해준다. 웹 사이트에서부터 폰 앱들까지 화면에 있는 모든 것들은 컴포넌트로 분해할 수 있다.\n이번 챕터에서 리액트 컴포넌트들을 만들고, 커스터마이즈하고 조건적으로 보여지게하는 방법을 배울 것이다.</p>\n<blockquote>\n<p>Describing the UI 텝의 요약 내용은 짧게 작성하고 넘어가겠습니다.</p>\n</blockquote>\n<ol>\n<li>당신의 첫 컴포넌트</li>\n</ol>\n<p>리액트 어플리케이션은 컴포넌트라고 불리는 독립된 UI 조각들로 구성된다. 리액트 컴포넌트는 <code class=\"language-text\">마크업을 뿌리는 자바스크립트 함수</code>이다. 컴포넌트들은 버튼처럼 작을 수도,\n전체 페이지처럼 클 수도 있다.</p>\n<ol start=\"2\">\n<li>컴포넌트를 불러오고 내보내기(Importing and Exporting Components)</li>\n</ol>\n<p>당신은 하나의 파일에서 많은 컴포넌트들을 선언할 수 있지만 매우 큰 파일은 유지보수하기 힘들다. 이런 문제를 해결하기 위해 esm(import, export)를 사용할 수 있다.</p>\n<blockquote>\n<p>이건 ecmascript의 규격인데, 이게 react의 장점인 것처럼 쓴 게 맞나 싶긴하다.(결국엔 리액트 컴포넌트도 그냥 JS 함수이고 이 함수를 esm으로 관리하는 것 뿐인데..!)</p>\n</blockquote>\n<ol start=\"3\">\n<li>JSX를 통해 markup을 작성 가능</li>\n</ol>\n<p>각 리액트 컴포넌트는 리액트가 브라우저로 렌더링하는 마크업들을 포함하고 있는 JS 함수이다. 리액트 컴포넌트들은 JSX라고 불리는 syntax extension을 사용하여 markup을 표현한다.\nJSX는 HTML이랑 비슷하지만, 좀더 엄격하고 동적인 정보를 보여줄 수 있다.</p>\n<ol start=\"4\">\n<li><code class=\"language-text\">{}(중괄호)</code>를 통해 JSX에 JS 문법 사용하기</li>\n</ol>\n<p>JSX는 자바스크립트 파일 안에서 (HTML 같은) markup을 작성할 수 있게 한다. 그리고 이것은 같은 곳에서 렌더링 로직과 컨텐츠를 유지하게 해준다. 때로는 당신은 markup에 작은 JS 로직 혹은\n동적인 값을 넣고 싶을 수 있다. 이럴 때, 당신은 중괄호를 사용하여 JSX에 JS 문법을 넣을 수 있다.</p>\n<ol start=\"5\">\n<li>컴포넌트를 통과하는 props</li>\n</ol>\n<p>리액트 컴포넌트들은 서로 소통하기 위해 <code class=\"language-text\">props</code>를 사용한다. 모든 부모 컴포넌트는 그들의 props를 자식 컴포넌트에게 전달함으로써 몇몇 정보를 줄 수 있다. props는 HTML attributes를\n생각나게 하지만, props를 통해서는 object, array, function, 심지어 JSX까지도 전달 할 수 있다.</p>\n<ol start=\"6\">\n<li>조건부 렌더링</li>\n</ol>\n<p>당신의 컴포넌트는 종종 조건에 따라서 다른 화면을 보여주고 싶을 것이다. 리액트에선, JS의 if 조건문처럼 <code class=\"language-text\">&amp;&amp;</code> 혹은 <code class=\"language-text\">? :</code>을 사용하여 조건부 렌더링을 할 수 있다.</p>\n<ol start=\"7\">\n<li>리스트 렌더링</li>\n</ol>\n<p>당신은 어떤 데이터의 묶음으로부터 다수의 비슷한 컴포넌트들을 보여주길 원할 것이다. 당신은 리액트와 함께 JS의 <code class=\"language-text\">filter</code>과 <code class=\"language-text\">map</code>을 사용하여 데이터 배열을 컴포넌트 배열로 변환할 수 있다.\n각각의 배열 아이템들에는 특정한 <code class=\"language-text\">key</code>가 필요하다.(중요) 보통은 Database의 id를 key로 사용한다. 리액트는 <code class=\"language-text\">Key</code>를 통해 배열이 변하더라도 배열 내부의 각 아이템들을 추적할 수 있게 된다.</p>\n<ol start=\"8\">\n<li>컴포넌트들을 순수하게 두어라</li>\n</ol>\n<p>리액트 컴포넌트들은 순수한 함수처럼 작동해야 한다.</p>\n<ul>\n<li>순수한 함수는 동일한 인자를 받으면 항상 동일한 결과를 반환한다.</li>\n<li>순수한 함수는 부작용(side effect)이 없다.</li>\n</ul>\n<p>컴포넌트들을 엄격하게 순수함수로 작성함으로써, 예상치 못한 버그들과 코드베이스가 커짐에 따라 생기는 예측불가능한 상황을 피할 수 있다.</p>\n<h2 id=\"1-your-first-component\" style=\"position:relative;\"><a href=\"#1-your-first-component\" aria-label=\"1 your first component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Your First Component</h2>\n<p><code class=\"language-text\">컴포넌트</code>는 리액트의 핵심적인 컨셉이다. 컴포넌트들은 UI를 완성함에 있어서 기초가 되고, 그것은 당신의 리액트 여행을 시작하는데 있어서 가장 중요한 부분이다.</p>\n<h3 id=\"components-ui-building-blocks\" style=\"position:relative;\"><a href=\"#components-ui-building-blocks\" aria-label=\"components ui building blocks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Components: UI building blocks</h3>\n<p>HTML에서 정해진 태그를 제공하듯, 리액트에서는 당신만의 컴포넌트를 만들 수 있다. 또한, Chakra UI와 Material UI 같은 리액트 오픈소스 커뮤니트를 통해\n수천개의 컴포넌트를 사용할 수 있다. 즉, 당신만의 재사용가능한 UI element를 만들 수 있다는 것이다.</p>\n<h3 id=\"defining-a-component\" style=\"position:relative;\"><a href=\"#defining-a-component\" aria-label=\"defining a component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining a component</h3>\n<p>리액트 컴포넌트는 마크업과 함께 뿌릴 수 있는 자바스크립트 함수이다.</p>\n<h2 id=\"using-a-component\" style=\"position:relative;\"><a href=\"#using-a-component\" aria-label=\"using a component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using a component</h2>\n<p>당신이 만든 컴포넌트를 다른 컴포넌트의 내부에서 사용할 수 있다.(<code class=\"language-text\">이걸 composition 혹은 nesting이라고 한다.</code>) 이것은 당신이 만든 컴포넌트를 재사용할 수 있게 해준다.\nHTML tag는 소문자로 제공되게에 리액트가 알아차릴 수 있다. 그래서 당신이 만든 컴포넌트는 대문자로 시작해야 한다.</p>\n<ul>\n<li>컴포넌트 함수 내부에서 다른 컴포넌트 함수를 정의하는 것은 절대 금지다! 모든 컴포넌트는 반드시 최상단에서 정의되어야 한다.</li>\n</ul>\n<blockquote>\n<p>React 어플리케이션은 <code class=\"language-text\">root</code> 컴포넌트에서 시작된다. CRA를 사용하는 경우, <code class=\"language-text\">src/App.jsx</code>가 root 컴포넌트이며 Next.js 프레임워크를 사용하는 경우, <code class=\"language-text\">pages/inex.jsx</code>가 root 컴포넌트이다.\n대부분의 React 앱은 모든 부분에서 컴포넌트를 사용한다. 아주 작은 단위부터 페이지와 같은 큰 단위까지! 컴포넌트가 단 한번만 사용된다고 하더라도 리액트 컴포넌트를 통해 작성하는 것은\nUI 코드와 마크업을 정리하는 편리한 방법이다.<br/>\nReact 기반의 많은 프레임워크들은 빈 HTML 파일을 사용하고 JS로 페이지 관리를 대신 수행하도록 하는 대신, React 컴포넌트에서 HTML을 자동으로 생성하기도 한다.\n그럼으로써 JS 코드가 로드되기 전에 앱에서 일부 컨텐츠를 표시할 수 있다.</p>\n</blockquote>\n<h2 id=\"2-importing-and-exporting-components\" style=\"position:relative;\"><a href=\"#2-importing-and-exporting-components\" aria-label=\"2 importing and exporting components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Importing and Exporting Components</h2>\n<h3 id=\"the-root-component-file\" style=\"position:relative;\"><a href=\"#the-root-component-file\" aria-label=\"the root component file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The root component file</h3>\n<ul>\n<li>React에서는 <code class=\"language-text\">App.js</code>라는 <code class=\"language-text\">root 컴포넌트 파일</code>이 존재한다. 설정에 따라서 다른 파일에 존재할 수도 있다. 한편 NEXT.js에서는 페이지 별로 root 컴포넌트가 다를 수 있다.</li>\n</ul>\n<h3 id=\"exporting-and-importing-a-component\" style=\"position:relative;\"><a href=\"#exporting-and-importing-a-component\" aria-label=\"exporting and importing a component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exporting and importing a component</h3>\n<ul>\n<li>컴포넌트를 다른 파일에서 사용하려면, 컴포넌트를 <code class=\"language-text\">export</code>해야 한다. 그리고 그 컴포넌트를 사용하고 싶은 파일에서 <code class=\"language-text\">import</code>해야 한다.</li>\n</ul>\n<blockquote>\n<p>React에서는 ‘Gallery.js’와 ‘./Gallery’ 모두 사용 가능하지만, 전자의 경우가 ESM 방식에 더 가깝다.<br/></p>\n</blockquote>\n<h3 id=\"exporting-and-importing-multiple-components-from-the-same-file\" style=\"position:relative;\"><a href=\"#exporting-and-importing-multiple-components-from-the-same-file\" aria-label=\"exporting and importing multiple components from the same file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exporting and importing multiple components from the same file</h3>\n<ul>\n<li>하나의 파일에서 <code class=\"language-text\">default export</code>와 <code class=\"language-text\">named export</code>를 동시에 사용 가능하다.</li>\n</ul>\n<h2 id=\"writing-markup-with-jsx\" style=\"position:relative;\"><a href=\"#writing-markup-with-jsx\" aria-label=\"writing markup with jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Markup with JSX</h2>\n<ul>\n<li>JSX는 JS를 확장한 문법이다. JS 파일 안에 HTML과 유사한 마크업을 작성할 수 있도록 해준다. 컴포넌트를 작성하는 다른 방법도 있지만, 보편적으로 JSX가 사용된다.</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">React.createElement('div', null, </code>Hello ${this.props.toWhat}<code class=\"language-text\">);</code>과 같이 JSX를 사용하지 않고 컴포넌트를 작성할 수도 있다.</p>\n</blockquote>\n<h3 id=\"jsx-putting-markup-into-javascript\" style=\"position:relative;\"><a href=\"#jsx-putting-markup-into-javascript\" aria-label=\"jsx putting markup into javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX: Putting markup into JavaScript</h3>\n<ul>\n<li>기존의 웹은 HTML로 컨텐츠, CSS로 디자인, JS로 로직을 작성해왔다. 이렇드 보통은 분리된 파일로 각각 관리하였다.</li>\n<li>웹이 발전하고 더욱더 interactive해지면서 <code class=\"language-text\">로직이 컨텐츠를 결정하는 경우</code>가 증가했다. 그러면서 JS가 HTML도 담당하게 되었고 이게 바로 React 컴포넌트에 렌더링 로직과 마크업이 함께 들어가게 된 이유이다.</li>\n<li>각 React 컴포넌트는 브라우저에 렌더링될 마크업을 반환하는 함수이다. React 컴포넌트는 JSX라는 구문 확장자(JS 객체)를 사용하여 해당하는 마크업을 표현한다. HTML과 유사해보이지만 더 엄격하고 동적으로 정보를 표시할 수 있다.</li>\n</ul>\n<blockquote>\n<p>JSX와 React는 별개의 개념이다. 사실상 함께 사용되기는 하지만 독립적으로 사용도 가능하다. JSX는 <code class=\"language-text\">구문 확장</code>, React는 JS 라이브러리이다.</p>\n</blockquote>\n<h3 id=\"the-rules-of-jsx\" style=\"position:relative;\"><a href=\"#the-rules-of-jsx\" aria-label=\"the rules of jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Rules of JSX</h3>\n<h4 id=\"1-return-a-single-root-element\" style=\"position:relative;\"><a href=\"#1-return-a-single-root-element\" aria-label=\"1 return a single root element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Return a single root element</h4>\n<ul>\n<li>JSX는 반드시 하나의 루트 엘리먼트를 반환해야 한다. 여러 엘리먼트를 반환하려면, <code class=\"language-text\">React.Fragment</code>(<code class=\"language-text\">&lt;>&lt;/></code>)를 사용하면 된다.</li>\n</ul>\n<blockquote>\n<p>왜 하나의 엘리먼트를 반환해야할까??<br/>\nJSX는 결국 <code class=\"language-text\">JS 객체</code>이다. 헌데 하나의 엘리먼트로 감싸지 않으면 마치 배열을 감싸지 않고 한번에 여러개의 원소를 return하겠다는 것과 동일하다.</p>\n</blockquote>\n<h4 id=\"2-close-all-the-tags\" style=\"position:relative;\"><a href=\"#2-close-all-the-tags\" aria-label=\"2 close all the tags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Close all the tags</h4>\n<ul>\n<li>반드시 태그를 명시적으로 닫아야 한다.</li>\n</ul>\n<h4 id=\"3-camelcase-all-most-of-the-things\" style=\"position:relative;\"><a href=\"#3-camelcase-all-most-of-the-things\" aria-label=\"3 camelcase all most of the things permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. camelCase all most of the things!</h4>\n<ul>\n<li>JSX는 결국 JS 객체이고 이 안에서 작성된 어트리뷰트들은 이 객체의 key가 된다. 그렇기 때문에 camelCase로 작성하는 것을 권장한다.</li>\n<li>또한 일반 HTML 태그의 어트리뷰트 중 <code class=\"language-text\">class</code>를 대체하는 것은 <code class=\"language-text\">className</code>으로 이는 JS에 이미 존재하는 <code class=\"language-text\">class</code> 예약어때문이다.</li>\n</ul>\n<h2 id=\"javascript-in-jsx-with-curly-braces\" style=\"position:relative;\"><a href=\"#javascript-in-jsx-with-curly-braces\" aria-label=\"javascript in jsx with curly braces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript in JSX with Curly Braces</h2>\n<ul>\n<li>JSX로 작성한 마크업 안에 JS 로직을 추가하거나 동적인 값을 표현하고 싶을 때, 중괄호<code class=\"language-text\">{}</code>를 사용한다.</li>\n</ul>\n<h3 id=\"using-double-curlies-css-and-other-objects-in-jsx\" style=\"position:relative;\"><a href=\"#using-double-curlies-css-and-other-objects-in-jsx\" aria-label=\"using double curlies css and other objects in jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using “double curlies”: CSS and other objects in JSX</h3>\n<ul>\n<li>종종 중괄호 안에 중괄호를 사용해야 할 때가 있다. 예를 들어, CSS를 작성할 때, 중괄호 안에 객체를 작성해야 한다. 이때, 중괄호를 두번 사용하면 된다.(은근 잘 헷갈린다.)</li>\n<li>반드시 JSX에서 가장 바깥 <code class=\"language-text\">{}</code>는 JS 코드를 작성하기 위한 것이고, 안쪽 <code class=\"language-text\">{}</code>는 객체를 작성하기 위한 것이라는 것을 기억하자.</li>\n</ul>\n<blockquote>\n<p>style 전달을 위한 객체의 key값은 camelCase로 작성해야 한다.</p>\n</blockquote>\n<h2 id=\"passing-props-to-a-component\" style=\"position:relative;\"><a href=\"#passing-props-to-a-component\" aria-label=\"passing props to a component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Passing Props to a Component</h2>\n<ul>\n<li>React 컴포넌트는 props를 이용해 서로 통신한다.(값을 주고 받는다.) 부모 컴포넌트는 props를 전달함으로써 정보를 자식 컴포넌트에게 전달할 수 있다.</li>\n<li>props는 HTML 어트리뷰트(속성)을 떠오르게 하지만, JS의 모든 <code class=\"language-text\">값</code>을 전달할 수 있다.</li>\n</ul>\n<h3 id=\"familiar-props\" style=\"position:relative;\"><a href=\"#familiar-props\" aria-label=\"familiar props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Familiar props</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Avatar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>\n      <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>avatar<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://i.imgur.com/1bX5QH6.jpg<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Lin Lanying<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 코드에서 <code class=\"language-text\">src</code>, <code class=\"language-text\">alt</code>, <code class=\"language-text\">width</code>, <code class=\"language-text\">height</code>는 모두 props이다. 이는 HTML의 어트리뷰트와 유사하다.</li>\n</ul>\n<p>아래와 같은 방식으로 부모가 전달한 props를 받아서 자식이 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getImageUrl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./utils.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 개인적으로 내가 좋아하는 방법</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Avatar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> person<span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>\n      <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>avatar<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">getImageUrl</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 파라미터로 바로 구조분해할당하는 방법</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Avatar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> person<span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>\n      <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>avatar<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">getImageUrl</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span>\n        <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">person</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Katsuko Saruhashi'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">imageId</span><span class=\"token operator\">:</span> <span class=\"token string\">'YfeOqp2'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>props는 컴포넌트에서 전달할 수 있는 유일한 <code class=\"language-text\">함수의 파라미터</code>이다.</li>\n</ul>\n<h3 id=\"forwarding-props-with-the-jsx-spread-syntax\" style=\"position:relative;\"><a href=\"#forwarding-props-with-the-jsx-spread-syntax\" aria-label=\"forwarding props with the jsx spread syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Forwarding props with the JSX spread syntax</h3>\n<ul>\n<li>props를 전달할 때, <code class=\"language-text\">전달하고 싶은 props의 개수가 많아지면</code> 번거롭다. 이때, <code class=\"language-text\">JSX spread syntax</code>를 사용하면 편리하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> person<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> isSepia<span class=\"token punctuation\">,</span> thickBorder <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>card<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span>\n        <span class=\"token attr-name\">person</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">isSepia</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isSepia<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">thickBorder</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>thickBorder<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 부모 컴포넌트의 모든 props를 전달한다면 아래와 같이 쓰는 게 더 깔끔할 수 있다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>card<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"passing-jsx-as-children\" style=\"position:relative;\"><a href=\"#passing-jsx-as-children\" aria-label=\"passing jsx as children permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Passing JSX as children</h3>\n<ul>\n<li>컴포넌트를 사용할 때, <code class=\"language-text\">&lt;Avatar /></code>처럼 태그를 사용하는 것이 아니라, <code class=\"language-text\">&lt;Avatar>&lt;/Avatar></code>처럼 사용할 수도 있다. 이때, 컴포넌트의 <code class=\"language-text\">children</code>이라는 props에 JSX를 전달할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> Avatar <span class=\"token keyword\">from</span> <span class=\"token string\">'./Avatar.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Card 컴포넌트는 내부에서 무엇이 렌더링되는지 알 필요가 없다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>card<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span>\n        <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">person</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> \n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Katsuko Saruhashi'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">imageId</span><span class=\"token operator\">:</span> <span class=\"token string\">'YfeOqp2'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>시각적 래퍼에 대한 컴포넌트를 만들 때, <code class=\"language-text\">children</code>을 사용하면 유용하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> Avatar <span class=\"token keyword\">from</span> <span class=\"token string\">'./Avatar.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>card<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CardWithAvatar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CardWithAvatar</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Katsuko Saruhashi</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Chemist</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CardWithAvatar</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"how-props-change-over-time\" style=\"position:relative;\"><a href=\"#how-props-change-over-time\" aria-label=\"how props change over time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How props change over time</h3>\n<ul>\n<li>컴포넌트는 <code class=\"language-text\">props</code>를 통해 정보를 전달받는다. 이때, <code class=\"language-text\">props</code>는 <code class=\"language-text\">immutable</code>하다. 즉, 컴포넌트가 렌더링되는 동안 <code class=\"language-text\">props</code>는 변하지 않는다.</li>\n<li>반드시 props에 대한 변경을 시도하지 말자. 컴포넌트가 렌더링되는 동안 props는 변하지 않는다는 것을 기억하자.</li>\n<li>어떤 변경을 위한 정보를 전달하고 싶다면, <code class=\"language-text\">state</code>를 사용하자.</li>\n</ul>\n<h2 id=\"conditional-rendering\" style=\"position:relative;\"><a href=\"#conditional-rendering\" aria-label=\"conditional rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Rendering</h2>\n<ul>\n<li>어떤 조건에 따라 다른 UI를 보여줘야하는 경우로 리액트에서는 주로 <code class=\"language-text\">if</code> 문, <code class=\"language-text\">&amp;&amp;</code> 연산자(논리 연산자), <code class=\"language-text\">?</code>와 <code class=\"language-text\">:</code> 연산자(삼항 연산자)를 사용한다.</li>\n<li><code class=\"language-text\">null</code>!!! 리액트에서 <code class=\"language-text\">null</code>은 아무것도 렌더링하지 않는다.(null은 아무것도 렌더링하지 않겠다는 의미이다.)</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">null</code>은 아무것도 렌더링하지 않는다는 점을 이용하면, 조건부 렌더링을 할 수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> person <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">person</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>삼항연산자를 사용하여 조건부 렌더링을 할 수 있다. 단, 너무 잦은 삼항연산자 사용은 가독성을 낮출 수 있기에 자식 컴포넌트를 추출하여 정리하는 것을 고려하는 게 좋다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> person <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>person <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">person</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>논리연산자(&#x26;&#x26;)는 주로 조건이 참일 때 일부 JSX를 렌더링하고 그렇지 않으면 아무것도 렌더링하지 않으려 할 때 자주 사용된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> person <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>person <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">person</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>&#x26;&#x26;의 왼쪽에 숫자가 오게 하지 말자! 예를 들어 우리는 흔히 <code class=\"language-text\">0</code>이 falsy하기 때문에 <code class=\"language-text\">0</code>이 오면 <code class=\"language-text\">0</code>이 렌더링되지 않는다고 생각할 수 있다. 하지만 <code class=\"language-text\">0</code>은 falsy하지만 <code class=\"language-text\">false</code>는 아니기 때문에 <code class=\"language-text\">0</code>이 렌더링된다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">zero</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">zero</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이럴 땐 0의 표현을 true/false로 바꿔주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">zero</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">zero</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"rendering-lists\" style=\"position:relative;\"><a href=\"#rendering-lists\" aria-label=\"rendering lists permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rendering Lists</h2>\n<ul>\n<li>우리가 갖고 있는 데이터 모음에서 유사한 컴포넌트를 여러 개 렌더링하고 싶을 때가 있다. 이때, <code class=\"language-text\">map</code> 혹은 <code class=\"language-text\">filter</code>을 사용하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfileList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> profiles <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>profiles<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">profile</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profile</span></span> <span class=\"token attr-name\">person</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>profile<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"keeping-list-items-in-order-with-code-classlanguage-textkeycode\" style=\"position:relative;\"><a href=\"#keeping-list-items-in-order-with-code-classlanguage-textkeycode\" aria-label=\"keeping list items in order with code classlanguage textkeycode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keeping list items in order with <code class=\"language-text\">key</code></h3>\n<ul>\n<li>배열 형태의 데이터를 map, filter 등으로 컴포넌트로 표현할 때, <code class=\"language-text\">key</code>를 지정해주지않으면 아래와 같은 경고 메시지를 확인할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Warning: Each child <span class=\"token keyword\">in</span> a list should have a unique “key” prop. \n경고: 목록의 각 자식에는 고유한 “key” prop이 있어야 합니다.</code></pre></div>\n<ul>\n<li>map() 호출 내부의 JSX 요소에는 항상 고유한 <code class=\"language-text\">key</code> prop을 지정해야 한다.</li>\n<li><code class=\"language-text\">key</code>는 각 컴포넌트가 어떤 배열 항목에 해당하는지 리액트에 알려주어 나중에 매칭할 수 있도록 한다. 배열이 정렬되어 그 내부 데이터가 이동하거나, 삽입, 삭제되는 경우 key를 기반으로 추적한다.</li>\n<li>key값은 프론트엔드에서 즉석으로 생성하는 것이 아닌, 데이터베이스에서 가져온 데이터의 고유한 식별자를 사용하는 것이 좋다.(로컬에서 생성된 데이터를 사용하는 경우 <code class=\"language-text\">crypto.randomUUID()</code> 혹은 <code class=\"language-text\">uuid</code>를 사용하는 것이 좋다.)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfileList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> profiles <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>profiles<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">profile</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profile</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>profile<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">person</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>profile<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Fragment(&#x3C;>&#x3C;/>)에는 key값을 전달할 수 없으므로, 리액트에서 사용하는 Fragment를 사용할 수 있다.</p>\n</blockquote>\n<h3 id=\"rules-of-keys\" style=\"position:relative;\"><a href=\"#rules-of-keys\" aria-label=\"rules of keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rules of keys</h3>\n<ul>\n<li>key는 형제 간에 고유해야 한다. 당연히 다른 데이터 배열의 JSX 노드에는 동일한 key를 사용해도 괜찮다.</li>\n<li>key가 변경되지 않아야 한다. key는 컴포넌트의 <code class=\"language-text\">props</code>와 <code class=\"language-text\">state</code>에 의존해서는 안된다. key는 컴포넌트가 렌더링될 때마다 고유한 값이어야 한다.</li>\n</ul>\n<h3 id=\"why-does-react-need-keys\" style=\"position:relative;\"><a href=\"#why-does-react-need-keys\" aria-label=\"why does react need keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why does React need keys???</h3>\n<ul>\n<li>데스크톱 파일에 이름 대신 순서가 적혀있다고 생각해보자. 처음엔 나쁘지 않지만, 첫번째 파일이 지워지면 <code class=\"language-text\">두번째 파일이 곧 첫번째 파일이 된다.</code> 즉, 헷갈리게 된다.(그냥 배열의 index로 key를 지정하면 이런 문제가 발생한다.)</li>\n<li>이 때, 폴더의 파일 이름과 JSX key는 비슷한 역할을 한다. key를 사용하면 형제 항목 사이에서 특정 항목을 고유하게 식별할 수 있다. 데이터 내의 고유한 id를 통해 key를 지정하게 되면 재정렬로 인해 데이터의 위치가 변경되더라도 key는 변하지 않기 때문에 문제가 발생하지 않는다.</li>\n</ul>\n<blockquote>\n<p>절대로 key를 <code class=\"language-text\">Math.random()</code>과 같이 즉석에서 생성하면 안된다. 렌더링될 때마다 새로운 key가 생성되기 때문에 컴포넌트가 불필요하게 리렌더링되고 성능이 저하된다.<br/>\n컴포넌트는 <code class=\"language-text\">key</code>를 prop으로 받지 않는다. 만약 자식 컴포넌트에게 어떤 고유한 id를 전달해주고 싶다면 별도의 prop으로 전달해야 한다. <code class=\"language-text\">&lt;Profile key ={id} userId={id} /></code></p>\n</blockquote>\n<h2 id=\"keeping-components-pure\" style=\"position:relative;\"><a href=\"#keeping-components-pure\" aria-label=\"keeping components pure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keeping Components Pure</h2>\n<ul>\n<li>컴포넌트는 <code class=\"language-text\">props</code>와 <code class=\"language-text\">state</code>에 의존해서는 안된다. 컴포넌트는 <code class=\"language-text\">props</code>와 <code class=\"language-text\">state</code>가 변경되지 않으면 항상 동일한 결과를 렌더링해야 한다. 이를 <code class=\"language-text\">순수 컴포넌트</code>라고 한다.</li>\n</ul>\n<h3 id=\"purity-components-as-formulas\" style=\"position:relative;\"><a href=\"#purity-components-as-formulas\" aria-label=\"purity components as formulas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Purity: Components as formulas</h3>\n<ul>\n<li>순수 컴포넌트는 수학적인 함수와 비슷하다. 함수는 입력값이 같으면 항상 동일한 결과를 반환한다. 컴포넌트도 <code class=\"language-text\">props</code>가 같으면 항상 동일한 결과를 렌더링한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> person <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 컴포넌트는 순수 컴포넌트이다. <code class=\"language-text\">props</code>가 같으면 항상 동일한 결과를 반환한다. 만약 <code class=\"language-text\">props</code>가 변경되면 컴포넌트는 다시 렌더링된다.</li>\n</ul>\n<h3 id=\"side-effects-unintended-consequences\" style=\"position:relative;\"><a href=\"#side-effects-unintended-consequences\" aria-label=\"side effects unintended consequences permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Side Effects: (un)intended consequences</h3>\n<ul>\n<li>React의 렌더링 과정은 항상 순수해야 한다. 컴포넌트는 JSX만을 반환하며, 렌더링 전에 존재해던 객체나 변수를 변경해서는 안된다. 이를 <code class=\"language-text\">부수 효과</code>라고 한다.</li>\n</ul>\n<h3 id=\"detecting-impure-calculations-with-code-classlanguage-textstrictmodecode\" style=\"position:relative;\"><a href=\"#detecting-impure-calculations-with-code-classlanguage-textstrictmodecode\" aria-label=\"detecting impure calculations with code classlanguage textstrictmodecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Detecting impure calculations with <code class=\"language-text\">StrictMode</code></h3>\n<ul>\n<li>리액트에서는 렌더링하는 동안 읽을 수 있는 입력값이 3가지 있다. <code class=\"language-text\">props</code>, <code class=\"language-text\">state</code>, <code class=\"language-text\">context</code>. 이 3가지 값은 렌더링 중에만 읽을 수 있으며, 렌더링 이후에는 읽을 수 없다. 이를 <code class=\"language-text\">읽기 전용</code>이라고 한다.</li>\n<li>사용자 입력에 대한 응답으로 무언가를 바꾸려면 변수 대신 <code class=\"language-text\">state</code>를 설정해야 한다. 컴포넌트가 렌더링되는 동안엔 기존 변수, 객체를 절대 변경해서는 안된다.</li>\n<li>리액트는 <code class=\"language-text\">개발 환경</code>에서 각 컴포넌트의 함수를 두 번 호출하는 <code class=\"language-text\">Strict Mode</code>를 제공한다. <code class=\"language-text\">Strict Mode</code>는 컴포넌트 함수를 <code class=\"language-text\">두 번</code> 호출함으로써 규칙을 위반하는 컴포넌트를 찾아내는 데 도움이 된다.</li>\n</ul>\n<h3 id=\"where-you-can-cause-side-effects\" style=\"position:relative;\"><a href=\"#where-you-can-cause-side-effects\" aria-label=\"where you can cause side effects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where you can cause side effects</h3>\n<ul>\n<li>함수형 프로그래밍은 <code class=\"language-text\">순수성</code>에 크게 의존하지만, 언젠가 어디에선가 무언가는 바뀌어야 한다. <code class=\"language-text\">화면 업데이트</code>, <code class=\"language-text\">애니메이션 시작</code>, <code class=\"language-text\">데이터 변경</code>과 같은 이러한 변경을 <code class=\"language-text\">사이드 이펙트(부수 효과)</code>라고 한다.</li>\n<li>사이드 이펙트는 렌더링 중에 일어나는 것이 아니라 <code class=\"language-text\">부수적으로</code> 일어나는 일을 말한다.</li>\n<li>리액트에서 사이드 이펙트는 주로 <code class=\"language-text\">이벤트 핸들러</code>에 속한다. 이벤트 핸들러는 유저가 어떤 동작을 수행할 때(ex) 버튼을 클릭 할 때) React가 실행하는 함수이다.</li>\n<li>이벤트 핸들러가 컴포넌트의 내부에 정의되어있긴 하지만, 렌더링 중에는 실행되지 않는다. 즉, 이벤트 핸들러는 순수할 필요가 없다.</li>\n</ul>\n<blockquote>\n<p>다른 모든 옵션을 다 시도했는데도 사이드 이펙트에 적합한 이벤트 핸들러를 찾을 수 없다면, <code class=\"language-text\">useEffect</code> 훅을 사용하여 반환된 JSX에 이벤트 핸들러를 추가할 수 있다.<br/>\n그렇게되면 나중에 렌더링 후 사이드 이펙트가 허용될 때 React가 이것을 실행한다. 단, 이 방법은 최후의 수단으로 두어야 한다!!!<br/>\n가능하면 렌더링만으로 로직을 표현하고자 해보아라! 많은 것을 배울 수 있을 것이다!</p>\n</blockquote>\n<h3 id=\"why-does-react-care-about-purity\" style=\"position:relative;\"><a href=\"#why-does-react-care-about-purity\" aria-label=\"why does react care about purity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why does React care about purity?</h3>\n<ul>\n<li>컴포넌트를 다른 환경(ex) 서버)에서 실행할 수 있다. 이 때, 동일한 입력에 대해 동일한 결과를 반환하기에 하나의 컴포넌트가 많은 사용자 요청을 처리할 수 있다.</li>\n<li>입력이 변경되지 않은 컴포넌트는 이전에 렌더링된 결과를 재사용할 수 있다. 이를 <code class=\"language-text\">리액트의 재조정</code>이라고 한다.(순수 함수는 동일한 입력에 대해 동일한 출력이 나오기 때문에 가능하다.)</li>\n<li>깊은 컴포넌트 트리를 렌더링하는 도중에 어떤 데이터가 변경되면 React는 오래된 렌더링을 완료하지 않고 렌더링을 다시 시작할 수 있다.</li>\n</ul>\n<h1 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h1>\n<ul>\n<li><a href=\"https://react-ko.dev/learn/describing-the-ui\">React 공식 문서 - describing the ui</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-react\">📎 React</a></p>\n</li>\n<li>\n<p><a href=\"#learn-react---describing-the-ui\">Learn React - Describing the UI</a></p>\n</li>\n<li>\n<p><a href=\"#1-your-first-component\">1. Your First Component</a></p>\n<ul>\n<li><a href=\"#components-ui-building-blocks\">Components: UI building blocks</a></li>\n<li><a href=\"#defining-a-component\">Defining a component</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#using-a-component\">Using a component</a></p>\n</li>\n<li>\n<p><a href=\"#2-importing-and-exporting-components\">2. Importing and Exporting Components</a></p>\n<ul>\n<li><a href=\"#the-root-component-file\">The root component file</a></li>\n<li><a href=\"#exporting-and-importing-a-component\">Exporting and importing a component</a></li>\n<li><a href=\"#exporting-and-importing-multiple-components-from-the-same-file\">Exporting and importing multiple components from the same file</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#writing-markup-with-jsx\">Writing Markup with JSX</a></p>\n<ul>\n<li>\n<p><a href=\"#jsx-putting-markup-into-javascript\">JSX: Putting markup into JavaScript</a></p>\n</li>\n<li>\n<p><a href=\"#the-rules-of-jsx\">The Rules of JSX</a></p>\n<ul>\n<li><a href=\"#1-return-a-single-root-element\">1. Return a single root element</a></li>\n<li><a href=\"#2-close-all-the-tags\">2. Close all the tags</a></li>\n<li><a href=\"#3-camelcase-all-most-of-the-things\">3. camelCase all most of the things!</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#javascript-in-jsx-with-curly-braces\">JavaScript in JSX with Curly Braces</a></p>\n<ul>\n<li><a href=\"#using-double-curlies-css-and-other-objects-in-jsx\">Using “double curlies”: CSS and other objects in JSX</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#passing-props-to-a-component\">Passing Props to a Component</a></p>\n<ul>\n<li><a href=\"#familiar-props\">Familiar props</a></li>\n<li><a href=\"#forwarding-props-with-the-jsx-spread-syntax\">Forwarding props with the JSX spread syntax</a></li>\n<li><a href=\"#passing-jsx-as-children\">Passing JSX as children</a></li>\n<li><a href=\"#how-props-change-over-time\">How props change over time</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#conditional-rendering\">Conditional Rendering</a></p>\n</li>\n<li>\n<p><a href=\"#rendering-lists\">Rendering Lists</a></p>\n<ul>\n<li><a href=\"#keeping-list-items-in-order-with-key\">Keeping list items in order with <code class=\"language-text\">key</code></a></li>\n<li><a href=\"#rules-of-keys\">Rules of keys</a></li>\n<li><a href=\"#why-does-react-need-keys\">Why does React need keys???</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#keeping-components-pure\">Keeping Components Pure</a></p>\n<ul>\n<li><a href=\"#purity-components-as-formulas\">Purity: Components as formulas</a></li>\n<li><a href=\"#side-effects-unintended-consequences\">Side Effects: (un)intended consequences</a></li>\n<li><a href=\"#detecting-impure-calculations-with-strictmode\">Detecting impure calculations with <code class=\"language-text\">StrictMode</code></a></li>\n<li><a href=\"#where-you-can-cause-side-effects\">Where you can cause side effects</a></li>\n<li><a href=\"#why-does-react-care-about-purity\">Why does React care about purity?</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 28, 2023","title":"react - Learn React(Describing the UI)","categories":"스터디 공식문서","author":"제이든","emoji":"📜"},"fields":{"slug":"/from-time-to-time/study/react-official/learn-react-describing-ui/"}},"prev":{"id":"3143952d-9296-5ccf-ae4c-96cbdbfd8db9","html":"<h2 id=\"-react\" style=\"position:relative;\"><a href=\"#-react\" aria-label=\" react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📎 React</h2>\n<p>이 글은 <a href=\"https://react.dev/\">리액트 공식문서 - 함수 컴포넌트</a>를 읽고 작성한 글입니다. 모든 내용을 다루지는 않고 개인적으로 부족했다고 느꼈던 부분, 새롭게\n알게 된 부분들을 간단하게 정리할 예정입니다.</p>\n<h1 id=\"learn-react---adding-interactivity\" style=\"position:relative;\"><a href=\"#learn-react---adding-interactivity\" aria-label=\"learn react   adding interactivity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Learn React - Adding Interactivity</h1>\n<p>리액트에서는 <code class=\"language-text\">시간이 지남에 따라 변하는 데이터</code>를 모두 <code class=\"language-text\">state</code>라고 한다.</p>\n<h2 id=\"responding-to-events\" style=\"position:relative;\"><a href=\"#responding-to-events\" aria-label=\"responding to events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Responding to events</h2>\n<p>React를 통해 JSX에 이벤트 핸들러를 추가할 수 있다. 이때, 이벤트 핸들러는 클릭, 마우스오, input에 초점 맞추기 사용자 상호작용에 의해 실행되는 콜백함수를 의미한다.</p>\n<h2 id=\"state-a-components-memory\" style=\"position:relative;\"><a href=\"#state-a-components-memory\" aria-label=\"state a components memory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State: a component’s memory</h2>\n<p>컴포넌트는 상호 작용의 결과로 화면의 내용을 변경해야 하는 경우가 많다. 이 때, 컴포넌트는 이런 변하는 내용을 <code class=\"language-text\">기억</code>하고 있어야 한다. React에서는 이런 종류의 컴포넌트별 메모리를 state라고 부른다.</p>\n<p>컴포넌트에 state를 추가하려면 useState 훅을 사용하면 된다. 훅들은 컴포넌트가 React 기능을 사용할 수 있게 해주는 특수한 함수들이다.\nuseState 훅을 사용하면 state 변수를 선언할 수 있다. 초기 state를 받아 현재 state와 이를 업데이트할 수 있는 state 설정자 함수의 값 쌍을 반환한다.</p>\n<h2 id=\"render-and-commit\" style=\"position:relative;\"><a href=\"#render-and-commit\" aria-label=\"render and commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render and commit</h2>\n<p>컴포넌트가 화면에 표시되기 전에, 컴포넌트들은 리액트에서 렌더링되어야 한다. 아래의 과정을 거친다.</p>\n<ul>\n<li>렌더링 발동</li>\n<li>컴포넌트 렌더링</li>\n<li>DOM에 커밋</li>\n</ul>\n<h2 id=\"state-as-a-snapshot\" style=\"position:relative;\"><a href=\"#state-as-a-snapshot\" aria-label=\"state as a snapshot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State as a snapshot</h2>\n<p>일반 JavaScript 변수와 달리 React state는 스냅샷처럼 동작한다. state 변수를 설정해도 이미 가지고 있는 state 변수는 변경되지 않고 대신 리렌더링된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0</span>\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Request a re-render with 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Still 0!</span></code></pre></div>\n<h2 id=\"queueing-a-series-of-state-updates\" style=\"position:relative;\"><a href=\"#queueing-a-series-of-state-updates\" aria-label=\"queueing a series of state updates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Queueing a series of state updates</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>score<span class=\"token punctuation\">,</span> setScore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Score: </span><span class=\"token punctuation\">{</span>score<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// '+3' 버튼을 클릭해도 숫자는 1씩만 증가한다.</span></code></pre></div>\n<p>setState를 실행하면 새로운 렌더링을 요청하지만 이미 실행 중인 코드에서는 변경하지 않는다. 위 로직을 아래와 같이 수정하면 원하는 결과를 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>score<span class=\"token punctuation\">,</span> setScore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> s <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Score: </span><span class=\"token punctuation\">{</span>score<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"updating-objects-in-state\" style=\"position:relative;\"><a href=\"#updating-objects-in-state\" aria-label=\"updating objects in state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating objects in state</h2>\n<p>state에는 객체를 포함한 JS에서의 모든 <code class=\"language-text\">값</code>을 할당할 수 있다. state에 객체를 할당했을 때는, 해당 객체 내부 값을 변경해서는 안된다.\n대신 객체를 업데이트하려면 새 객체를 생성하거나 기존 객체의 복사본을 만든 다음 해당 복사본을 사용하도록 state를 업데이트해야 한다.</p>\n<blockquote>\n<p>일반적으로 <code class=\"language-text\">...</code>와 같은 스프레드 연산자를 사용해 객체나 배열을 복사하여 사용한다. <br/>\n(추가) 불변성을 유지하면서 객체를 복사하는 것이 싫다면 <a href=\"https://github.com/immerjs/use-immer\">Immer</a>와 같은 라이브러리를 사용하여 반복되는 코드의 양을 줄일 수 있다.</p>\n</blockquote>\n<h2 id=\"updating-arrays-in-state\" style=\"position:relative;\"><a href=\"#updating-arrays-in-state\" aria-label=\"updating arrays in state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating arrays in state</h2>\n<p>객체와 마찬가지로 배열 또한 state에 할당한 후, 그 state(배열이 할당된)의 내부를 직접 변경해서는 안된다. 새로운 배열로 업데이트하기 위해 새 배열 혹은 기존 배열의 복사본을 생성한 후 setState로 업데이트한다.</p>\n<hr>\n<h2 id=\"responding-to-events-1\" style=\"position:relative;\"><a href=\"#responding-to-events-1\" aria-label=\"responding to events 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Responding to Events</h2>\n<h3 id=\"adding-event-handlers\" style=\"position:relative;\"><a href=\"#adding-event-handlers\" aria-label=\"adding event handlers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding event handlers</h3>\n<p>리액트는 jsx 내부에 이벤트 핸들러를 추가할 수 있다.</p>\n<ul>\n<li>이벤트 핸들러 함수는 일반적으로 컴포넌트 안에 정의된다.</li>\n<li>이벤트 핸들러 함수는 일반적으로 <code class=\"language-text\">handleXXX</code>와 같은 이름을 가진다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked me!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Click me\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>주의! 이벤트 핸들러에 전달하는 것은 호출된 함수(리턴값)이 아닌 함수 자체이다.</p>\n</blockquote>\n<h3 id=\"passing-event-handlers-as-props\" style=\"position:relative;\"><a href=\"#passing-event-handlers-as-props\" aria-label=\"passing event handlers as props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Passing event handlers as props</h3>\n<p>부모 컴포넌트가 자식의 이벤트 핸들러를 지정해야할 때가 있다. 이때, 자식 컴포넌트에게 이벤트 핸들러를 전달하는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PlayButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> movieName <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handlePlayClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Playing </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>movieName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handlePlayClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Play \"{movieName}\"\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">UploadButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Uploading!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Upload Image\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PlayButton</span></span> <span class=\"token attr-name\">movieName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Kiki<span class=\"token punctuation\">'</span>s Delivery Service<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UploadButton</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>이 때 컴포넌트의 props 명은 <code class=\"language-text\">onXXX</code>로 하고 이벤트 핸들러의 이름은 <code class=\"language-text\">handleXXX</code>로 하는 것이 관례이다.</li>\n</ul>\n<h3 id=\"naming-event-handler-props\" style=\"position:relative;\"><a href=\"#naming-event-handler-props\" aria-label=\"naming event handler props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Naming event handler props</h3>\n<p>관례상 이벤트 핸들러 props은 on으로 시작하고 그 뒤에 대문자가 와야한다. 예를 들어, <code class=\"language-text\">onClick</code>, <code class=\"language-text\">onSmash</code>와 같은 이름을 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span>\n      <span class=\"token attr-name\">onPlayMovie</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Playing!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onUploadImage</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Uploading!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onPlayMovie<span class=\"token punctuation\">,</span> onUploadImage <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onPlayMovie<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Play Movie\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onUploadImage<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Upload Image\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">App</code> 컴포넌트는 <code class=\"language-text\">Toolbar</code>컴포넌트가 <code class=\"language-text\">onPlayMovie</code> 또는 <code class=\"language-text\">onUploadImage</code>로 어떤 작업을 수행할지 알 필요가 없다.\n즉, 해당 부분은 <code class=\"language-text\">Toolbar</code>가 맡은 일이다.</p>\n<blockquote>\n<p>이벤트 핸들러에 적절한 HTML 태그를 사용하도록 하자! ex) <code class=\"language-text\">&lt;div onClick={handleClick>&lt;/div></code>도 가능하지만 <code class=\"language-text\">&lt;button onClick={handleClick>&lt;/button></code>이 더 명확하다.</p>\n</blockquote>\n<h3 id=\"event-propagation\" style=\"position:relative;\"><a href=\"#event-propagation\" aria-label=\"event propagation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event propagation</h3>\n<p>이벤트 핸들러는 컴포넌트에 있을 수 있는 모든 하위 컴포넌트의 이벤트도 포착한다. 즉, 버블링이 일어나는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Toolbar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked on the toolbar!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Playing!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Play Movie\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Uploading!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Upload Image\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Toolbar를 클릭하면 <code class=\"language-text\">Playing!</code>이 먼저 출력되고, 그 다음에 Toolbar의 이벤트 핸들러가 실행된다.</li>\n</ul>\n<blockquote>\n<p>JSX 태그에서만 작동하는 <code class=\"language-text\">onScroll</code>을 제외한 모든 이벤트는 전파된다.</p>\n</blockquote>\n<h3 id=\"stopping-propagation\" style=\"position:relative;\"><a href=\"#stopping-propagation\" aria-label=\"stopping propagation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stopping propagation</h3>\n<p>이벤트 핸들러는 이벤트 객체를 유일한 인수로 받는다. 관례상 이벤트 객체는 <code class=\"language-text\">e</code> 또는 <code class=\"language-text\">event</code>라는 이름으로 사용한다.\n이 때, <code class=\"language-text\">e.stopPropagation()</code>을 호출하면 이벤트 전파를 막을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Toolbar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked on the toolbar!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Playing!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Play Movie\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Uploading!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Upload Image\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Capture phase events</p>\n</blockquote>\n<ul>\n<li>리액트의 이벤트를 버블링이 아닌 캡처링으로 처리하고 싶다면, <code class=\"language-text\">onXXXCapture</code>를 사용하면 된다.</li>\n</ul>\n<h3 id=\"preventing-default-behavior\" style=\"position:relative;\"><a href=\"#preventing-default-behavior\" aria-label=\"preventing default behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preventing default behavior</h3>\n<p>일부 브라우저 이벤트에는 연결된 기본 동작이 있다. ex) <code class=\"language-text\">&lt;form></code>의 <code class=\"language-text\">onSubmit</code>은 페이지를 새로고침한다.\n이 때, <code class=\"language-text\">e.preventDefault()</code>를 호출하면 기본 동작을 막을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Signup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Submitting!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Send</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>e.stopPropagation(): 이벤트의 전파를 막는다.<br/>\ne.preventDefault(): 몇 가지 이벤트에 대한 브라우저의 기본 동작을 막는다.</p>\n</blockquote>\n<h3 id=\"can-event-handlers-have-side-effects\" style=\"position:relative;\"><a href=\"#can-event-handlers-have-side-effects\" aria-label=\"can event handlers have side effects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Can event handlers have side effects?</h3>\n<p>이벤트 핸들러에서는 수많은 side effect가 발생할 수 있다.\n렌더링 함수(컴포넌트)와 달리 이벤트 핸들러는 순수할 필요가 없다! 하지만 이런 이벤트에 따라 일부 정보를 변경하려면 먼저\n정보를 저장할 방법이 필요하다. 이 때, <code class=\"language-text\">state</code>를 사용하면 된다.</p>\n<h2 id=\"state-a-components-memory-1\" style=\"position:relative;\"><a href=\"#state-a-components-memory-1\" aria-label=\"state a components memory 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State: A Component’s Memory</h2>\n<p>컴포넌트는 상호 작용의 결과로 화면의 내용을 변경한다. 이 때, 컴포넌트는 이전에 어떤 상호 작용이 있었는지 기억해야 한다.\n이런 종류의 컴포넌트 별 메모리를 <code class=\"language-text\">state</code>라고 부른다.</p>\n<h3 id=\"when-a-regular-variable-isnt-enough\" style=\"position:relative;\"><a href=\"#when-a-regular-variable-isnt-enough\" aria-label=\"when a regular variable isnt enough permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When a regular variable isn’t enough</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sculptureList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./data.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Gallery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    index <span class=\"token operator\">=</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> sculpture <span class=\"token operator\">=</span> sculptureList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Next\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>sculpture<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> \n        by </span><span class=\"token punctuation\">{</span>sculpture<span class=\"token punctuation\">.</span>artist<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n        (</span><span class=\"token punctuation\">{</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> of </span><span class=\"token punctuation\">{</span>sculptureList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> \n        <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>sculpture<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span> \n        <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>sculpture<span class=\"token punctuation\">.</span>alt<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>sculpture<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예제에서 버튼을 클릭해도 화면이 변하지 않는다.</p>\n<ul>\n<li>지역 변수는 렌더링 간에 유지되지 않는다. React가 이 컴포넌트를 두번째로 렌더링할 때 지역 변수에 대한 변경 사항을 고려하지 않는다.</li>\n<li>지역 변수를 변경해도 렌더링을 발동시키지 않는다. 단순 지역변수의 변경으로 React는 컴포넌트를 다시 렌더링할 것을 인지하지 못한다.</li>\n</ul>\n<p>이 때, 컴포넌트를 새 데이터로 업데이트하려면 2가지의 작업이 필요하다.</p>\n<ul>\n<li>렌더링 사이, 데이터를 유지해야한다.</li>\n<li>새로운 데이터로 컴포넌트를 다시 렌더링해야 한다.</li>\n</ul>\n<p>위의 2가지를 제공하는 것이 <code class=\"language-text\">useState</code> 훅이다.</p>\n<h3 id=\"meet-your-first-hook\" style=\"position:relative;\"><a href=\"#meet-your-first-hook\" aria-label=\"meet your first hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Meet your first Hook</h3>\n<p>React에서는 <code class=\"language-text\">use</code>로 시작하는 함수를 훅(hook)이라고 부른다.\n훅은 렌더링 중일 때만 사용할 수 있는 특별한 함수이다.</p>\n<blockquote>\n<p>훅은 컴포넌트의 최상위 레벨 혹은 커스텀 훅에서만 호출할 수 있다.<br/>\n훅은 함수이지만 컴포넌트의 필요에 대한 무조건적인 선언으로 생각하면 편하다.<br/>\n파일 상단에서 모듈을 <code class=\"language-text\">import</code>하는 것과 유사하게 컴포넌트 상단에서 React 기능을 사용한다.</p>\n</blockquote>\n<h3 id=\"anatomy-of-usestate\" style=\"position:relative;\"><a href=\"#anatomy-of-usestate\" aria-label=\"anatomy of usestate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Anatomy of useState</h3>\n<p><code class=\"language-text\">useState</code>를 호출한다는 건, React 컴포넌트가 무언가를 기억하도록 요청하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> setIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 경우, React가 <code class=\"language-text\">index</code>를 기억하기를 원하는 것이다.</p>\n<p>컴포넌트가 렌더링될 때마다 <code class=\"language-text\">useState</code>는 2개의 값을 포함하는 배열을 제공한다.</p>\n<ul>\n<li>저장한 값을 가진 state 변수</li>\n<li>state 변수를 업데이트 및 React가 컴포넌트를 다시 렌더링하도록 트리거할 수 있는 setter 함수</li>\n</ul>\n<p>useState의 동작 원리!</p>\n<p>위의 index state를 예제로 들도록 해보자</p>\n<ol>\n<li>컴포넌트가 처음 렌더링된다. index의 초기값으로 0을 useState에 전달되었으므로 <code class=\"language-text\">[0, setIndex]</code>가 반한된다. 이 때, React는 0을 최신 state로 기억한다.</li>\n<li>state를 업데이트한다. react는 이제 1을 최신 state로 기억한다.</li>\n<li>컴포넌트가 리렌더링된다. 물론 여전히 useState(0)인 코드가 있지만, index를 1로 설정한 것을 기억해서 [1, setIndex]를 반환한다.</li>\n</ol>\n<h3 id=\"giving-a-component-multiple-state-variables\" style=\"position:relative;\"><a href=\"#giving-a-component-multiple-state-variables\" aria-label=\"giving a component multiple state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Giving a component multiple state variables</h3>\n<p>하나의 컴포넌트에 여러개의 state 변수를 사용할 수 있다. 이 때, 서로 연관이 있는(두개의 state 변수를 자주 함께 변경하는) 경우 하나의 state 변수로 관리하는 것이 좋다.</p>\n<p>어떤 state를 반환할지 React는 어떻게 알 수 있을까?</p>\n<blockquote>\n<p><code class=\"language-text\">useState</code>호출이 어떤 state 변수를 참조하는지에 대한 정보를 받지 못한다. 이런 ‘식별자’가 없는데 어떤 state 변수를 반환할지 어떻게 알 수 있을까?\n훅은 <code class=\"language-text\">동일한 컴포넌트의 모든 렌더링에서 안정적이고 동일한 순서로 호출되어야 한다.</code> 즉, 훅은 항상 같은 순서로 호출되어야 하기 때문에 최상위 계층에서 호출되어야 하는 것이다.(eslint-plugin-react-hooks이 이를 잘 잡아준다.)</p>\n</blockquote>\n<blockquote>\n<p>React는 내부적으로 모든 컴포넌트에 대한 한 쌍의 state의 배열을 갖는다. 또한 렌더링 전에 <code class=\"language-text\">0</code>으로 설정된 현재 쌍 인덱스를 유지한다. <code class=\"language-text\">useState</code>를 호출할 때마다 React는 다음 state 쌍을 제공하면서 index를 1 증가시킨다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> componentHooks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currentHookIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// How useState works inside React (simplified).</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> pair <span class=\"token operator\">=</span> componentHooks<span class=\"token punctuation\">[</span>currentHookIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This is not the first render,</span>\n    <span class=\"token comment\">// so the state pair already exists.</span>\n    <span class=\"token comment\">// Return it and prepare for next Hook call.</span>\n    currentHookIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// This is the first time we're rendering,</span>\n  <span class=\"token comment\">// so create a state pair and store it.</span>\n  pair <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>initialState<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// When the user requests a state change,</span>\n    <span class=\"token comment\">// put the new value into the pair.</span>\n    pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">updateDOM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Store the pair for future renders</span>\n  <span class=\"token comment\">// and prepare for the next Hook call.</span>\n  componentHooks<span class=\"token punctuation\">[</span>currentHookIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">;</span>\n  currentHookIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>즉, <code class=\"language-text\">[[state1, setState1], [state2, setState2], ...]</code> 이런식으로 저장되어있는 것이다.</p>\n<h3 id=\"state-is-isolated-and-private\" style=\"position:relative;\"><a href=\"#state-is-isolated-and-private\" aria-label=\"state is isolated and private permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State is isolated and private</h3>\n<p>state는 컴포넌트에 의해 완전히 캡슐화된다. 즉, state는 컴포넌트 외부에서 접근할 수 없다.<br/>\n이 부분이 바로 <code class=\"language-text\">모듈 상단에 선언하는 일반 변수</code>와 <code class=\"language-text\">state</code>의 차이점이다. state는 특정 함수 호출에 묶이지 않고, 코드의 특정 위치에도 묶이지 않으면서 화면상의 특정 위치에 지역적이다.\n또한, state는 이를 선언한 컴포넌트 외에는 완전히 비공개되고, 부모 컴포넌트는 이를 변경할 수 없다.</p>\n<p>만약 state를 두개의 컴포넌트가 공유하고 동기화하려면 가장 가까운 부모 컴포넌트에 두어 props로 전달해야 한다.</p>\n<h2 id=\"render-and-commit-1\" style=\"position:relative;\"><a href=\"#render-and-commit-1\" aria-label=\"render and commit 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render and Commit</h2>\n<p>컴포넌트를 화면에 표시하기 전에 React에서 렌더링을 해야 한다. <br/>\n리액트가 고객들의 요청을 받고 주문을 가져오는 웨이터라고 생각해보자. 그리고 주방에서는 컴포넌트를 재료로 요리를 하고 있다. UI를 요청하고 서빙하는 과정은 아래 3단계로 이루어진다.</p>\n<ol>\n<li>Triggering a render: 컴포넌트가 렌더링을 시작하도록 트리거한다. => 손님의 주문을 주방으로 전달한다.</li>\n<li>Rendering the component: 컴포넌트가 렌더링을 수행한다. => 주방 주문을 받아 요리한다.</li>\n<li>Committing to the DOM: DOM에 커밋한다. => 손님에게 요리를 내놓는다.</li>\n</ol>\n<h3 id=\"step-1-trigger-a-render\" style=\"position:relative;\"><a href=\"#step-1-trigger-a-render\" aria-label=\"step 1 trigger a render permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Trigger a render</h3>\n<p>컴포넌트의 렌더링이 일어나는 데에는 2가지의 이유가 있다.</p>\n<ul>\n<li>컴포넌트가 처음으로 렌더링되는 경우</li>\n</ul>\n<blockquote>\n<p>앱을 시작하기 위해서는 첫 렌더링을 해야 한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> Image <span class=\"token keyword\">from</span> <span class=\"token string\">'./Image.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Image</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 첫 번째 렌더링</span></code></pre></div>\n<ul>\n<li>컴포넌트의 state나 props(부모 컴포넌트를 통해 전달된 state)가 변경되어 다시 렌더링되는 경우</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">setState</code>로 state를 변경하여 추가로 렌더링할 수 있다. 컴포넌트의 state를 업데이트하면 자동으로 렌더링이 대기열에 추가된다.\n(식당에서 손님이 첫 주문 이후에 추가 주문을 하는 것과 같다.)</p>\n</blockquote>\n<h3 id=\"step-2-react-renders-your-components\" style=\"position:relative;\"><a href=\"#step-2-react-renders-your-components\" aria-label=\"step 2 react renders your components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: React renders your components</h3>\n<p>렌더링을 trigger하면, 리액트는 함수 컴포넌트를 호출하여 화면에 표시할 내용을 파악한다. 즉, <code class=\"language-text\">렌더링</code>은 리액트에서 함수 컴포넌트를 호출하는 것이다.</p>\n<ul>\n<li>첫 렌더링에서는 루트 컴포넌트를 호출한다.</li>\n<li>이후 렌더링에서는 state의 업데이트에 의해 렌더링이 발동된 함수 컴포넌트를 호출한다.</li>\n</ul>\n<p>위의 과정 자체는 <code class=\"language-text\">재귀적</code>으로 동작한다. 업데이트된 컴포넌트가 다른 컴포넌트(자식 컴포넌트)를 번환하면 다음으로 해당 컴포넌트를 렌더링하고 또 그 컴포넌트가 다른\n컴포넌트를 반환하면 해당 컴포넌트를 렌더링한다. 중첩된 컴포넌트가 더이상 존재하지 않고 화면에 표시되어야 하는 내용을 정확히 알 때까지 계속된다.</p>\n<blockquote>\n<p>렌더링은 항상 순수 계산이어야 한다.<br/></p>\n<ol>\n<li>동일한 입력에 대해서 동일한 출력이 반환되어야 한다.<br/></li>\n<li>함수 외부의 어떤 것도 변경해서는 안된다.<br/></li>\n</ol>\n</blockquote>\n<blockquote>\n<p>Optimizing performance<br/>\n업데이트된 컴포넌트 내에 있는 모든 컴포넌트를 렌더링하는 행위는 비효율적이다.(특히 업데이트된 컴포넌트가 상위에 있을수록!)<br/>\n성급하게 최적화하지 않도록 해라!</p>\n</blockquote>\n<h3 id=\"step-3-react-commits-changes-to-the-dom\" style=\"position:relative;\"><a href=\"#step-3-react-commits-changes-to-the-dom\" aria-label=\"step 3 react commits changes to the dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: React commits changes to the DOM</h3>\n<p>리액트는 컴포넌트를 렌더링(호출)한 후, DOM을 수정한다.</p>\n<ol>\n<li>첫 렌더링의 경우, 리액트는 <code class=\"language-text\">appendChild()</code> DOM api를 사용하여 생성한 모든 DOM 노드를 화면에 표시한다.</li>\n<li>이후 렌더링(리렌더링)의 경우, 리액트는 필요한 최소한의 작업(렌더링 중 계산된 작업)을 적용하여 DOM이 최신 렌더링 출력과 일치시킨다.</li>\n</ol>\n<p>리액트는 렌더링 사이에 차이가 있는 경우에만 DOM 노드를 변경한다. 아래와 같이 매초마다 time이 변경될 때(리렌더링이 발생), input의 내부에 있는 value state는\n그 값이 사라지지 않고 유지된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> time <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"epilogue-browser-paint\" style=\"position:relative;\"><a href=\"#epilogue-browser-paint\" aria-label=\"epilogue browser paint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Epilogue: Browser paint</h3>\n<p>렌더링이 완료되고 리액트가 DOM을 업데이트한 후, 브라우저는 화면을 다시 그린다. 이 부분을 <code class=\"language-text\">브라우저 렌더링</code>이라고 하지만, 현재 공식문서에서는 혼동을 피하고자 <code class=\"language-text\">페인팅</code>이라고 부른다.</p>\n<h2 id=\"state-as-a-snapshot-1\" style=\"position:relative;\"><a href=\"#state-as-a-snapshot-1\" aria-label=\"state as a snapshot 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State as a Snapshot</h2>\n<p>state는 스냅샷처럼 동작한다. state 변수를 설정해도 이미 가지고 있는 state 변수는 변경되지 않고, 그 대신 리렌더링이 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isSent<span class=\"token punctuation\">,</span> setIsSent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isSent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Your message is on its way!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setIsSent</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span>\n        <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Message<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Send</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>onSubmit 이벤트 핸들러가 실행된다.</li>\n<li>setIsSent(true)가 isSent를 true로 설정하고 새 렌더링을 큐에 대기시킨다..</li>\n<li>리액트는 isSent 값에 따라서 컴포넌트를 다시 렌더링한다.</li>\n</ul>\n<h3 id=\"rendering-takes-a-snapshot-in-time\" style=\"position:relative;\"><a href=\"#rendering-takes-a-snapshot-in-time\" aria-label=\"rendering takes a snapshot in time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rendering takes a snapshot in time</h3>\n<p><code class=\"language-text\">렌더링</code>이란 리액트가 컴포넌트, 즉 함수를 호출한다는 의미이다. 해당 함수에서 반환하는 JSX는 그 순간의 UI 스냅샷과 같다.</p>\n<p>React가 컴포넌트를 리렌더링할 때,</p>\n<ul>\n<li>리액트가 함수를 다시 호출한다.</li>\n<li>함수가 새로운 JSX 스냅샷을 반환한다.</li>\n<li>이후, 리액트는 이전 스냅샷과 새 스냅샷을 비교하고 일치하도록 화면을 업데이트한다.</li>\n</ul>\n<p>컴포넌트의 메모리로서 state는 함수가 반환된 후 사라지는 일반 변수와는 다르다. state는 함수 외부에 존재하는 변수처럼 React 자체에 존재한다.</p>\n<img src=\"https://react-ko.dev/images/docs/illustrations/i_state-snapshot2.png\" width=\"200\" alt=\"리액트가 state를 메모\">\n<p>아래의 코드를 보면 버튼을 1번 클릭할 때마다, number는 3씩 증가할 것 같다. 하지만 number는 1씩 증가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">setState</code>를 실행하면 <code class=\"language-text\">이전 렌더링</code>에 대해서만 state가 변경된다. 즉, 아무리 setNumber를 호출했어도 이전 렌더링에서 number는 0이기 때문에 1만 증가하는 것이다.\n그렇기 때문에 중간에 console.log를 찍어보면 0이 찍히는 것을 확인할 수 있다.</p>\n<h3 id=\"state-over-time\" style=\"position:relative;\"><a href=\"#state-over-time\" aria-label=\"state over time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State over time</h3>\n<p>아래 코드를 실행해보면 3초 뒤 alert 값으로도 0이 찍히는 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+5</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>왜 그럴까? 이는 사용자가 버튼을 클릭하는 시점에서 number는 0이기 때문이다. setTimeout은 3초 뒤에 실행되기 때문에, 3초 뒤에 실행되는 alert에서도 number가 0이다.(3초 뒤에 number가 0인 스냅샷이 사용하기 때문이다.)<br/>\n리액트는 하나의 렌더링 이벤트 핸들러 내에서 state값을 <code class=\"language-text\">고정</code>으로 유지한다. 즉, 코드가 실행되는 동안 state가 변경되었는지 걱정할 필요가 없다.</p>\n<h2 id=\"queueing-a-series-of-state-updates-1\" style=\"position:relative;\"><a href=\"#queueing-a-series-of-state-updates-1\" aria-label=\"queueing a series of state updates 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Queueing a Series of State Updates</h2>\n<p>state 변수를 설정하면 다음 렌더링이 큐에 들어간다. 그러나 경우에 따라서 다음 렌더링을 큐에 전달하기 전에, state에 대해 여러 작업을 수행하고 싶을 수 있다.</p>\n<h3 id=\"react-batches-state-updates\" style=\"position:relative;\"><a href=\"#react-batches-state-updates\" aria-label=\"react batches state updates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React batches state updates</h3>\n<p>리액트는 state 업데이트를 하기 전에 이벤트 핸들러의 모든 코드가 실행될 때까지 기다린다. 때문에 리렌더링은 모든 <code class=\"language-text\">setState</code> 호출이 완료된 이후에만 일어난다.\n이는 음식점에서 주문을 받는 웨이터와 같다. 우리가 a,b,c라는 음식을 주문한다면 웨이터는 우리가 a를 말하자마자 주문을 전달하지 않는다. 대신에 우리가 주문을 완료할 때까지 기다린다. 그리고 우리가 주문을 완료하면 웨이터는 주문을 전달한다.\n심지어 다른 테이블의 주문까지 한번에 받아서 전달한다.</p>\n<p>이렇게 하면 여러 컴포넌트에서 나온 여러 state 변수를 업데이트함에 따라 리렌더링을 trigger하지 않을 수 있다. 이 말은 이벤트 핸들러와 그 내부에 있는 코드가 완료될 때까지\nUI가 업데이트되지 않는다는 것이다.</p>\n<p>반면 리액트는 클릭과 같은 여러 의도적인 이벤트에 대해 일괄 처리 하지 않는다. 각 이벤트는 개별적으로 처리 된다.</p>\n<h3 id=\"updating-the-same-state-multiple-times-before-the-next-render\" style=\"position:relative;\"><a href=\"#updating-the-same-state-multiple-times-before-the-next-render\" aria-label=\"updating the same state multiple times before the next render permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating the same state multiple times before the next render</h3>\n<p>다음 렌더링 전에 동일한 state 변수를 여러번 업데이트 하고 싶을 때, <code class=\"language-text\">setState((prev) => prev + 1)</code>와 같이 함수를 인자로 넘겨주면 된다.\n이는 이전 렌더링에서의 state를 참조하는 것이 아닌 state 큐의 이전 state를 참조하기 때문에 가능하다.</p>\n<blockquote>\n<p>참고: setState(5) 또한 setState(prev => 5)처럼 동작한다.</p>\n</blockquote>\n<h3 id=\"naming-conventions\" style=\"position:relative;\"><a href=\"#naming-conventions\" aria-label=\"naming conventions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Naming conventions</h3>\n<p>업데이터 함수 인수(콜백 함수)의 이름은 해당 state 변수의 첫 글자로 지정하는 것이 일반적이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setLastName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ln</span> <span class=\"token operator\">=></span> ln<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setFriendCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fc</span> <span class=\"token operator\">=></span> fc <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-react\">📎 React</a></p>\n</li>\n<li>\n<p><a href=\"#responding-to-events\">Responding to events</a></p>\n</li>\n<li>\n<p><a href=\"#state-a-components-memory\">State: a component’s memory</a></p>\n</li>\n<li>\n<p><a href=\"#render-and-commit\">Render and commit</a></p>\n</li>\n<li>\n<p><a href=\"#state-as-a-snapshot\">State as a snapshot</a></p>\n</li>\n<li>\n<p><a href=\"#queueing-a-series-of-state-updates\">Queueing a series of state updates</a></p>\n</li>\n<li>\n<p><a href=\"#updating-objects-in-state\">Updating objects in state</a></p>\n</li>\n<li>\n<p><a href=\"#updating-arrays-in-state\">Updating arrays in state</a></p>\n</li>\n<li>\n<p><a href=\"#responding-to-events-1\">Responding to Events</a></p>\n<ul>\n<li><a href=\"#adding-event-handlers\">Adding event handlers</a></li>\n<li><a href=\"#passing-event-handlers-as-props\">Passing event handlers as props</a></li>\n<li><a href=\"#naming-event-handler-props\">Naming event handler props</a></li>\n<li><a href=\"#event-propagation\">Event propagation</a></li>\n<li><a href=\"#stopping-propagation\">Stopping propagation</a></li>\n<li><a href=\"#preventing-default-behavior\">Preventing default behavior</a></li>\n<li><a href=\"#can-event-handlers-have-side-effects\">Can event handlers have side effects?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#state-a-components-memory-1\">State: A Component’s Memory</a></p>\n<ul>\n<li><a href=\"#when-a-regular-variable-isnt-enough\">When a regular variable isn’t enough</a></li>\n<li><a href=\"#meet-your-first-hook\">Meet your first Hook</a></li>\n<li><a href=\"#anatomy-of-usestate\">Anatomy of useState</a></li>\n<li><a href=\"#giving-a-component-multiple-state-variables\">Giving a component multiple state variables</a></li>\n<li><a href=\"#state-is-isolated-and-private\">State is isolated and private</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#render-and-commit-1\">Render and Commit</a></p>\n<ul>\n<li><a href=\"#step-1-trigger-a-render\">Step 1: Trigger a render</a></li>\n<li><a href=\"#step-2-react-renders-your-components\">Step 2: React renders your components</a></li>\n<li><a href=\"#step-3-react-commits-changes-to-the-dom\">Step 3: React commits changes to the DOM</a></li>\n<li><a href=\"#epilogue-browser-paint\">Epilogue: Browser paint</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#state-as-a-snapshot-1\">State as a Snapshot</a></p>\n<ul>\n<li><a href=\"#rendering-takes-a-snapshot-in-time\">Rendering takes a snapshot in time</a></li>\n<li><a href=\"#state-over-time\">State over time</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#queueing-a-series-of-state-updates-1\">Queueing a Series of State Updates</a></p>\n<ul>\n<li><a href=\"#react-batches-state-updates\">React batches state updates</a></li>\n<li><a href=\"#updating-the-same-state-multiple-times-before-the-next-render\">Updating the same state multiple times before the next render</a></li>\n<li><a href=\"#naming-conventions\">Naming conventions</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 03, 2023","title":"react - Learn React(Adding Interactivity)","categories":"스터디 공식문서","author":"제이든","emoji":"📜"},"fields":{"slug":"/from-time-to-time/study/react-official/learn-react-adding-interactivity/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/steadily/growth-diary/2023/5/30-gl/","nextSlug":"/from-time-to-time/study/react-official/learn-react-describing-ui/","prevSlug":"/from-time-to-time/study/react-official/learn-react-adding-interactivity/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}