{"componentChunkName":"component---src-templates-blog-template-js","path":"/steadily/growth-diary/2023/8/5-gl/","result":{"data":{"cur":{"id":"abe27759-adea-5c36-b721-aa43f5541800","html":"<h2 id=\"-성장일지-60\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-60\" aria-label=\" 성장일지 60 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚤 성장일지 6.0</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌾 (4.0)학습 키워드에서 최대한 간단한 정보 제공, 고민에서 내 경험을 자세히 적자!<br/>\n🥊 (5.0)학습 키워드는 한줄의 핵심으로만 정리, 성공/실패 일지 작성하기! 이 때, 실패의 경험은 자세히 적기!<br/>\n🍉 (6.0)&#x3C;완전 개편!!!> 매일 습관적으로 핵심만 적을 수 있게 프레임 변경. 성공보단 실패에 초점을 맞추기.<br/></p>\n<ul>\n<li>🍉 (6.1)&#x3C;수정> 매번 성공, 실패를 따로 적는 것보단 경험으로 표현하자!</li>\n<li>🍉 (6.2)&#x3C;수정> 일지 카테고리 수정 변경!(경험 -> 고민 -> 회고 -> 교훈)</li>\n</ul>\n</blockquote>\n<h2 id=\"️-오늘의-경험\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B2%BD%ED%97%98\" aria-label=\"️ 오늘의 경험 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>☀️ 오늘의 경험</h2>\n<h3 id=\"요구-사항을-잘-보고-오버코딩하지-말자\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD%EC%9D%84-%EC%9E%98-%EB%B3%B4%EA%B3%A0-%EC%98%A4%EB%B2%84%EC%BD%94%EB%94%A9%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90\" aria-label=\"요구 사항을 잘 보고 오버코딩하지 말자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요구 사항을 잘 보고 오버코딩하지 말자</h3>\n<p>오늘도 알고리즘 문제를 풀었다. 문제 자체는 number[]와 number가 주어지고 number[]에서 주어진 number와 같은 숫자들을 제외하는 문제였다. 사실 평소에 익숙한 고차함수(filter)를 사용해서 불변성을 유지하는 방향으로 하면 어렵지 않게 풀 수 있다.\n다만 문제는 기존에 주어진 변수 number[] 자체의 값을 변화시켜서 filtering하라는 문제였다. 아래는 내가 푼 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">removeElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        index <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">===</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        index <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">===</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>조금 지저분하긴 하지만 findIndex와 splice를 통해 number[]의 메모리를 유지하면서 filtering할 수 있다.</p>\n<p>아래는 다 풀고나서 본 다른 분의 solution이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">removeElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>val<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드를 쭉 따라서 보면 nums가 내 코드와는 다르게 [2, 2]와 같은 식으로 깔끔하게 떨어지지 않는다. 그래서 처음엔 잘못된 코드인 줄 알았는데, 문제의 요구조건을 보니 number[]의 0번째 index부터 filtering된 값들이 채워지기만 하면 된다고 적혀있었다.</p>\n<p>즉, 나는 결과를 [2, 2]같은 형태를 생각했는데 실제로는 [2, 2, _, _]이 되어도 괜찮은 것이다. 그래서 내가 푼 코드는 문제의 요구조건을 잘못 이해해서 오버코딩을 한 것이다. 앞으론 좀더 문제를 꼼꼼히 보고 요구사항에 맞춰서 최대한의 효율로 풀어야겠다.</p>\n<h2 id=\"-오늘의-고민\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B3%A0%EB%AF%BC\" aria-label=\" 오늘의 고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🫧 오늘의 고민</h2>\n<h3 id=\"리액트-handle-함수-네이밍\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-handle-%ED%95%A8%EC%88%98-%EB%84%A4%EC%9D%B4%EB%B0%8D\" aria-label=\"리액트 handle 함수 네이밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 handle 함수 네이밍</h3>\n<p>그동안 리액트 컴포넌트 하나에서 handle 함수가 늘어날수록 너무 가독성이 안좋다고 느꼈다. 이번에 인턴십 과제를 구현하면서 컴포넌트 하나에 비스무리한 이름으로 여러개의 handle 함수 작성하게 되어서\n내 나름대로의 규칙을 가질 필요가 있다고 느꼈다. 예시를 통해서 간단하게 정리해둔다.(편의상 반환되는 JSX 코드는 생략했다.)</p>\n<p>먼저 아래와 같은 코드는 문제가 없어보인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 컴포넌트 내에서 동일한 input 태그이면서 조금은 다르게 동작하는 경우가 생길 수 있다.</p>\n<p>아래와 같이 작성하면 정말 최악이다. 일단 당장의 handle 함수들이 어떤 로직을 수행하는지 전혀 감이 오질 않는다. 그나마 위의 코드처럼 컴포넌트 내에 input 태그가 하나만 존재한다면\n어느정도 금방 감이 올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value2<span class=\"token punctuation\">,</span> setValue2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleInput2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setValue2</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그래서 앞으로는 아래와 같이 작성하려 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleEmailInputChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handlePasswordInputChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>handle 함수이므로 <code class=\"language-text\">handle</code>을 맨앞에 붙이고(이 부분은 리액트 공식문서에도 컨벤션으로 나온다.) 끝에는 이 함수가 어떤 이벤트에서 쓰이는지 알기위해 <code class=\"language-text\">이벤트 타입</code>을 붙여준다.\n그리고 그 가운데에는 이 함수가 사용되는 <code class=\"language-text\">태그의 이름</code>을 붙여준다. 이렇게까지만 작성해도 가독성이 충분하다면 멈춘다. 그렇지만 이와 같이 작성해서 그 내용이 겹치게 될 때에는\n<code class=\"language-text\">handle</code> 뒤에 이 함수가 어떤 비즈니스 로직과 관련이 있는지 짧은 단어로 적어준다.</p>\n<p>사실 이 방법이 좋은지는 모르겠지만, 적어도 내가 작성한 코드들을 봤을 때 JSX를 보지 않고도 빠르게 컴포넌트가 돌아가는 로직이 파악이 되어서 좋았다. 조금 길어지더라도 이런 컨벤션을\n유지해서 코드를 작성해보려 한다.</p>\n<h2 id=\"-오늘의-회고\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%9A%8C%EA%B3%A0\" aria-label=\" 오늘의 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌈 오늘의 회고</h2>\n<p>오늘은 거의 하루종일 과제 구현에 초점을 맞춘 것 같다. 기능 구현은 사실상 거의 다 해서 아주 만족스럽다. 요즘 정말 바쁘게\n열심히 살고 있는데, 딱 하나 잠만 잘 자도록 하면 좋을 것 같다..! 에어컨비도 아까워서 안켰는데… 이제는 좀 켜고 자야지.</p>\n<h2 id=\"-오늘의-교훈\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B5%90%ED%9B%88\" aria-label=\" 오늘의 교훈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐾 오늘의 교훈</h2>\n<p>밤에 잘 때, 에어컨 켜고 자자..!ㅋㅋㅋ</p>\n<h2 id=\"-참고\" style=\"position:relative;\"><a href=\"#-%EC%B0%B8%EA%B3%A0\" aria-label=\" 참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪵 참고</h2>\n<ul>\n<li>없음</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-60\">🚤 성장일지 6.0</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B2%BD%ED%97%98\">☀️ 오늘의 경험</a></p>\n<ul>\n<li><a href=\"#%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD%EC%9D%84-%EC%9E%98-%EB%B3%B4%EA%B3%A0-%EC%98%A4%EB%B2%84%EC%BD%94%EB%94%A9%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90\">요구 사항을 잘 보고 오버코딩하지 말자</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B3%A0%EB%AF%BC\">🫧 오늘의 고민</a></p>\n<ul>\n<li><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-handle-%ED%95%A8%EC%88%98-%EB%84%A4%EC%9D%B4%EB%B0%8D\">리액트 handle 함수 네이밍</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%9A%8C%EA%B3%A0\">🌈 오늘의 회고</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B5%90%ED%9B%88\">🐾 오늘의 교훈</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%B0%B8%EA%B3%A0\">🪵 참고</a></p>\n</li>\n</ul>\n</div>","excerpt":"🚤 성장일지 6.0 책 의 내용에 자극받아 시작하는 소박한  살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?\n성장하고 있는 것이 살아 있는 것이다.\n생명의 유일한 증거는 성장이다! 🌾 (4.0)학습 키워드에서 최대한 간단한 정보 제공, 고민에서 내 경험을 자세히 적자!\n🥊 (5.0)학습 키워드는 한줄의 핵심으로만 정리, 성공/실패 일지 작성하기! 이 때, 실패의 경험은 자세히 적기!\n🍉 (6.0)<완전 개편!!!> 매일 습관적으로 핵심만 적을 수 있게 프레임 변경. 성공보단 실패에 초점을 맞추기. 🍉 (6.1)<수정> 매번 성공, 실패를 따로 적는 것보단 경험으로 표현하자! 🍉 (6.2)<수정> 일지 카테고리 수정 변경!(경험 -> 고민 -> 회고 -> 교훈) ☀️ 오늘의 경험 요구 사항을 잘 보고 오버코딩하지 말자 오늘도 알고리즘 문제를 풀었다. 문제 자체는 number[]와 number가 주어지고 number[]에서 주어진 number와 같은 숫자들을 제외하는 문제였다. 사실 평소에…","frontmatter":{"date":"August 05, 2023","title":"230805(토)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/8/5-gl/"}},"next":{"id":"21c860c7-50f3-5ae6-ba20-984ccef474c1","html":"<h1 id=\"-쏙쏙-들어오는-함수형-코딩---심플한-코드로-복잡한-소프트웨어-길들이기\" style=\"position:relative;\"><a href=\"#-%EC%8F%99%EC%8F%99-%EB%93%A4%EC%96%B4%EC%98%A4%EB%8A%94-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%94%A9---%EC%8B%AC%ED%94%8C%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B8%B8%EB%93%A4%EC%9D%B4%EA%B8%B0\" aria-label=\" 쏙쏙 들어오는 함수형 코딩   심플한 코드로 복잡한 소프트웨어 길들이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖍 쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</h1>\n<p>이 글은 <a href=\"https://product.kyobobook.co.kr/detail/S000001952246\">쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</a>를 읽고 작성한 글입니다.\n함수형도 함수형이지만, 이 책을 통해 좀더 깔끔하고 직관적인 코드를 작성할 수 있을 것이란 팀원들의 의견을 토대로 이번 스터디 서적으로 선정하였습니다.</p>\n<h2 id=\"chap-7-신뢰할-수-없는-코드를-쓰면서-불변성-지키기\" style=\"position:relative;\"><a href=\"#chap-7-%EC%8B%A0%EB%A2%B0%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%93%B0%EB%A9%B4%EC%84%9C-%EB%B6%88%EB%B3%80%EC%84%B1-%EC%A7%80%ED%82%A4%EA%B8%B0\" aria-label=\"chap 7 신뢰할 수 없는 코드를 쓰면서 불변성 지키기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chap 7. 신뢰할 수 없는 코드를 쓰면서 불변성 지키기</h2>\n<ul>\n<li>레거시 코드 혹은 신뢰할 수 없는 코드로부터 코드를 보호하기 위한 방어적 복사</li>\n<li>얕은 복사와 깊은 복사의 차이</li>\n<li><code class=\"language-text\">카피-온-라이트</code>와 <code class=\"language-text\">방어적 복사</code> 구분</li>\n</ul>\n<h3 id=\"우리가-신뢰할-수-없는-코드와-소통할-때-방어적-복사를-사용한다\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%A6%AC%EA%B0%80-%EC%8B%A0%EB%A2%B0%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EC%BD%94%EB%93%9C%EC%99%80-%EC%86%8C%ED%86%B5%ED%95%A0-%EB%95%8C-%EB%B0%A9%EC%96%B4%EC%A0%81-%EB%B3%B5%EC%82%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\"우리가 신뢰할 수 없는 코드와 소통할 때 방어적 복사를 사용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우리가 신뢰할 수 없는 코드와 소통할 때, 방어적 복사를 사용한다.</h3>\n<p>앞에서 배운 <code class=\"language-text\">카피-온-라이트</code>는 안전한 코드 내에서 불변성을 지키면서 코드를 작성하는 방법이다.</p>\n<p>직접 내부 코드를 <code class=\"language-text\">카피-온-라이트</code>로 변경하여 불변성을 지키는 방법도 있겠지만, 그렇지 못한 상황들이 있다. 예를 들면우리가 직접 코드를 수정할 수 없는 라이브러리 혹은 레거시 코드를 사용하여 데이터를 변경해야할 때이다. 그렇다면 우리가 불변성을 지킨 안전한 코드에서 불안전한 코드로 데이터를 오고 갈 때, 어떻게 불변성을 지킬 수 있을까?</p>\n<p>그 해답이 방어적 복사에 있다. 간단하게 말하면 객체에 대한 <code class=\"language-text\">깊은 복사</code>를 통해 불안전한 코드로 전달할 때도 복사를 해서 전달하고, 불안전한 코드로부터 데이터를 받을 때도 복사를 해서 받는 것이다. 아래는 아주 간단한 예제이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 여기서 push() 함수는 기존의 array를 변경하는 함수다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기존 nums 배열에 6이 추가된다. => 불변성이 깨진다.</span>\n\n<span class=\"token comment\">// 방어적 복사를 통해 불변성을 지키는 방법</span>\n<span class=\"token keyword\">const</span> numsCopy <span class=\"token operator\">=</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>numsCopy<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 불변성을 지키기 위해 deepCopy를 사용한다.</span>\n<span class=\"token keyword\">const</span> newNums <span class=\"token operator\">=</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>numsCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 불변성을 지키기 위해 deepCopy를 사용한다.</span>\n\n<span class=\"token comment\">// 방어적 복사를 통한 방법을 함수로 만들기</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">pushSafe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  copy<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"깊은-복사-구현해보기\" style=\"position:relative;\"><a href=\"#%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"깊은 복사 구현해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깊은 복사 구현해보기</h3>\n<p>타입까지 고려하면 완벽하지 않지만 재귀를 통해 깊은 복사를 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getDeepCopy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getDeepCopy</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> target <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      copy<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getDeepCopy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> copy<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"code-classlanguage-text카피-온-라이트code와-code-classlanguage-text방어적-복사code-비교해보기\" style=\"position:relative;\"><a href=\"#code-classlanguage-text%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8code%EC%99%80-code-classlanguage-text%EB%B0%A9%EC%96%B4%EC%A0%81-%EB%B3%B5%EC%82%ACcode-%EB%B9%84%EA%B5%90%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"code classlanguage text카피 온 라이트code와 code classlanguage text방어적 복사code 비교해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">카피-온-라이트</code>와 <code class=\"language-text\">방어적 복사</code> 비교해보기</h3>\n<h4 id=\"카피-온-라이트\" style=\"position:relative;\"><a href=\"#%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8\" aria-label=\"카피 온 라이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>카피-온-라이트</h4>\n<ul>\n<li>주로 통제할 수 있는 데이터를 바꿀 때 사용</li>\n<li>안전한 코드에서 불변성을 지키면서 코드를 작성할 수 있다.\n<ul>\n<li>사실 카피-온-라이트를 통해 안전한 코드가 만들어 진다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">얕은 복사</code>를 사용하므로 비교적 비용이 적게 든다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 바꿀 데이터의 얕은 복사본을 만든다.\n2. 복사본을 변경한다.\n3. 복사본을 반환한다.</code></pre></div>\n<h4 id=\"방어적-복사\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%EC%96%B4%EC%A0%81-%EB%B3%B5%EC%82%AC\" aria-label=\"방어적 복사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방어적 복사</h4>\n<ul>\n<li>주로 신뢰할 수 없는 코드와 데이터를 주고받을 때 사용</li>\n<li>안전한 코드와 불안전한 코드의 경계에서 사용한다.</li>\n<li><code class=\"language-text\">깊은 복사</code>를 사용하므로 비교적 비용이 많이 든다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 안전지대에서 나가는 데이터에 깊은 복사를 해서 내보낸다.\n2. 안전지대로 들어오는 데이터에 깊은 복사를 해서 들여온다.</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#chap-7-%EC%8B%A0%EB%A2%B0%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%93%B0%EB%A9%B4%EC%84%9C-%EB%B6%88%EB%B3%80%EC%84%B1-%EC%A7%80%ED%82%A4%EA%B8%B0\">Chap 7. 신뢰할 수 없는 코드를 쓰면서 불변성 지키기</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%9A%B0%EB%A6%AC%EA%B0%80-%EC%8B%A0%EB%A2%B0%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EC%BD%94%EB%93%9C%EC%99%80-%EC%86%8C%ED%86%B5%ED%95%A0-%EB%95%8C-%EB%B0%A9%EC%96%B4%EC%A0%81-%EB%B3%B5%EC%82%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\">우리가 신뢰할 수 없는 코드와 소통할 때, 방어적 복사를 사용한다.</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\">깊은 복사 구현해보기</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8%EC%99%80-%EB%B0%A9%EC%96%B4%EC%A0%81-%EB%B3%B5%EC%82%AC-%EB%B9%84%EA%B5%90%ED%95%B4%EB%B3%B4%EA%B8%B0\"><code class=\"language-text\">카피-온-라이트</code>와 <code class=\"language-text\">방어적 복사</code> 비교해보기</a></p>\n<ul>\n<li><a href=\"#%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8\">카피-온-라이트</a></li>\n<li><a href=\"#%EB%B0%A9%EC%96%B4%EC%A0%81-%EB%B3%B5%EC%82%AC\">방어적 복사</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 03, 2023","title":"쏙쏙 들어오는 함수형 코딩 Chapter 7","categories":"스터디 책","author":"제이든","emoji":"🖍️"},"fields":{"slug":"/from-time-to-time/study/ssok-ssok-functional/ch-7/"}},"prev":{"id":"4b2d1d02-bf77-5738-894b-7d4286849aba","html":"<h1 id=\"-월간회고-v10\" style=\"position:relative;\"><a href=\"#-%EC%9B%94%EA%B0%84%ED%9A%8C%EA%B3%A0-v10\" aria-label=\" 월간회고 v10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚪 월간회고 v1.0</h1>\n<ul>\n<li>너무나 빠르게 가는 시간을 조금이라도 뒤돌아보고자 작성하는 한달 단위의 회고</li>\n<li>다른 카테고리들보다 아직 정해진 게 없다. 천천히 정리해나아가는 걸로! 최대한 러프하게 생각나는 핵심들을 적어보도록 하자!</li>\n</ul>\n<h2 id=\"한여름의-더위\" style=\"position:relative;\"><a href=\"#%ED%95%9C%EC%97%AC%EB%A6%84%EC%9D%98-%EB%8D%94%EC%9C%84\" aria-label=\"한여름의 더위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한여름의 더위</h2>\n<p>7월이 끝난지 일주일이나 지나서 지난 회고를 적는다. 장마가 껴있어서 그런지 7월은 조금은 시원(?)했던 기억이 없잖아 있다면(정확히는 비에 대한 기억이 더 강하다면), 8월은 정말 이제 일주일짼데\n쨍쨍한 더위만이 생각나다. 덥다 덥다 하면 더 더울 것 같아서 말하고 싶지 않은데, 어떤 날은 정말 너무 심하게 덥다. 푹 익는다 못해 녹는 기분이다. 🫠 그럼에도 여름만이 주는 묘한 시원함, 청량감이\n있어서 매일매일 기분이 좋다.</p>\n<h2 id=\"수료후-한달\" style=\"position:relative;\"><a href=\"#%EC%88%98%EB%A3%8C%ED%9B%84-%ED%95%9C%EB%8B%AC\" aria-label=\"수료후 한달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수료후 한달</h2>\n<p>진짜 이 말도 별로 안쓰고 싶은데, 어찌 시간이 이렇게 빠르게 흘러가는지… 코드스쿼드 과정을 수료했다고 6월 회고를 적은 게 얼마전 같은데 벌써 1개월이 지나있다. <code class=\"language-text\">과연 나는 내가 결심한대로 열심히 잘 살았나?</code> 돌이켜보면 정말 열심히 살았다. 매일 정말 최선을 다했다고 말할 수는 없지만, 거의 대부분의 날들이 내가 할 수 있는 선에서 열심히 살았던 것 같다. 가끔은 이렇게 열심히만 하는 게 비효율적인 건 아닐지 마음 한켠이 웅크러들 때가 있다. 내가 생각하는 나의 최고 장점이라고 여기는 <code class=\"language-text\">꾸준함</code>이라는 덕목이 빛을 발하지는 못할까 두렵기도 하다. 그치만 알고 있다. 인생을 짧게 보면 운이\n따라줘서, 정말 우연히 잘 살아가게 되는 사람도 있겠지만 결국 열심히 본인의 길을 나아가는 사람이 끝에는 원하는 목표에 다를 수 있다는 것..! 그러니 지금 내가 하고 있는 개발 공부와 꾸준히 살아가는 이\n습관, 행위가 나와 내 주위 사람을 불행하게 하지 않는한, 지금 하고 있는대로 잘 나아가면 된다.</p>\n<h2 id=\"함수형-프로그래밍\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"함수형 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍</h2>\n<p>개발 공부를 하고 나에게 처음 즐거운 충격을 줬던 개념이자 패러다임은 <code class=\"language-text\">객체지향</code>이었다. 사실 그 전에는 코드를 작성해도 현실과는 동떨어진 느낌(?)이라고 생각이 들었다. <code class=\"language-text\">그래서 이걸로 현실에서 뭘 만들 수 있는데?</code>같은 다소 시니컬한 느낌..? 그러다 객체지향을 알게 되고, 정말 우스갯소리로 간단한 현실의 모든 것을 코드로 구현 가능할 것 같은 느낌이었다. 살아있는 생물마저도 상태와 행동으로 표현이 가능하고 그 사이에서 메시지를 통해 맞물려 돌아갈 수 있게 하니 말이다.(마인크래프트를 안해봤지만, 마인크래프트같은 게임에서 내가 이것저것 만들 수 있는 기분이 이런걸까 싶기도 하다.)<br/>\n서두가 너무 길었는데, 그동안 붕떠있는 느낌으로만 알고 있던 <code class=\"language-text\">함수형 프로그래밍</code>에 대해서 스터디를 시작했다. 솔직히 객체지향만큼 나에게 충격적인(?) 패러다임은 아닌 것 같다.(아직 많이 모르지만)\n처음엔 내가 좋아하는 객체지향과 대척점에 있는 패러다임같아서 아쉽기도 하고 더 흥미를 갖지 못했다. 그런데 함수형을 쓰다보니 어떤 면에서는 객체지향과 굉장히 닮아있다는 생각이 들었다. 물론 이제 근본적으로는 좀 다르지만, 함수형에서도 클로저를 이용해서 어떤 상태나 메서드를 기억해서 사용하는 방법이 결국엔 비슷한 느낌..? 다만 객체지향에서는 상속과 같은 방식으로 상태와 메서드를 재사용하는 반면, 함수형에서는 클로저나 인자로 받아서 사용하는 방식이라는 차이가 있는 것 같다.(생각해보니 인자로 받는 것도 결국엔 객체지향의 의존성 주입과 닮아있네..?) 아직 온전히 함수형으로 코드를 짜는 게\n쉽지는 않지만 천천히 그 재미를 알아가며 적용해보려고 한다.</p>\n<h2 id=\"바닐라-js의-흥미\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%8B%90%EB%9D%BC-js%EC%9D%98-%ED%9D%A5%EB%AF%B8\" aria-label=\"바닐라 js의 흥미 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바닐라 JS의 흥미</h2>\n<p>코드스쿼드 마스터즈 과정을 수료하고 나를 한 번 더 업그레이드 시키고 싶은 마음에 듣기 시작한 JS 강의가 있다. 파리에서 프론트엔드 개발자로 지내고 계시는 은재님의 강의다. 처음부터 JS를 어느정도 알고 리액트도 다뤄본 사람에게 추천한다고 소개해주셨는데, 그만큼 지금의 내가 얻을 수 있는 게 정말 많은 강의였다. 지금도 듣고 있지만, 어느정도 내가 알고 있다고 생각한 JS 그리고 나아가 개발의 세계를 더 확장해주고 계신 느낌..? 은재님을 보면서 나도 나중에 저렇게 멋진 개발자가 되고 싶은 생각이 많이 들었다.(실제로 은재님이 어떤 분인지는 모르지만 개발자로서 뭔가 너무 멋있어보였다.)</p>\n<h2 id=\"다짐\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%A7%90\" aria-label=\"다짐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다짐</h2>\n<p>이제 정말 본격적으로 취업 시장이라는 경쟁 속으로 뛰어드려고 한다. 시간이 좀 지났지만 처음 고1 3월 모의고사를 볼 때, 전국에서 내 위치를 확인할 수 있다는 게 너무 두근거렸는데 지금도 그런 마음으로 나아가봐야겠다. 취업을 하는 건 이번이 처음은 아니지만, 개발자로서 취업하는 건 처음이니까..! 설레는 마음을 안고 나아가보자. 나는 내가 원하는 기업의 프론트엔드 개발자가 됐다!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%95%9C%EC%97%AC%EB%A6%84%EC%9D%98-%EB%8D%94%EC%9C%84\">한여름의 더위</a></li>\n<li><a href=\"#%EC%88%98%EB%A3%8C%ED%9B%84-%ED%95%9C%EB%8B%AC\">수료후 한달</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">함수형 프로그래밍</a></li>\n<li><a href=\"#%EB%B0%94%EB%8B%90%EB%9D%BC-js%EC%9D%98-%ED%9D%A5%EB%AF%B8\">바닐라 JS의 흥미</a></li>\n<li><a href=\"#%EB%8B%A4%EC%A7%90\">다짐</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 08, 2023","title":"23년 7월","categories":"월간회고","author":"제이든","emoji":"🖼️"},"fields":{"slug":"/steadily/monthly-review/2023/7/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/steadily/growth-diary/2023/8/5-gl/","nextSlug":"/from-time-to-time/study/ssok-ssok-functional/ch-7/","prevSlug":"/steadily/monthly-review/2023/7/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}