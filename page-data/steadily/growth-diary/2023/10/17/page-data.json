{"componentChunkName":"component---src-templates-blog-template-js","path":"/steadily/growth-diary/2023/10/17/","result":{"data":{"cur":{"id":"72e3d447-7d45-57f5-8f18-4a071cd6a1fb","html":"<h1 id=\"-성장일지-70\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-70\" aria-label=\" 성장일지 70 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚤 성장일지 7.0</h1>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>⚛ (7.0)&#x3C;완전 개편> <code class=\"language-text\">파인만 학습법</code>을 알게 된만큼, 성장일지는 정말 그 날의 키워드 중심으로 간단하게 정리하도록 한다.</p>\n</blockquote>\n<h2 id=\"nextjs에서의-svg\" style=\"position:relative;\"><a href=\"#nextjs%EC%97%90%EC%84%9C%EC%9D%98-svg\" aria-label=\"nextjs에서의 svg permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js에서의 svg</h2>\n<p>보통 React를 사용할 때는 아래와 같이 svg 파일을 React Component로 변환해서 사용하곤 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ReactComponent <span class=\"token keyword\">as</span> Logo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./logo.svg'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// &lt;Logo /></span></code></pre></div>\n<p>그런데 Next.js에서는 이렇게 사용하면 에러가 발생한다. 이유는 Next.js에서는 svg를 모듈로 인식하지 않기 때문이다. Next.js에서 svg를 사용하는 방법은 여러가지가 있는데 그 중 2가지를 기록해둔다.</p>\n<h3 id=\"1-import-후-image-컴포넌트-사용비추\" style=\"position:relative;\"><a href=\"#1-import-%ED%9B%84-image-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%82%AC%EC%9A%A9%EB%B9%84%EC%B6%94\" aria-label=\"1 import 후 image 컴포넌트 사용비추 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. import 후 Image 컴포넌트 사용(비추)</h3>\n<p>이 방법은 사실 정말 간단하다. svg를 import하고 Image 컴포넌트를 사용하면 된다. 하지만 이 방법은 svg를 React Component로 변환하는 것이 아니라 그냥 이미지로 사용하는 것이기 때문에 svg의 장점을 살릴 수 없다. 예를 들어, svg의 이미지의 크기나 색상 등을 props 혹은 css 형태로 변경할 수 없다. 또한 Next.js 공식문서에도 나와있듯이 Image 컴포넌트로서의 최적화에 있어서 효율성이 떨어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> Logo <span class=\"token keyword\">from</span> <span class=\"token string\">'./logo.svg'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Image</span></span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Logo<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"2-code-classlanguage-textsvgrwebpackcode-사용\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textsvgrwebpackcode-%EC%82%AC%EC%9A%A9\" aria-label=\"2 code classlanguage textsvgrwebpackcode 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">@svgr/webpack</code> 사용</h3>\n<p>이 2번째 방법이 흔히 권장되는 방법인데, 그 방법은 다음과 같다. <code class=\"language-text\">@svgr/webpack</code>을 사용하면 svg를 React Component로 변환해주는 webpack loader를 사용할 수 있다. 이렇게 하면 svg를 React Component로 변환해서 사용할 수 있다.</p>\n<p>그 구체적인 방법은 <a href=\"https://react-svgr.com/docs/next/\">참고</a>에 너무 잘나와있어서 그대로 따라하면 된다.</p>\n<p>다만, 2가지 주의점(혹은 팁)이 있다.</p>\n<ol>\n<li>위의 방법대로 했는데, 변환된 svg component가 서버 컴포넌트에서는 작동하지 않는 에러가 발생한다.(<code class=\"language-text\">Module parse failed: Unexpected token</code>) 아래와 같이 하면 해결할 수 있다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">webpack</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// SVG 가져오기를 처리하는 기존 규칙을 가져오기</span>\n    <span class=\"token keyword\">const</span> fileLoaderRule <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rule</span> <span class=\"token operator\">=></span> rule<span class=\"token punctuation\">.</span>test<span class=\"token operator\">?.</span>test<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.svg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    config<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// ?url로 끝나는 svg 가져오기에만 기존 규칙을 적용</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>fileLoaderRule<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.svg$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">resourceQuery</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">url</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *.svg?url</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 다른 모든 *.svg 가져오기를 React 구성 요소로 변환</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.svg$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// issuer: /\\.[jt]sx?$/, // *.svg를 가져오는 파일 => 이 부분을 삭제한다.</span>\n        <span class=\"token literal-property property\">resourceQuery</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">not</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">url</span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *.svg?url 제외</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@svgr/webpack'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// svg에 대한 처리를 했으므로 *.svg를 무시하도록 파일 로더 규칙을 수정</span>\n    fileLoaderRule<span class=\"token punctuation\">.</span>exclude <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.svg$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>위에 주석에도 있듯이 <code class=\"language-text\">issuer</code>를 삭제해야 한다. 아주 정확한 이유는 아니지만 찾아보니 issuer가 <code class=\"language-text\">svg 파일을 가져오는 파일</code>을 명시하는 것인데, 실제 서버에서 실행되는 서버 컴포넌트는 빌드된 파일이기 때문에 명시된 파일이 없어서 그런 것 같다.</p>\n<p>(추가) 좀더 방법을 찾아보던 중 <a href=\"https://github.com/vercel/next.js/issues/48177#issuecomment-1557354538\">문제 관련 깃헙 이슈 코멘트</a>에서 아래와 같이 적용해서도 해결할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">webpack</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> isServer <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// SVG 가져오기를 처리하는 기존 규칙을 가져오기</span>\n    <span class=\"token keyword\">const</span> fileLoaderRule <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rule</span> <span class=\"token operator\">=></span> rule<span class=\"token punctuation\">.</span>test<span class=\"token operator\">?.</span>test<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.svg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    config<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// ?url로 끝나는 svg 가져오기에만 기존 규칙을 적용</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>fileLoaderRule<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.svg$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">resourceQuery</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">url</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *.svg?url</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 다른 모든 *.svg 가져오기를 React 구성 요소로 변환</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.svg$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">issuer</span><span class=\"token operator\">:</span> fileLoaderRule<span class=\"token punctuation\">.</span>issuer<span class=\"token punctuation\">,</span> <span class=\"token comment\">// *.svg?url 제외</span>\n        <span class=\"token literal-property property\">resourceQuery</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">not</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>fileLoaderRule<span class=\"token punctuation\">.</span>resourceQuery<span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">url</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *.svg?url 제외</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@svgr/webpack'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// svg에 대한 처리를 했으므로 *.svg를 무시하도록 파일 로더 규칙을 수정</span>\n    fileLoaderRule<span class=\"token punctuation\">.</span>exclude <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.svg$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>보니까 svg를 가져오는 파일을 명시할 때, 위에서 적용한 <code class=\"language-text\">*.svg?url</code> 규칙까지 포함돼서 명시되는 것 같다. 그래서 <code class=\"language-text\">issuer</code>를 <code class=\"language-text\">fileLoaderRule.issuer</code>로 명시해주면 해결된다.</p>\n<ol start=\"2\">\n<li>svg component에 대한 custom 타입 정의해주기</li>\n</ol>\n<p>기본적으로 위의 과정을 거쳐서 svg를 react component처럼 사용하게 되면 잘 작동한다! 다만 아쉬운 점은 해당 컴포넌트에 마우스를 올리면 <code class=\"language-text\">any</code> 타입이 나온다는 것이다. 이 부분은 직접 타입은 선언해줌으로써 해결할 수 있다. 나같은 경우 root 디렉토리에 <code class=\"language-text\">svg-component.d.ts</code>를 만들어주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'*.svg'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> svg<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>SVGProps<span class=\"token operator\">&lt;</span>SVGSVGElement<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> svg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 <code class=\"language-text\">tsconfig.json</code>에 아래와 같이 추가해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"svg-component.d.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"next-env.d.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".next/types/**/*.ts\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 마우스를 올려보면 <code class=\"language-text\">React.FC&lt;React.SVGProps&lt;SVGSVGElement>></code> 타입이 잘 나오는 걸 확인할 수 있다.(그래도 any가 나오면 vscode 재시작해보기~!)</p>\n<h1 id=\"-회고\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EA%B3%A0\" aria-label=\" 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 회고</h1>\n<p>오늘 하루가 뭔가 후우웅하고 지나갔다… 정신 바짝 차리고 살아야겠다잉!!! 시간을 인지하면서 살자!</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://nextjs.org/docs/pages/api-reference/components/image#dangerouslyallowsvg\">Next.js 공식문서: SVG</a></li>\n<li><a href=\"https://react-svgr.com/docs/next/\">SVGR with Next.js</a></li>\n<li><a href=\"https://www.reddit.com/r/nextjs/comments/14iip1u/nextjs_1347_app_router_svgr_server_components_not/\">Reddit: App router + SVGR + Server Components not working</a></li>\n<li><a href=\"https://github.com/vercel/next.js/issues/48177#issuecomment-1557354538\">위의 이슈 코멘트</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#nextjs%EC%97%90%EC%84%9C%EC%9D%98-svg\">Next.js에서의 svg</a></p>\n<ul>\n<li><a href=\"#1-import-%ED%9B%84-image-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%82%AC%EC%9A%A9%EB%B9%84%EC%B6%94\">1. import 후 Image 컴포넌트 사용(비추)</a></li>\n<li><a href=\"#2-svgrwebpack-%EC%82%AC%EC%9A%A9\">2. <code class=\"language-text\">@svgr/webpack</code> 사용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","excerpt":"🚤 성장일지 7.0 책 의 내용에 자극받아 시작하는 소박한  살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?\n성장하고 있는 것이 살아 있는 것이다.\n생명의 유일한 증거는 성장이다! ⚛ (7.0)<완전 개편> 을 알게 된만큼, 성장일지는 정말 그 날의 키워드 중심으로 간단하게 정리하도록 한다. Next.js에서의 svg 보통 React를 사용할 때는 아래와 같이 svg 파일을 React Component로 변환해서 사용하곤 했다. 그런데 Next.js에서는 이렇게 사용하면 에러가 발생한다. 이유는 Next.js에서는 svg를 모듈로 인식하지 않기 때문이다. Next.js에서 svg를 사용하는 방법은 여러가지가 있는데 그 중 2가지를 기록해둔다. 1. import 후 Image 컴포넌트 사용(비추) 이 방법은 사실 정말 간단하다. svg를 import하고 Image 컴포넌트를 사용하면 된다. 하지만 이 방법은 svg를 React Component로 변환하는 것이 아니라 그냥 이미지로 사용…","frontmatter":{"date":"October 17, 2023","title":"231017(화) 성장","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/10/17/"}},"next":{"id":"58e21915-3ee9-58dc-9e68-990ce3896192","html":"<h1 id=\"-성장일지-70\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-70\" aria-label=\" 성장일지 70 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚤 성장일지 7.0</h1>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>⚛ (7.0)&#x3C;완전 개편> <code class=\"language-text\">파인만 학습법</code>을 알게 된만큼, 성장일지는 정말 그 날의 키워드 중심으로 간단하게 정리하도록 한다.</p>\n</blockquote>\n<h2 id=\"usereducer\" style=\"position:relative;\"><a href=\"#usereducer\" aria-label=\"usereducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useReducer</h2>\n<p>사실 그동안 <code class=\"language-text\">useReducer</code>에 대해서 <code class=\"language-text\">굳이..?</code>라는 생각을 자주 했었다. 내가 다루는 프로젝트 수준에서의 상태가 그렇게 복잡하지도 않았고, 애초에 그렇게 복잡하게 관리되는 상태라면 여러개의 state로 분리하는 게 개인적으로는 개발자 경험에도 좋다고 생각했기 때문이다. 또 그러다가 상태를 핸들링하는 함수가 다소 복잡하거나 지저분하면 그 부분만 커스텀 훅으로 분리하기만 해도 충분하다고 생각했기 때문이다. 그러다 오늘 강의를 듣고 테스트 코드를 작성하면서 <code class=\"language-text\">useReducer</code>의 필요성을 느꼈다. 앞에서 말했던 것처럼 사실 잘 분리하고 조작만 한다면 <code class=\"language-text\">useState</code>로도 충분히 깔끔한 코드를 짤 수 있다고 생각한다. 다만, state를 다루는 로직을 <code class=\"language-text\">reducer</code>라는 순수함수로 분리함으로써 개발자 경험뿐 아니라 state의 응집도를 높일 수 있었고 무엇보다 테스트 코드를 작성하기 수월해졌다. 앞으로도 가능하면 <code class=\"language-text\">useReducer</code>를 사용하도록 (억지로라도) 해보려 한다!!!</p>\n<h2 id=\"ajax\" style=\"position:relative;\"><a href=\"#ajax\" aria-label=\"ajax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ajax</h2>\n<p>오늘 CS - 네트워크 스터디를 준비하면서 <code class=\"language-text\">Ajax가 무엇인지 설명해주세요.</code>라는 질문이 있었다. 정말 단순하게 <code class=\"language-text\">Ajax는 비동기적으로 서버와 통신하는 무언가 새로 등장한 기술</code>이라고 생각했다. 그렇지만 좀더 찾아보고 공부해서 준비한 내 대답은 아래와 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Ajax란 비동기적인 자바스크립트와 XML이라는 의미로 새로운 언어나 개념이라기보단 비동기적으로 데이터만 받아와서 화면을 업데이트할 수 있는 개발 기법입니다.\n일반적으로 웹 페이지의 뼈대를 그리는 html, 스타일을 담당하는 css, 그리고 동작을 담당하는 JavaScript를 기본으로 JS에서 특정 data만 요청하는 로직을 함께 쓰는 경우가 대부분입니다.\nAjax 기법이 등장하기 이전에는 각 페이지마다 서버에서 완성된 html을 만들어서 보내줘야했습니다. 유저의 정보나 페이지 번호 등에 따라 페이지의 일부가 변하는 상황에서도 그대로 유지되는\nhtml까지 다시 전부 그려야했습니다. Ajax를 통해 처음 페이지 요청에서만 html, css, js 를 받고 유저의 인터렉션에 따라 data를 요청하여 화면의 일부분만 변경함으로써 기존과는 완전히 다른\n사용자 경험을 제공할 수 있게 되었습니다.</code></pre></div>\n<p>비슷할 수도 있지만 내가 느꼈던 어떤 본질적인 느낌이랑은 다른 것 같다. 솔직히 ajax하면 당장 떠오르는 게 xmlHttpRequest 혹은 fetch api이었는데 이런 여러가지를 조합해서 개발하는 기법이라는 게 신기했다.(지금은 이 세트가 너무 당연한데…)</p>\n<p>아 그리고 <code class=\"language-text\">Asynchronous JavaScript and XML</code>에서 xml은 정말 단순하게 말하자면 html 같은 녀석인데, 화면의 골격을 잡으려는 목적이 강한 html과는 다르게 데이터를 표한하기 위한 목적이 강한 마크업 언어이다.(더 단순하게 말하면 지금 우리가 데이터를 전달할 때 사용하는 형태인 JSON의 마크업 버전이라고 생각하면 된다.) 그 당시에는 xml을 사용하는 것이 일반적이었어서 ajax가 되었다.</p>\n<h1 id=\"-회고\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EA%B3%A0\" aria-label=\" 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 회고</h1>\n<p>시간이 빠르더라도 그 속에서 그 흐름을 잘 인지하면서 살도록 하자! 그래야 더 알차고 의미있는 삶을 살 수 있다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/Ajax\">위키백과: Ajax</a></li>\n<li><a href=\"https://www.tcpschool.com/ajax/intro\">TCP 스쿨: Ajax 개요</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#usereducer\">useReducer</a></li>\n<li><a href=\"#ajax\">Ajax</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 16, 2023","title":"231016(월) 성장","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/10/16/"}},"prev":{"id":"d50d4889-1f56-5bed-9b1b-f6897b2adb48","html":"<h1 id=\"-성장일지-70\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-70\" aria-label=\" 성장일지 70 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚤 성장일지 7.0</h1>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>⚛ (7.0)&#x3C;완전 개편> <code class=\"language-text\">파인만 학습법</code>을 알게 된만큼, 성장일지는 정말 그 날의 키워드 중심으로 간단하게 정리하도록 한다.</p>\n</blockquote>\n<h2 id=\"nextjs의-parallel-routes\" style=\"position:relative;\"><a href=\"#nextjs%EC%9D%98-parallel-routes\" aria-label=\"nextjs의 parallel routes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js의 Parallel Routes</h2>\n<p>Next.js의 Route 관련 공식문서를 보다가 재미있는 기능을 발견했다. 바로 Parallel Routes이다. 말 그대로 평행으로(병렬로) 라우팅을 할 수 있는 기능이다. layout.tsx 컴포넌트를 기준으로 해당 파일이 위치한 곳에서 폴더명 앞에 <code class=\"language-text\">@</code>를 붙이면 해당 폴더의 이름에 해당하는 컴포넌트는 layout.tsx 컴포넌트의 props로 가져올 수 있다. 말로 하면 되게 복잡해보이는데 아래 예시를 보면 이해가 쉽다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> aa<span class=\"token punctuation\">,</span> bb <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Layout</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> // 기본적으로 layout.tsx가 위치한 계층의 page.tsx 컴포넌트가 렌더링된다.\n      </span><span class=\"token punctuation\">{</span>aa<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> // @aa 폴더의 page.tsx 컴포넌트가 렌더링된다.\n      </span><span class=\"token punctuation\">{</span>bb<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> // 마찬가지\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  );\n}</span></code></pre></div>\n<p>이 때 또 중요한 게 있다. 바로 <code class=\"language-text\">default.tsx</code>인데, 이 파일의 역할은 위와 같이 동일한 위치에서 다른 컴포넌트는 그 내부에 경로가 있는데 다른 컴포넌트는 없는 경우에 기본적으로 렌더링할 컴포넌트를 정의하는 것이다. 예를 들어, <code class=\"language-text\">@aa</code> 폴더에 <code class=\"language-text\">page.tsx</code>가 있고 <code class=\"language-text\">@bb</code> 폴더에는 <code class=\"language-text\">page.tsx</code>가 없는 경우에 <code class=\"language-text\">@bb</code> 폴더의 <code class=\"language-text\">page.tsx</code>가 없는 경우에 <code class=\"language-text\">@bb</code> 폴더의 <code class=\"language-text\">default.tsx</code>가 렌더링된다.</p>\n<blockquote>\n<p>사실 이 부분은 말로 설명이 어려워서 아래 참고에 공식문서를 읽어보는 걸 추천한다!</p>\n</blockquote>\n<p>그리고 이제 정말 재미있었던 부분..!(사실 처음에 이해하는데 머리가 아팠음…)</p>\n<p>공식문서에서는 위의 기능을 통해서 <code class=\"language-text\">Modal(모달)</code>을 구현할 수 있다고 한다!!!(<a href=\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#modals\">참고</a>)</p>\n<p>안그래도 Next.js에서도 React와 비슷하게 Portal을 써야하나 했는데, 이렇게 쉽게 구현이 가능하다니! 라는 마음으로 구현해보았다.(구현하면서 이해하느라 머리가 아팠따…) 결론부터 내가 구현한 방법의 구조 예시를 보면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">└─ src\n   └─ app\n      ├─ example\n      │  ├─ @exampleModal\n      │  │  └─ filter\n      │  │     └─ page.tsx\n      │  └─ default.tsx, layout.tsx, page.tsx\n      ├─ @homeModal\n      │  ├─ filter\n      │  │  └─ page.tsx\n      │  └─ default.tsx\n      └─ default.tsx, layout.tsx, page.tsx</code></pre></div>\n<p>위와 같은 구조가 된다. 이렇게 되면 home에서는 ’/‘로 접근 시에 home 컴포넌트가 렌더링 되면서 @homeModal에 해당하는 default가 렌더링된다.(modal이 보이면 안되니까 null을 반환하게 처리한다.) 그리고 반대로 ‘/filter’로 접근할 때는 @homeModal에 있는 filter에 있는 page.tsx가 렌더링된다. 이 때, 모달의 기능을 해야하므로(즉, 기존 home 컴포넌트는 렌더링 되어야하기 때문에) home의 default.tsx에는 home의 page.tsx를 반환하게 하면 된다. 그러면 home 컴포넌트는 렌더링되고, @homeModal의 filter에 있는 page.tsx가 렌더링되면서 모달이 렌더링된다. 처음엔 이 부분 자체가 이해가 잘 안돼서 많이 헤맸는데 한 번 이해하면 나름..? 직관적이고 좋은 방법이라고 생각한다. 그리고 또 이렇게 구현해보고 싶었던 이유 중 하나는 모달임에도 불구하고 뒤로가기가 적용되었으면 했기 때문이다! 위와 같이 모달 자체가 라우팅으로 구현된 것이기 때문에, 모달창이 떴을 때 뒤로가기를 하면 모달이 사라진 화면이 렌더링되게 할 수 있다.</p>\n<p>좀더 자세한 내용은 꼭 공식문서를 보는 걸 추천한다!</p>\n<h1 id=\"-회고\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EA%B3%A0\" aria-label=\" 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 회고</h1>\n<p>이해하는데 시간이 좀 걸렸지만 새로운 재미를 발견한 하루였다. 나중에 시간이 될 때, Next의 내부 구현 코드도 한번 봐야지!!!</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes\">Next.js 공식문서: Parallel</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#nextjs%EC%9D%98-parallel-routes\">Next.js의 Parallel Routes</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 20, 2023","title":"231020(금) 성장","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/10/20/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/steadily/growth-diary/2023/10/17/","nextSlug":"/steadily/growth-diary/2023/10/16/","prevSlug":"/steadily/growth-diary/2023/10/20/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}