{"componentChunkName":"component---src-templates-blog-template-js","path":"/steadily/growth-diary/2023/9/11/","result":{"data":{"cur":{"id":"1a482f80-da15-5ecf-9e48-5cbf6c6f865d","html":"<h2 id=\"-성장일지-70\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-70\" aria-label=\" 성장일지 70 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚤 성장일지 7.0</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>⚛ (7.0)&#x3C;완전 개편> <code class=\"language-text\">파인만 학습법</code>을 알게 된만큼, 성장일지는 정말 그 날의 키워드 중심으로 간단하게 정리하도록 한다.</p>\n</blockquote>\n<h2 id=\"️-키워드-직관적이고-쉽고-간단하게-작성\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A7%81%EA%B4%80%EC%A0%81%EC%9D%B4%EA%B3%A0-%EC%89%BD%EA%B3%A0-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%9E%91%EC%84%B1\" aria-label=\"️ 키워드 직관적이고 쉽고 간단하게 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚛️ 키워드: 직관적이고 쉽고 간단하게 작성</h2>\n<h3 id=\"recharts\" style=\"position:relative;\"><a href=\"#recharts\" aria-label=\"recharts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recharts</h3>\n<ul>\n<li>Recharts는 React를 위한 라이브러리로, SVG 기반의 차트를 쉽게 구현할 수 있도록 도와준다.</li>\n<li>Recharts는 다양한 종류의 차트를 지원한다.</li>\n<li>또한, ResponsiveContainer, ComposedChart 등의 api를 통해 반응형 및 다양한 형태의 차트를 구현할 수 있다.</li>\n</ul>\n<blockquote>\n<p>d3가 아닌 Recharts를 사용한 이유는 확장성에 있어서는 d3가 더 유연하고 강력하지만, Recharts는 이름처럼 React를 위한 컴포넌트를 제공하기 때문에 React와의 호환성이 더 좋다고 생각했다. 또한, 현재 진행하는 미션 프로젝트에서 내가 더 깊게 배우고 싶은 부분은 차트를 그리는 것보다는 Test code 작성이기에 차트를 그리는 작업에서 힘을 빼고 싶었다. 한편으로 너무 커스텀하지 않으면 어떻게 할까 걱정했는데, 생각보다 많은 props를 제공해주고 있어서 커스텀이 가능했다.</p>\n</blockquote>\n<h3 id=\"4-way-handshake-송신측에서의-time_wait\" style=\"position:relative;\"><a href=\"#4-way-handshake-%EC%86%A1%EC%8B%A0%EC%B8%A1%EC%97%90%EC%84%9C%EC%9D%98-time_wait\" aria-label=\"4 way handshake 송신측에서의 time_wait permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-way-handshake: 송신측에서의 TIME_WAIT</h3>\n<ul>\n<li>4-way-handshake는 TCP 연결을 종료하기 위한 과정이다.</li>\n<li>4-way-handshake에서는 서버와 클라이언트가 각각 FIN 패킷을 보내고, 서버와 클라이언트가 각각 ACK 패킷을 보내는 과정이 존재한다.</li>\n<li>앞의 과정은 생략하고, 송신측은 수신측에게 ACK를 받고 FIN을 받은 뒤에 ACK를 보내고 TIME_WAIT 상태로 들어간다.</li>\n<li>이는 수신측에서 확실히 ACK를 받고서 소켓 연결 종료를 보장하기 위함이다.</li>\n</ul>\n<h2 id=\"-회고\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EA%B3%A0\" aria-label=\" 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 회고</h2>\n<p>Recharts를 통해서 차트를 그려보았다. 사실 라이브러리를 가져다가 쓰는 건 공식문서 보면서 열심히 따라가면 되는거라… 그렇게 어려울 건 없었다. 내일 각 데이터의 필터링을 상태로 두고 차트에 이벤트 리스너를 달아서 구현하려하는데 어떻게 하면 좀더 깔끔하게 상태관리를 할 수 있을지 고민이 된다. 그리고 본격적으로 테스트 코드를 빡세게 작성해보려 한다. jest, react-testing-library에서 나아가서 cypress까지 다뤄보아도 좋을 것 같다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-70\">🚤 성장일지 7.0</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A7%81%EA%B4%80%EC%A0%81%EC%9D%B4%EA%B3%A0-%EC%89%BD%EA%B3%A0-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%9E%91%EC%84%B1\">⚛️ 키워드: 직관적이고 쉽고 간단하게 작성</a></p>\n<ul>\n<li><a href=\"#recharts\">Recharts</a></li>\n<li><a href=\"#4-way-handshake-%EC%86%A1%EC%8B%A0%EC%B8%A1%EC%97%90%EC%84%9C%EC%9D%98-time_wait\">4-way-handshake: 송신측에서의 TIME_WAIT</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EA%B3%A0\">📝 회고</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","excerpt":"🚤 성장일지 7.0 책 의 내용에 자극받아 시작하는 소박한  살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?\n성장하고 있는 것이 살아 있는 것이다.\n생명의 유일한 증거는 성장이다! ⚛ (7.0)<완전 개편> 을 알게 된만큼, 성장일지는 정말 그 날의 키워드 중심으로 간단하게 정리하도록 한다. ⚛️ 키워드: 직관적이고 쉽고 간단하게 작성 Recharts Recharts는 React를 위한 라이브러리로, SVG 기반의 차트를 쉽게 구현할 수 있도록 도와준다. Recharts는 다양한 종류의 차트를 지원한다. 또한, ResponsiveContainer, ComposedChart 등의 api를 통해 반응형 및 다양한 형태의 차트를 구현할 수 있다. d3가 아닌 Recharts를 사용한 이유는 확장성에 있어서는 d3가 더 유연하고 강력하지만, Recharts는 이름처럼 React를 위한 컴포넌트를 제공하기 때문에 React와의 호환성이 더 좋다고 생각했다. 또한, 현재 진행하는 미션 프로젝트에서…","frontmatter":{"date":"September 11, 2023","title":"230911(월)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/9/11/"}},"next":{"id":"40a138d2-2cda-5be8-a60d-08e037b6385a","html":"<h2 id=\"-성장일지-70\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-70\" aria-label=\" 성장일지 70 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚤 성장일지 7.0</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>⚛ (7.0)&#x3C;완전 개편> <code class=\"language-text\">파인만 학습법</code>을 알게 된만큼, 성장일지는 정말 그 날의 키워드 중심으로 간단하게 정리하도록 한다.</p>\n</blockquote>\n<h2 id=\"️-키워드-직관적이고-쉽고-간단하게-작성\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A7%81%EA%B4%80%EC%A0%81%EC%9D%B4%EA%B3%A0-%EC%89%BD%EA%B3%A0-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%9E%91%EC%84%B1\" aria-label=\"️ 키워드 직관적이고 쉽고 간단하게 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚛️ 키워드: 직관적이고 쉽고 간단하게 작성</h2>\n<h3 id=\"nextjs\" style=\"position:relative;\"><a href=\"#nextjs\" aria-label=\"nextjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js</h3>\n<ul>\n<li>Next.js는 다양한 라이브러리를 조합하는 React를 사용하는 개발자들을 위한 프레임워크이다.</li>\n<li>아래와 같은 것들을 지원한다.\n<ul>\n<li>풀스택 기반</li>\n<li>File-based routing(파일 기반 라우팅)</li>\n<li>최적화 ex) SEO, Image, Font</li>\n<li>SSR 뿐 아니라 다양한 형태를 결합한 하이브리드 렌더링 제공</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>리액트로 구현한 어플리케이션은 기본적으로 CSR 방식으로 렌더링을 한다. 그러다보니 초기 로딩속도, SEO, 보안 등의 단점이 존재한다.</li>\n<li>이를 보완하기 위해 SSG 방식이 등장했다. SSG 방식은 빌드 시점에 미리 페이지를 렌더링하여 정적인 페이지를 생성한다. 이렇게 생성된 정적인 페이지는 CDN에 캐싱할 수 있어 빠른 로딩 속도를 보장한다. 하지만, 정적인 페이지이기 때문에 동적인 데이터를 사용할 수 없다는 단점이 존재한다.</li>\n<li>이를 보완하기 위해 ISR 방식이 등장했다. 처음 빌드 시점에 미리 html 파일을 만들어서 응답하던 SSG와는 다르게 일정 시간마다 정적인 페이지를 재생성한다. 이렇게 재생성된 정적인 페이지는 CDN에 캐싱할 수 있어 빠른 로딩 속도를 보장한다. 또한, 그나마 데이터를 동적으로 사용할 수 있어 SSG의 단점을 보완한다. 그럼에도 여전히 실시간 데이터가 반영되는 게 아니라는 단점이 존재한다.</li>\n<li>이를 보완하기 위해 SSR 방식이 등장했다. CSR과 비슷하지만, 유저의 요청이 있을 때마다 서버에서 html을 생성하여 응답한다. 이렇게 생성된 html은 CDN에 캐싱할 수 있어 빠른 로딩 속도를 보장한다. 또한, 실시간 데이터를 사용할 수 있어 SSG, ISR의 단점을 보완한다. 하지만, 서버에서 html을 생성하기 때문에 서버의 부하가 증가한다는 단점이 존재한다.</li>\n<li>따라서 어플리케이션에서 페이지의 특성 혹은 페이지의 일부분의 특성에 따라 CSR, SSG, ISR, SSR을 적절히 사용해야 한다. 이를 위해 Next.js는 각 페이지의 특성에 따라 CSR, SSG, ISR, SSR을 적절히 사용할 수 있도록 지원한다.</li>\n</ol>\n<h3 id=\"이진-탐색\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89\" aria-label=\"이진 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진 탐색</h3>\n<ul>\n<li>숫자가 정렬된 배열에서 특정 숫자를 찾는 알고리즘</li>\n<li>일반적인 탐색 알고리즘은 순차적으로 탐색하므로 O(n)의 시간 복잡도를 가지지만, 이진 탐색은 O(log n)의 시간 복잡도를 가진다.</li>\n<li>이진 탐색은 배열의 중간 인덱스를 찾아서, 찾고자 하는 숫자와 비교하고, 중간 인덱스의 숫자가 찾고자 하는 숫자보다 크면 왼쪽을, 작으면 오른쪽을 탐색한다.</li>\n<li>이진 탐색은 배열이 정렬되어 있어야만 사용할 수 있다.</li>\n<li>이진 탐색은 반복문, 재귀함수로 구현할 수 있다.</li>\n</ul>\n<p>구현 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 반복문</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 재귀함수</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"-회고\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EA%B3%A0\" aria-label=\" 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 회고</h2>\n<p>드디어 Next.js 강의를 듣기 시작했다. 사실 그동안 <code class=\"language-text\">Next.js까지 신입이 알 필요가 있을까?</code>라는 마음에 기본 JS와 React 공부에 더 힘을 썼다. 그러다 오늘 동기인 나니와 대화 중 <code class=\"language-text\">가고 싶은 회사의 기술 스택으로 있어서 빨리 배우려 했다</code>는 대답을 들었다. 해서 내가 가고싶은 기업들의 기술스택을 다시 한 번 찾아봤고, 많은 기업들이 Next.js 를 사용하고 있다는 걸 알게 되었다. 또, 지금 현재는 SSG 형태의 Gatsby로 구현된 블로그를 사용하고 있는데, 조금 엉성하더라도 직접 구현해보는 게 좋을 것 같다는 생각에 추후에 Next.js를 사용해서 블로그를 구현해볼 예정이다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-70\">🚤 성장일지 7.0</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A7%81%EA%B4%80%EC%A0%81%EC%9D%B4%EA%B3%A0-%EC%89%BD%EA%B3%A0-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%9E%91%EC%84%B1\">⚛️ 키워드: 직관적이고 쉽고 간단하게 작성</a></p>\n<ul>\n<li><a href=\"#nextjs\">Next.js</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89\">이진 탐색</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EA%B3%A0\">📝 회고</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 09, 2023","title":"230909(토)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/9/9/"}},"prev":{"id":"bf03dc9a-ac19-51ca-8d51-400a74eadcdc","html":"<h2 id=\"-성장일지-70\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-70\" aria-label=\" 성장일지 70 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚤 성장일지 7.0</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>⚛ (7.0)&#x3C;완전 개편> <code class=\"language-text\">파인만 학습법</code>을 알게 된만큼, 성장일지는 정말 그 날의 키워드 중심으로 간단하게 정리하도록 한다.</p>\n</blockquote>\n<h2 id=\"️-키워드-직관적이고-쉽고-간단하게-작성\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A7%81%EA%B4%80%EC%A0%81%EC%9D%B4%EA%B3%A0-%EC%89%BD%EA%B3%A0-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%9E%91%EC%84%B1\" aria-label=\"️ 키워드 직관적이고 쉽고 간단하게 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚛️ 키워드: 직관적이고 쉽고 간단하게 작성</h2>\n<h3 id=\"테스트-코드\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\"테스트 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 코드</h3>\n<ul>\n<li>소프트웨어 테스트는 <code class=\"language-text\">소프트웨어가 의도한대로 동작하는지를 확인하는 과정</code>이다.</li>\n<li>테스트 코드는 <code class=\"language-text\">테스트를 자동화하기 위해 작성하는 코드</code>이다.(개발자는 항상 뭐든지 자동화하려고 노력해야 한다!!! 효율적으로 살자!!!)</li>\n<li>테스트 코드를 작성함으로써 <code class=\"language-text\">테스트를 반복적으로 수행할 수 있고, 테스트를 수행하는 시간을 줄일 수 있다.</code>\n<ul>\n<li>\n<ol>\n<li>빠른 주기로 내 코드에 대한 피드백을 받을 수 있다.</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>실시간으로 개발 중에 피드백을 받을 수 있다.</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>즉, 코드를 작성함에 있어서 더 확신을 갖고 작성할 수 있다.</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>테스트 코드 대상의 규모에 따라 단위 테스트, 통합 테스트, E2E 테스트로 나눌 수 있다.\n<ul>\n<li>\n<ol>\n<li>단위 테스트: 함수, 모듈, 클래스 등의 단위를 테스트하는 것</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>통합 테스트: 단위 테스트를 통합하는 것</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>E2E 테스트: 사용자의 관점에서 테스트하는 것</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>사실상 프론트엔드 진영에서는 단위 테스트를 훨씬 많이 적용하고, 비교적 비용이 큰 E2E 테스트는 그 빈도가 더 적다고 한다.</p>\n</blockquote>\n<h4 id=\"jestjavascript-test-라이브러리\" style=\"position:relative;\"><a href=\"#jestjavascript-test-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"jestjavascript test 라이브러리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jest(Javascript Test) 라이브러리</h4>\n<ul>\n<li>JavaScript 진영에서 사용되는 테스트 라이브러리 중 가장 대표적인 라이브러리.(이외에도 Mocha, Chai, Jasmine 등이 있다.)</li>\n<li><code class=\"language-text\">*.test.*</code> 형태의 파일을 모두 테스트 코드로 인지한다.</li>\n<li>아래와 같은 형태를 띈다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'테스트 설명'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 테스트를 위한 셋업(변수 선언, 함수 선언 등)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'테스트 대상'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'기대 결과'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>이 때, <code class=\"language-text\">toBe()</code>와 같은 함수를 <code class=\"language-text\">matcher</code>라고 한다.</li>\n</ul>\n<h4 id=\"react-testing-libraryrtl\" style=\"position:relative;\"><a href=\"#react-testing-libraryrtl\" aria-label=\"react testing libraryrtl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Testing Library(RTL)</h4>\n<ul>\n<li>React 컴포넌트를 테스트하기 위한 라이브러리.</li>\n<li>RTL은 코드의 구체적인 과정이 아니라 결과 즉, <code class=\"language-text\">화면에 무엇이 렌더링되는지</code>에 초점을 맞춘다.\n<ul>\n<li>참고) <code class=\"language-text\">Enzyme</code>은 코드의 구체적인 과정에 초점을 맞춘다.</li>\n<li>예시) 어떤 state를 useState로 관리하다가 Recoil로 관리하게 되었을 때, <code class=\"language-text\">Enzyme</code>은 코드의 구체적인 과정을 테스트하기 때문에 테스트 코드를 수정해야 한다. 반면에 <code class=\"language-text\">RTL</code>은 화면에 무엇이 렌더링되는지에 초점을 맞추기 때문에 테스트 코드를 수정할 필요가 없다.</li>\n</ul>\n</li>\n<li>아래와 같은 형태를 띈다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> screen <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> userEvent <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/user-event'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@testing-library/jest-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'App rendering'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click me!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// import '@testing-library/jest-dom'를 통해서 dom과 관련된 matcher 함수들을 사용할 수 있게 된다.</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeDisabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"tddtest-driven-development\" style=\"position:relative;\"><a href=\"#tddtest-driven-development\" aria-label=\"tddtest driven development permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD(Test Driven Development)</h3>\n<ul>\n<li>테스트 주도 개발로, 테스트 코드를 먼저 작성하고 그에 맞춰서 코드를 작성하는 방식이다.</li>\n<li>3가지 단계를 거쳐서 진행된다.\n<ul>\n<li>\n<ol>\n<li>Red: 무조건 실패하는 테스트 코드 작성(당연히 함수가 없는데 테스트 코드만 있으니까!)</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>Green: 무식하게라도 테스트를 통과하는 코드 작성</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>Blue: Green 단계의 코드를 더 좋은 형태로 리팩토링</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"-회고\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EA%B3%A0\" aria-label=\" 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 회고</h2>\n<p>오늘은 하루종일 Recharts의 공식문서를 보면서 차트에 있어서의 여러 기능과 props들을 살펴보고 적용했다. 요구사항에 해당하는 기능은 모두 구현이 끝나서, 오늘 세션 때 들은 테스트 코드를 열심히 적용했는데, 이놈의 <code class=\"language-text\">styled-components</code>때문에 약간의 에러들이 있었다. 그래도 결국엔 ThemeProvider를 감싸주고 테스트를 진행하니 괜찮았다. 내일은 나아가서 styled-components의 style을 테스트하는 방법과 시간이 된다면 cypress를 통해서 E2E 테스트를 진행해보려 한다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-70\">🚤 성장일지 7.0</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A7%81%EA%B4%80%EC%A0%81%EC%9D%B4%EA%B3%A0-%EC%89%BD%EA%B3%A0-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%9E%91%EC%84%B1\">⚛️ 키워드: 직관적이고 쉽고 간단하게 작성</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\">테스트 코드</a></p>\n<ul>\n<li><a href=\"#jestjavascript-test-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\">Jest(Javascript Test) 라이브러리</a></li>\n<li><a href=\"#react-testing-libraryrtl\">React Testing Library(RTL)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tddtest-driven-development\">TDD(Test Driven Development)</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EA%B3%A0\">📝 회고</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 12, 2023","title":"230912(화)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/9/12/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/steadily/growth-diary/2023/9/11/","nextSlug":"/steadily/growth-diary/2023/9/9/","prevSlug":"/steadily/growth-diary/2023/9/12/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}