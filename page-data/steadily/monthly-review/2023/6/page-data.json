{"componentChunkName":"component---src-templates-blog-template-js","path":"/steadily/monthly-review/2023/6/","result":{"data":{"cur":{"id":"dfb6d48b-0be6-501b-8360-66fb0d60b84e","html":"<h1 id=\"-월간회고-v10\" style=\"position:relative;\"><a href=\"#-%EC%9B%94%EA%B0%84%ED%9A%8C%EA%B3%A0-v10\" aria-label=\" 월간회고 v10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚪 월간회고 v1.0</h1>\n<ul>\n<li>너무나 빠르게 가는 시간을 조금이라도 뒤돌아보고자 작성하는 한달 단위의 회고</li>\n<li>다른 카테고리들보다 아직 정해진 게 없다. 천천히 정리해나아가는 걸로! 최대한 러프하게 생각나는 핵심들을 적어보도록 하자!</li>\n</ul>\n<h2 id=\"익숙함-그리고-반복의-중요성\" style=\"position:relative;\"><a href=\"#%EC%9D%B5%EC%88%99%ED%95%A8-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%98%EB%B3%B5%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\" aria-label=\"익숙함 그리고 반복의 중요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>익숙함 그리고 반복의 중요성</h2>\n<p>두번째 협업 프로젝트를 진행했다. 첫번째 협업 프로젝트 때, 1주차 기획을 파악하고 스토리, 테스크를 뽑아내고 스택 및 컨벤션을 정하는 일이 쉽지 않았었다. 헌데 이번엔\n그래도 한 번 해봤다고 뭔가 척척 진행할 수 있었다. 그리고 백엔드분들과 어떻게 소통해야하고 같은 프론트엔드 동료와 무엇을 해야할지 말하지 않아도 서로 알 수 있었다.\n덕분에 1주차가 제일 힘들었던 첫번째 프로젝트와는 다르게, 이번 1주차는 생각보다는 쉽고 즐겁게 진행할 수 있었다.</p>\n<h2 id=\"was의-구조가-잡히다\" style=\"position:relative;\"><a href=\"#was%EC%9D%98-%EA%B5%AC%EC%A1%B0%EA%B0%80-%EC%9E%A1%ED%9E%88%EB%8B%A4\" aria-label=\"was의 구조가 잡히다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WAS의 구조가 잡히다.</h2>\n<p>다양한 구조가 있겠지만, 전체적인 웹 어플리케이션의 구조가 확실히 머리에 잡히게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">               --------------     --------------\n----------     |  Web       |     |Application |     ----------\n| CLIENT | --- |            | --- |            | --- |DataBase| \n----------     |     Server |     |     Server |     ----------\n               --------------     --------------</code></pre></div>\n<p>위의 구조이다. 아주 간단하고 쉬운 구조이지만, 그동안 나는 프론트가 담당하는 <code class=\"language-text\">클라이언트 진영</code>과 백이 담당하는 <code class=\"language-text\">서버 진영</code>의 구조만 알고 있었다. 프로젝트를 진행하면서\n<code class=\"language-text\">웹 서버는 어떻게 띄울지</code>, <code class=\"language-text\">백엔드 서버(어플리케이션 서버)는 어떻게 띄울지</code>, <code class=\"language-text\">EC2 하나로 포트만 다르게 할지 아니면 서버를 2개 빌려서 띄울지</code> 등등의 개념을 몸으로\n터득할 수 있었다. 나중에 또 어떤 인프라를 접할지 모르지만, 위 구조를 토대로 생각하면서 정말 많은 도움을 얻을 수 있었다.(OAuth 2.0에 대한 부분 등)</p>\n<h2 id=\"코드에-정성을-들이자\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%97%90-%EC%A0%95%EC%84%B1%EC%9D%84-%EB%93%A4%EC%9D%B4%EC%9E%90\" aria-label=\"코드에 정성을 들이자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드에 정성을 들이자</h2>\n<p>이번 프로젝트를 통해 깨달은 게 하나있다. 코드 한 줄 한 줄에 정성을 들여야 한다는 것. 그리고 나중에 할 생각을 하지말고 그 때 바로 해야한다는 것.\n<code class=\"language-text\">일단 이렇게 작성하고 추후에 리팩토링하자</code>라는 마인드로 너무 많은 코드를 타협(?)했던 것 같다. 당장은 편할지 몰라도 이런 타협 코드들이 쌓이고 쌓여서\n추후에 엄청난 코드더미로 다가온다는 것을 알게 되었다. 그러니 미리 마음속에 리팩토링할 생각을 하고 쓰지 말고, 처음부터 내 온힘과 정성을 들여서 코드를 작성하도록 하자.</p>\n<h2 id=\"과정-수료\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%95-%EC%88%98%EB%A3%8C\" aria-label=\"과정 수료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과정 수료</h2>\n<p>짧다면 짧고 길다면 긴 코드스쿼드 마스터즈 코스 과정을 끝내고 수료까지 하게 되었다. 이에 대해서는 따로 회고하는 글을 작성하려 한다. 단순히 학원, 부트캠프라는 단어로 표현할 수 없는\n너무나 많은 것을 나에게 준 곳이기 때문이다.</p>\n<h2 id=\"또다른-출발\" style=\"position:relative;\"><a href=\"#%EB%98%90%EB%8B%A4%EB%A5%B8-%EC%B6%9C%EB%B0%9C\" aria-label=\"또다른 출발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>또다른 출발</h2>\n<p>시원섭섭한 마음을 갖고 나는 또다시 앞으로 나아가야 한다. 울타리가 사라졌기에 불안하기도 하고 초조하기도 하다. 하지만 자유로움을 느끼기도 한다. 항상 그런건 아니지만\n자유로움은 불안함을 동반하는 경우가 많은 것 같다. 그리고 이 불안함을 얼마나 긍정적으로 활용하느냐에 따라서 진정한 자유로움이 완성된다고 생각한다. 움츠러들지 말자.\n앞으로 내가 접할 수많은 개발 지식과 기술들을 재미있고 즐겁게 배워나가자. 분명히 쉽지 않을 것이다. 그치만 지금 나아갈 길이 있다는 게, 그 과정에 있다는 게 얼마나\n소중하고 즐거운 일인지 인지하자.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%B5%EC%88%99%ED%95%A8-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%98%EB%B3%B5%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\">익숙함 그리고 반복의 중요성</a></li>\n<li><a href=\"#was%EC%9D%98-%EA%B5%AC%EC%A1%B0%EA%B0%80-%EC%9E%A1%ED%9E%88%EB%8B%A4\">WAS의 구조가 잡히다.</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C%EC%97%90-%EC%A0%95%EC%84%B1%EC%9D%84-%EB%93%A4%EC%9D%B4%EC%9E%90\">코드에 정성을 들이자</a></li>\n<li><a href=\"#%EA%B3%BC%EC%A0%95-%EC%88%98%EB%A3%8C\">과정 수료</a></li>\n<li><a href=\"#%EB%98%90%EB%8B%A4%EB%A5%B8-%EC%B6%9C%EB%B0%9C\">또다른 출발</a></li>\n</ul>\n</div>","excerpt":"🚪 월간회고 v1.0 너무나 빠르게 가는 시간을 조금이라도 뒤돌아보고자 작성하는 한달 단위의 회고 다른 카테고리들보다 아직 정해진 게 없다. 천천히 정리해나아가는 걸로! 최대한 러프하게 생각나는 핵심들을 적어보도록 하자! 익숙함 그리고 반복의 중요성 두번째 협업 프로젝트를 진행했다. 첫번째 협업 프로젝트 때, 1주차 기획을 파악하고 스토리, 테스크를 뽑아내고 스택 및 컨벤션을 정하는 일이 쉽지 않았었다. 헌데 이번엔\n그래도 한 번 해봤다고 뭔가 척척 진행할 수 있었다. 그리고 백엔드분들과 어떻게 소통해야하고 같은 프론트엔드 동료와 무엇을 해야할지 말하지 않아도 서로 알 수 있었다.\n덕분에 1주차가 제일 힘들었던 첫번째 프로젝트와는 다르게, 이번 1주차는 생각보다는 쉽고 즐겁게 진행할 수 있었다. WAS의 구조가 잡히다. 다양한 구조가 있겠지만, 전체적인 웹 어플리케이션의 구조가 확실히 머리에 잡히게 되었다. 위의 구조이다. 아주 간단하고 쉬운 구조이지만, 그동안 나는 프론트가 담당…","frontmatter":{"date":"July 02, 2023","title":"23년 6월","categories":"월간회고","author":"제이든","emoji":"🖼️"},"fields":{"slug":"/steadily/monthly-review/2023/6/"}},"next":{"id":"2aace91e-24b2-5e92-844e-6da4c357d4e1","html":"<h2 id=\"-성장일지-50\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-50\" aria-label=\" 성장일지 50 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎄 성장일지 5.0</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌾 (4.0)학습 키워드에서 최대한 간단한 정보 제공, 고민에서 내 경험을 자세히 적자!<br/>\n🥊 (5.0)학습 키워드는 한줄의 핵심으로만 정리, 성공/실패 일지 작성하기! 이 때, 실패의 경험은 자세히 적기!</p>\n</blockquote>\n<h2 id=\"-오늘의-학습-키워드\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%95%99%EC%8A%B5-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\" 오늘의 학습 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔑 오늘의 학습 키워드</h2>\n<h3 id=\"strict-mode-켜두고-fetching-data\" style=\"position:relative;\"><a href=\"#strict-mode-%EC%BC%9C%EB%91%90%EA%B3%A0-fetching-data\" aria-label=\"strict mode 켜두고 fetching data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>strict mode 켜두고 fetching data</h3>\n<p>strict mode를 간단히 설명하면 컴포넌트를 2번 렌더링하게 하는 것이다. 이를 통해 렌더링 중에 발생하는 여러 side effect를 찾아낼 수 있다.\n다만, 일반적인 개발 중에 렌더링이 2번 되기에 다소 귀찮은 문제가 발생한다. 예를 들면, data를 요청해서 받아온 후, 이를 state로 관리할 때이다. 해당 컴포넌트가\n2번 렌더링되면서 요청을 2번 보내게 되고 자연스럽게 state는 2번의 데이터가 반영된다. 해서 공식문서를 참고하여 이를 해결해보았다. ignore라는 flag 변수를 두어서\n렌더링 중에는 요청을 보내지 않도록 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 그냥 요청 보내는 경우</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.example.com/items'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ignore 변수를 통해 렌더링 중에는 요청을 보내지 않는다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ignore <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">startFetching</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.example.com/items'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ignore<span class=\"token punctuation\">)</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">startFetching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n    ignore <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"️-오늘의-실패\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%98%A4%EB%8A%98%EC%9D%98-%EC%8B%A4%ED%8C%A8\" aria-label=\"️ 오늘의 실패 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🩹️ 오늘의 실패</h2>\n<ul>\n<li>api 연동 실패: 우리 백엔드 서버와 api를 연동하고 싶은데, 생각보다 쉽지 않다. 같이 명세를 작성해도 개발 시에는 많은 부분들이 수정되고 바뀔 수 있다는 것을 배울 수 있었다.</li>\n</ul>\n<h2 id=\"-오늘의-성공\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EC%84%B1%EA%B3%B5\" aria-label=\" 오늘의 성공 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍖 오늘의 성공</h2>\n<ul>\n<li>상품 상세 페이지 구현!</li>\n</ul>\n<h2 id=\"-요약-및-하루-간단-회고\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%95%BD-%EB%B0%8F-%ED%95%98%EB%A3%A8-%EA%B0%84%EB%8B%A8-%ED%9A%8C%EA%B3%A0\" aria-label=\" 요약 및 하루 간단 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 요약 및 하루 간단 회고</h2>\n<p>아고… 오늘은 개발도 개발이지만 크롱과 면담이 있던 날이었다. 앞으로의 계획과 고민 그리고 취업과 관련된 이야기를 많이 나누었다. 크롱 정도의 시니어 개발자와 1대1로\n가볍게 등산하면서 대화를 할 수 있다니… 새삼스레 정말 소중한 시간이라고 느꼈다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://react.dev/learn/synchronizing-with-effects\">React 공식문서 - Escape hatches: Synchronizing with Effects</a></li>\n<li><a href=\"https://react.dev/reference/react/StrictMode\">React 공식문서 - Strict Mode</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-50\">🎄 성장일지 5.0</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%95%99%EC%8A%B5-%ED%82%A4%EC%9B%8C%EB%93%9C\">🔑 오늘의 학습 키워드</a></p>\n<ul>\n<li><a href=\"#strict-mode-%EC%BC%9C%EB%91%90%EA%B3%A0-fetching-data\">strict mode 켜두고 fetching data</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%98%A4%EB%8A%98%EC%9D%98-%EC%8B%A4%ED%8C%A8\">🩹️ 오늘의 실패</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EC%84%B1%EA%B3%B5\">🍖 오늘의 성공</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%9A%94%EC%95%BD-%EB%B0%8F-%ED%95%98%EB%A3%A8-%EA%B0%84%EB%8B%A8-%ED%9A%8C%EA%B3%A0\">📝 요약 및 하루 간단 회고</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 28, 2023","title":"230628(수)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/6/28-gl/"}},"prev":{"id":"380bae28-b5c0-54a1-9967-fc6620d8ff13","html":"<h2 id=\"-잡동사니\" style=\"position:relative;\"><a href=\"#-%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88\" aria-label=\" 잡동사니 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📦 잡동사니</h2>\n<p>하나의 키워드를 잡고 좀 편하게 정리하고 싶어 만든 <code class=\"language-text\">잡동사니</code><br/></p>\n<blockquote>\n<p>잡동사니는 조선 후기 학자 <code class=\"language-text\">안정복</code>이 편찬한 <code class=\"language-text\">잡동산이(雜同散異)</code>에서 유래된 말이다.<br/>\n잡동산이는 <code class=\"language-text\">잡기(雜記)</code>의 형태를 빌려온 책으로 구체적인 체계가 잡혀있지 않은 형식이다.<br/>\n항목이 다소 난잡하고 내용의 구분이 혼동되어있다고 한다. 🤣</p>\n</blockquote>\n<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>\n<p>이 글은 <a href=\"https://www.wanted.co.kr/jobsfeed\">원티드</a>에서 주관하는\n<a href=\"https://www.wanted.co.kr/events/pre_challenge_fe_11\">프리온보딩 프론트엔드 챌린지 7월 직접 만져보는 Next.js 해부학 교실 - CSR / SSR with Next.js</a>\n에 제출할 사전과제를 기반으로 작성한 글입니다.</p>\n<h2 id=\"️-csrclient-side-rendering이란-그리고-장단점\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-csrclient-side-rendering%EC%9D%B4%EB%9E%80-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"️ csrclient side rendering이란 그리고 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗂️ CSR(Client-side Rendering)이란? 그리고 장단점</h2>\n<p>서버와의 최초 통신에서 HTML, CSS, JS를 응답받아온 후 JS의 코드에 따라 데이터만 요청하여 <code class=\"language-text\">클라이언트의 브라우저에서 화면을 렌더링하는 방식</code><br/>\n웹 페이지가 복잡해짐에 따라 매번 페이지마다 새로운 HTML을 받아오는 방식에서 벗어나 한번에 받아온 후 동작하는 CSR 방식이 많아졌다.</p>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ol>\n<li>유저와의 인터렉션에 따라 필요한 데이터만 요청하여 받아오기 때문에 부분적으로 빠르게 인터렉션할 수 있다.</li>\n</ol>\n<ul>\n<li>서버의 부하를 줄일 수 있다는 의미이기도 하다.</li>\n</ul>\n<ol start=\"2\">\n<li>페이지를 이동할 때마다 네트워크 통신으로 HTML을 받아오는 형태가 아니기 때문에 깜빡임없이 데이터 변경이 가능하고 모바일 환경에서도 빠른 속도를 자랑한다.</li>\n<li><code class=\"language-text\">Lazy loading</code>을 지원한다.</li>\n</ol>\n<ul>\n<li>Lazy loading: 페이지 로딩 시 중요하지 않은 리소스는 나중에 로딩하는 기술 ex) 스크롤을 내렸을 때, 새로운 데이터가 보이는 것</li>\n</ul>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ol>\n<li><code class=\"language-text\">root</code> 태그만 있는 비어있는 HTML을 가져와서 JS로 렌더링하기 때문에, 크롤링봇에게 해당 웹에 대한 정보를 줄 수가 없다. 즉, SEO에 대해 최적화 하기가 어렵다.</li>\n</ol>\n<ul>\n<li>다시 말해서, CSR로 구현된 웹의 경우 검색어 최상단에 노출되기가 어렵다는 의미이다.</li>\n<li>단, 구글의 검색엔진은 JS까지 실행시켜 판단하는 검색엔진이기 때문에 예외이다.</li>\n</ul>\n<ol start=\"2\">\n<li>초기에 HTML, CSS, JS 코드를 모두 받아오기 때문에 모든 컨텐츠가 유저에게 노출되는데 시간이 걸린다.</li>\n</ol>\n<h2 id=\"️-ssrserver-side-rendering이란-그리고-장단점\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-ssrserver-side-rendering%EC%9D%B4%EB%9E%80-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"️ ssrserver side rendering이란 그리고 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗂️ SSR(Server-side Rendering)이란? 그리고 장단점</h2>\n<p>CSR과 반대로 서버에서 렌더링을 진행한다. 클라이언트가 페이지를 요청하면 서버측에서 데이터를 가져와서(주로 DB) 페이지를 구성한 후 브라우저에게 전달한다.<br>\n유저가 페이지를 이동할 때마다 서버에게 다시 HTML, CSS, JS 등의 파일을 응답받아서 보여준다.</p>\n<h3 id=\"장점-1\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-label=\"장점 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ol>\n<li>사용자가 느끼기에 CSR보다 빠르게 첫 페이지를 볼 수 있다.</li>\n<li>SEO(검색 엔진 최적화)가 좋다.</li>\n</ol>\n<h3 id=\"단점-1\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90-1\" aria-label=\"단점 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ol>\n<li>서버의 부하가 심한 편이다.</li>\n<li>개발자가 신경써야할 부분들이 CSR보다 다소 많다.</li>\n</ol>\n<h2 id=\"️-spasingle-page-application로-구성된-웹-앱에서-ssrserver-side-rendering이-필요한-이유\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-spasingle-page-application%EB%A1%9C-%EA%B5%AC%EC%84%B1%EB%90%9C-%EC%9B%B9-%EC%95%B1%EC%97%90%EC%84%9C-ssrserver-side-rendering%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"️ spasingle page application로 구성된 웹 앱에서 ssrserver side rendering이 필요한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗂️ SPA(Single Page Application)로 구성된 웹 앱에서 SSR(Server-side Rendering)이 필요한 이유?</h2>\n<p>CSR만을 이용하여 SPA를 구성하게 되면 첫 통신에서 번들된 HTML, CSS, JS를 받아와서 렌더링하기 때문에 모든 컨텐츠를 보여주는데 다소 시간이 오래 걸리게 되는 단점이 존재한다.<br/>\n또한 HTML 파일에는 JS 코드가 진입하게 될 entry root를 제외하곤 어떤 내용도 없기 때문에 검색 엔진 최적화가 좋지 않게 된다.<br/>\n이 때, 초기에 필요한 부분들만 SSR을 통해 유저에게 보여주고 그 뒤에는 CSR처럼 유저의 인터렉션에 따라 데이터를 가져오는 식으로 처리하게 되면 위의 단점들을 해결할 수 있게 된다.</p>\n<h2 id=\"️-nextjs-까보기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-nextjs-%EA%B9%8C%EB%B3%B4%EA%B8%B0\" aria-label=\"️ nextjs 까보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗂️ Next.js 까보기</h2>\n<h3 id=\"nextjs-프로젝트에서-code-classlanguage-textnpm-run-startcode를-하게-되면-어떤-코드들이-실행될까\" style=\"position:relative;\"><a href=\"#nextjs-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-code-classlanguage-textnpm-run-startcode%EB%A5%BC-%ED%95%98%EA%B2%8C-%EB%90%98%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%BD%94%EB%93%9C%EB%93%A4%EC%9D%B4-%EC%8B%A4%ED%96%89%EB%90%A0%EA%B9%8C\" aria-label=\"nextjs 프로젝트에서 code classlanguage textnpm run startcode를 하게 되면 어떤 코드들이 실행될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js 프로젝트에서 <code class=\"language-text\">npm run start</code>를 하게 되면 어떤 코드들이 실행될까?</h3>\n<p>먼저 Next.js의 repo를 가보자. 그곳에서 잘 찾아보면 <code class=\"language-text\">packages/next/src/cli/next-start.ts</code>가 있는 걸 확인할 수 있다. 즉, next로 작성된 프로젝트에서\n<code class=\"language-text\">npm run start</code>를 입력하게 되면 실행되는 코드가 이 파일에 작성되어있는 것이다.</p>\n<p>코드를 보기 전에, <code class=\"language-text\">npm run start</code>는 어떤 명력어를 실행하게 될까?</p>\n<p>이를 알아보기 위해 <code class=\"language-text\">npx create-next-app@latest</code>을 실행하여 최신 버전의 next 프로젝트를 생성해주었다. 그리고 <code class=\"language-text\">package.json</code>을 보면 아래와 같이 스크립트에 대해 정의하는 걸\n볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next dev\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next build\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next start\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next lint\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>즉, <code class=\"language-text\">npm run start</code>는 <code class=\"language-text\">next start</code>를 실행시켜주는 것이다. <code class=\"language-text\">next start</code>는 production 레벨에서 어플리케이션을 띄워준다. 우리가 리액트에서 <code class=\"language-text\">npm run start</code>하게 되면\n포트 3000번으로 우리의 앱이 띄워지게 되는 것처럼 말이다. 이 때, 주의할 점은 순수 react에서의 <code class=\"language-text\">npm run start</code>는 next에서의 <code class=\"language-text\">npm run dev</code>와 같다는 것이다.(이 둘 모두 development 레벨에서\n포트 3000번으로 앱을 띄운다.)</p>\n<p>자, 그럼 이제 한 번 코드를 봐보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token hashbang comment\">#!/usr/bin/env node</span>\n\n<span class=\"token comment\">// jayden: 뭔가 많은 것들을 import 중... 일단 무시하자</span>\n<span class=\"token keyword\">import</span> arg <span class=\"token keyword\">from</span> <span class=\"token string\">'next/dist/compiled/arg/index.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> startServer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../server/lib/start-server'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getPort<span class=\"token punctuation\">,</span> printAndExit <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../server/lib/utils'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> isError <span class=\"token keyword\">from</span> <span class=\"token string\">'../lib/is-error'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getProjectDir <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../lib/get-project-dir'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CliCommand <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../lib/commands'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> resolve <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">PHASE_PRODUCTION_SERVER</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../shared/lib/constants'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> loadConfig <span class=\"token keyword\">from</span> <span class=\"token string\">'../server/config'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> nextStart<span class=\"token operator\">:</span> <span class=\"token function-variable function\">CliCommand</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// jayden: next start 명령어 뒤에 붙일 수 있는 옵션에 대한 타입 지정같다.</span>\n  <span class=\"token keyword\">const</span> validArgs<span class=\"token operator\">:</span> arg<span class=\"token punctuation\">.</span>Spec <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Types</span>\n    <span class=\"token string-property property\">'--help'</span><span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'--port'</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'--hostname'</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'--keepAliveTimeout'</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Aliases</span>\n    <span class=\"token string-property property\">'-h'</span><span class=\"token operator\">:</span> <span class=\"token string\">'--help'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'-p'</span><span class=\"token operator\">:</span> <span class=\"token string\">'--port'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'-H'</span><span class=\"token operator\">:</span> <span class=\"token string\">'--hostname'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// jayden: 명령어 뒤의 옵션을 argv로 받고 그에 대한 어떤 객체를 만들어서 args로 초기화하는 것 같다.</span>\n  <span class=\"token keyword\">let</span> args<span class=\"token operator\">:</span> arg<span class=\"token punctuation\">.</span>Result<span class=\"token operator\">&lt;</span>arg<span class=\"token punctuation\">.</span>Spec<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    args <span class=\"token operator\">=</span> <span class=\"token function\">arg</span><span class=\"token punctuation\">(</span>validArgs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> argv <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> error<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">'ARG_UNKNOWN_OPTION'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">printAndExit</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// jayden: args 객체에서 key가 `--help`인 value가 있다면 아래의 코드를 실행한다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token string\">'--help'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      Description\n        Starts the application in production mode.\n        The application should be compiled with \\`next build\\` first.\n\n      Usage\n        $ next start &lt;dir> -p &lt;port>\n\n      &lt;dir> represents the directory of the Next.js application.\n      If no directory is provided, the current directory will be used.\n\n      Options\n        --port, -p          A port number on which to start the application\n        --hostname, -H      Hostname on which to start the application (default: 0.0.0.0)\n        --keepAliveTimeout  Max milliseconds to wait before closing inactive connections\n        --help, -h          Displays this message\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> dir <span class=\"token operator\">=</span> <span class=\"token function\">getProjectDir</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'--hostname'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// jayden: keepAliveTimeout 값에 대해서 에러처리</span>\n  <span class=\"token keyword\">const</span> keepAliveTimeoutArg<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'--keepAliveTimeout'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> keepAliveTimeoutArg <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>keepAliveTimeoutArg<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      <span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span>keepAliveTimeoutArg<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      keepAliveTimeoutArg <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printAndExit</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Invalid --keepAliveTimeout, expected a non negative number but received \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>keepAliveTimeoutArg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> keepAliveTimeout <span class=\"token operator\">=</span> keepAliveTimeoutArg <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>keepAliveTimeoutArg<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">PHASE_PRODUCTION_SERVER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>dir <span class=\"token operator\">||</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// jayden: 위의 조건들에 따라서 서버 시작</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">startServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    dir<span class=\"token punctuation\">,</span>\n    isDev<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    hostname<span class=\"token operator\">:</span> host<span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">,</span>\n    keepAliveTimeout<span class=\"token punctuation\">,</span>\n    useWorkers<span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>experimental<span class=\"token punctuation\">.</span>appDir<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> nextStart <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://web.dev/rendering-on-the-web/?hl=ko\">Rendering on the web</a></li>\n<li><a href=\"https://velog.io/@kykim_dev/WEB-12-SPA-vs-MPA-CSR-vs-SSR\">SPA vs MPA 그리고 CSR vs SSR</a></li>\n<li><a href=\"https://80000coding.oopy.io/fde38c6f-e65d-4c1a-af45-176abee40389\">CSR과 SSR 톺아보기</a></li>\n<li><a href=\"https://github.com/vercel/next.js/\">Next.js repo</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88\">📦 잡동사니</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">들어가기에 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-csrclient-side-rendering%EC%9D%B4%EB%9E%80-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%9E%A5%EB%8B%A8%EC%A0%90\">🗂️ CSR(Client-side Rendering)이란? 그리고 장단점</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-ssrserver-side-rendering%EC%9D%B4%EB%9E%80-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%9E%A5%EB%8B%A8%EC%A0%90\">🗂️ SSR(Server-side Rendering)이란? 그리고 장단점</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90-1\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90-1\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-spasingle-page-application%EB%A1%9C-%EA%B5%AC%EC%84%B1%EB%90%9C-%EC%9B%B9-%EC%95%B1%EC%97%90%EC%84%9C-ssrserver-side-rendering%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\">🗂️ SPA(Single Page Application)로 구성된 웹 앱에서 SSR(Server-side Rendering)이 필요한 이유?</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-nextjs-%EA%B9%8C%EB%B3%B4%EA%B8%B0\">🗂️ Next.js 까보기</a></p>\n<ul>\n<li><a href=\"#nextjs-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-npm-run-start%EB%A5%BC-%ED%95%98%EA%B2%8C-%EB%90%98%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%BD%94%EB%93%9C%EB%93%A4%EC%9D%B4-%EC%8B%A4%ED%96%89%EB%90%A0%EA%B9%8C\">Next.js 프로젝트에서 <code class=\"language-text\">npm run start</code>를 하게 되면 어떤 코드들이 실행될까?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 02, 2023","title":"CSR/SSR with Next.js","categories":"잡동사니","author":"제이든","emoji":"📦"},"fields":{"slug":"/from-time-to-time/oddments/csr-ssr-with-nextjs/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/steadily/monthly-review/2023/6/","nextSlug":"/steadily/growth-diary/2023/6/28-gl/","prevSlug":"/from-time-to-time/oddments/csr-ssr-with-nextjs/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}