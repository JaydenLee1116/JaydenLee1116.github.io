{"componentChunkName":"component---src-templates-blog-template-js","path":"/from-time-to-time/study/ssok-ssok-functional/ch-6/","result":{"data":{"cur":{"id":"bbabcfe6-ab1a-5157-9481-aa6ff17a5ff1","html":"<h1 id=\"-쏙쏙-들어오는-함수형-코딩---심플한-코드로-복잡한-소프트웨어-길들이기\" style=\"position:relative;\"><a href=\"#-%EC%8F%99%EC%8F%99-%EB%93%A4%EC%96%B4%EC%98%A4%EB%8A%94-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%94%A9---%EC%8B%AC%ED%94%8C%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B8%B8%EB%93%A4%EC%9D%B4%EA%B8%B0\" aria-label=\" 쏙쏙 들어오는 함수형 코딩   심플한 코드로 복잡한 소프트웨어 길들이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖍 쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</h1>\n<p>이 글은 <a href=\"https://product.kyobobook.co.kr/detail/S000001952246\">쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</a>를 읽고 작성한 글입니다.\n함수형도 함수형이지만, 이 책을 통해 좀더 깔끔하고 직관적인 코드를 작성할 수 있을 것이란 팀원들의 의견을 토대로 이번 스터디 서적으로 선정하였습니다.</p>\n<h2 id=\"chap-6-변경-가능한-데이터-구조를-가진-언어에서-불변성-유지하기feat-js\" style=\"position:relative;\"><a href=\"#chap-6-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EA%B0%80%EC%A7%84-%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C-%EB%B6%88%EB%B3%80%EC%84%B1-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0feat-js\" aria-label=\"chap 6 변경 가능한 데이터 구조를 가진 언어에서 불변성 유지하기feat js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chap 6. 변경 가능한 데이터 구조를 가진 언어에서 불변성 유지하기(feat. JS)</h2>\n<ul>\n<li>데이터가 바뀌지 않도록 <code class=\"language-text\">카피-온-라이트</code> 적용하기</li>\n<li>깊이 중첩된 데이터에도 <code class=\"language-text\">카피-온-라이트</code> 적용하기</li>\n<li><code class=\"language-text\">불변성</code> 이해하기</li>\n</ul>\n<h3 id=\"1-동작을-읽기-쓰기-혹은-둘-다로-분류하기\" style=\"position:relative;\"><a href=\"#1-%EB%8F%99%EC%9E%91%EC%9D%84-%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0-%ED%98%B9%EC%9D%80-%EB%91%98-%EB%8B%A4%EB%A1%9C-%EB%B6%84%EB%A5%98%ED%95%98%EA%B8%B0\" aria-label=\"1 동작을 읽기 쓰기 혹은 둘 다로 분류하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 동작을 읽기, 쓰기 혹은 둘 다로 분류하기</h3>\n<ul>\n<li><code class=\"language-text\">읽기(Read)</code>: 데이터를 바꾸지 않고 정보를 꺼내는 것\n<ul>\n<li>인자에만 의존해서 정보를 가져오는 읽기는 <code class=\"language-text\">순수 함수</code> 즉, <code class=\"language-text\">계산</code>이 된다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">쓰기(Write)</code>: 데이터를 바꾸는 것\n<ul>\n<li>변경되는 데이터가 어디에서 사용될지 알 수 없기 때문에 <code class=\"language-text\">불변성 원칙(카피-온-라이트)</code>이 필요하다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">읽기와 쓰기 둘 다</code>: 데이터를 바꾸면서 정보를 꺼내는 것</li>\n</ul>\n<h3 id=\"2-카피-온-라이트-원칙-세-단계\" style=\"position:relative;\"><a href=\"#2-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8-%EC%9B%90%EC%B9%99-%EC%84%B8-%EB%8B%A8%EA%B3%84\" aria-label=\"2 카피 온 라이트 원칙 세 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 카피-온-라이트 원칙 세 단계</h3>\n<ol>\n<li>복사본 만들기</li>\n<li>복사본 변경하기</li>\n<li>복사본 반환하기</li>\n</ol>\n<h4 id=\"2-1-배열의-카피-온-라이트\" style=\"position:relative;\"><a href=\"#2-1-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8\" aria-label=\"2 1 배열의 카피 온 라이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1) 배열의 카피-온-라이트</h4>\n<ul>\n<li>push() 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAddedArray</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  newArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> <span class=\"token function\">getAddedArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4]</span></code></pre></div>\n<h4 id=\"2-2-객체의-카피-온-라이트\" style=\"position:relative;\"><a href=\"#2-2-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8\" aria-label=\"2 2 객체의 카피 온 라이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2) 객체의 카피-온-라이트</h4>\n<ul>\n<li>Object.assign() 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAddedObject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  newObject<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newObject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"3-불변-데이터-구조를-읽는-것은-계산이다\" style=\"position:relative;\"><a href=\"#3-%EB%B6%88%EB%B3%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%9D%BD%EB%8A%94-%EA%B2%83%EC%9D%80-%EA%B3%84%EC%82%B0%EC%9D%B4%EB%8B%A4\" aria-label=\"3 불변 데이터 구조를 읽는 것은 계산이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 불변 데이터 구조를 읽는 것은 계산이다.</h3>\n<ul>\n<li>변경 가능한 데이터를 읽는 것 => <code class=\"language-text\">액션</code></li>\n<li><code class=\"language-text\">쓰기</code>는 데이터를 변경 가능한 구조로 만든다.</li>\n<li>어떤 데이터에 <code class=\"language-text\">쓰기가 없다면</code> 그 데이터는 <code class=\"language-text\">불변 데이터</code>이다.</li>\n<li>불변 데이터를 읽는 것 => <code class=\"language-text\">계산</code></li>\n<li><code class=\"language-text\">쓰기</code>를 <code class=\"language-text\">읽기</code>로 바꾸면 <code class=\"language-text\">액션</code>은 줄고 <code class=\"language-text\">계산</code>이 많아진다.</li>\n</ul>\n<h3 id=\"4-불변성도-좋지만-당연히-변경-가능한-데이터는-필요하다\" style=\"position:relative;\"><a href=\"#4-%EB%B6%88%EB%B3%80%EC%84%B1%EB%8F%84-%EC%A2%8B%EC%A7%80%EB%A7%8C-%EB%8B%B9%EC%97%B0%ED%9E%88-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4\" aria-label=\"4 불변성도 좋지만 당연히 변경 가능한 데이터는 필요하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) 불변성도 좋지만, 당연히 변경 가능한 데이터는 필요하다.</h3>\n<p>ex) 장바구니가 변경 가능하지 않다면, 장바구니에 물건을 담을 수 없다.</p>\n<h3 id=\"5-불변-데이터는-느리지-않다\" style=\"position:relative;\"><a href=\"#5-%EB%B6%88%EB%B3%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EB%8A%90%EB%A6%AC%EC%A7%80-%EC%95%8A%EB%8B%A4\" aria-label=\"5 불변 데이터는 느리지 않다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) 불변 데이터는 느리지 않다.</h3>\n<p>일반적으로 불변 데이터를 만드는 건, 기존 데이터를 변경하는 것보다는 더 많은 메모리를 사용하고 느리다.</p>\n<p>다만,</p>\n<ul>\n<li>느린 부분은 언제든 최적화가 가능하다.</li>\n<li>현대 대부분의 언어의 가비지 컬렉터는 불변 데이터를 처리하는 데 최적화되어 있다.</li>\n<li>우리의 생각보다 많이 복사하지 않는다.\n<ul>\n<li>ex) [1, 2, 3, …, 100]이란 배열을 복사 => 1부터 100까지의 숫자는 이미 메모리에 존재하기 때문에 복사하지 않는다. 단지\n배열의 참조만 복사한다.(100개의 숫자를 복사할 것 같지만, 아니라는 이야기)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-정리\" style=\"position:relative;\"><a href=\"#6-%EC%A0%95%EB%A6%AC\" aria-label=\"6 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6) 정리</h3>\n<ul>\n<li>함수형 프로그래밍에서 <code class=\"language-text\">불변 데이터</code>는 필요하다.</li>\n<li>변경 가능한 데이터에 쓰기를 하는 것은 <code class=\"language-text\">계산</code>이 아니라 <code class=\"language-text\">액션</code>이다.</li>\n<li><code class=\"language-text\">카피-온-라이트</code>: 데이터를 불변형으로 유지할 수 있는 원칙. 즉, 복사본을 만들고 복사본을 변경한 후 복사본을 반환하는 것.</li>\n</ul>\n<blockquote>\n<p>중첩 데이터(nested data): 데이터 구조 안에 데이터 구조가 있는 데이터<br/>\n얕은 복사(shallow copy): 데이터 구조 안에 있는 데이터 구조는 복사하지 않고 참조만 복사하는 것(최상위 데이터 구조만 복사한다.)<br/>\n구조적 공유(structural sharing): 두 개의 중첩된 데이터 구조에서 그 내부 데이터가 같은 데이터를 참조하는 경우</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#chap-6-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EA%B0%80%EC%A7%84-%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C-%EB%B6%88%EB%B3%80%EC%84%B1-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0feat-js\">Chap 6. 변경 가능한 데이터 구조를 가진 언어에서 불변성 유지하기(feat. JS)</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EB%8F%99%EC%9E%91%EC%9D%84-%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0-%ED%98%B9%EC%9D%80-%EB%91%98-%EB%8B%A4%EB%A1%9C-%EB%B6%84%EB%A5%98%ED%95%98%EA%B8%B0\">1) 동작을 읽기, 쓰기 혹은 둘 다로 분류하기</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8-%EC%9B%90%EC%B9%99-%EC%84%B8-%EB%8B%A8%EA%B3%84\">2) 카피-온-라이트 원칙 세 단계</a></p>\n<ul>\n<li><a href=\"#2-1-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8\">2-1) 배열의 카피-온-라이트</a></li>\n<li><a href=\"#2-2-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8\">2-2) 객체의 카피-온-라이트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EB%B6%88%EB%B3%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%9D%BD%EB%8A%94-%EA%B2%83%EC%9D%80-%EA%B3%84%EC%82%B0%EC%9D%B4%EB%8B%A4\">3) 불변 데이터 구조를 읽는 것은 계산이다.</a></p>\n</li>\n<li>\n<p><a href=\"#4-%EB%B6%88%EB%B3%80%EC%84%B1%EB%8F%84-%EC%A2%8B%EC%A7%80%EB%A7%8C-%EB%8B%B9%EC%97%B0%ED%9E%88-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4\">4) 불변성도 좋지만, 당연히 변경 가능한 데이터는 필요하다.</a></p>\n</li>\n<li>\n<p><a href=\"#5-%EB%B6%88%EB%B3%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EB%8A%90%EB%A6%AC%EC%A7%80-%EC%95%8A%EB%8B%A4\">5) 불변 데이터는 느리지 않다.</a></p>\n</li>\n<li>\n<p><a href=\"#6-%EC%A0%95%EB%A6%AC\">6) 정리</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🖍 쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기 이 글은 쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기를 읽고 작성한 글입니다.\n함수형도 함수형이지만, 이 책을 통해 좀더 깔끔하고 직관적인 코드를 작성할 수 있을 것이란 팀원들의 의견을 토대로 이번 스터디 서적으로 선정하였습니다. Chap 6. 변경 가능한 데이터 구조를 가진 언어에서 불변성 유지하기(feat. JS) 데이터가 바뀌지 않도록  적용하기 깊이 중첩된 데이터에도  적용하기  이해하기 1) 동작을 읽기, 쓰기 혹은 둘 다로 분류하기 : 데이터를 바꾸지 않고 정보를 꺼내는 것 인자에만 의존해서 정보를 가져오는 읽기는  즉, 이 된다. : 데이터를 바꾸는 것 변경되는 데이터가 어디에서 사용될지 알 수 없기 때문에 이 필요하다. : 데이터를 바꾸면서 정보를 꺼내는 것 2) 카피-온-라이트 원칙 세 단계 복사본 만들기 복사본 변경하기 복사본 반환하기 2-1) 배열의 카피-온-라…","frontmatter":{"date":"July 30, 2023","title":"쏙쏙 들어오는 함수형 코딩 Chapter 6","categories":"스터디 책","author":"제이든","emoji":"🖍️"},"fields":{"slug":"/from-time-to-time/study/ssok-ssok-functional/ch-6/"}},"next":{"id":"3b444bc0-675b-587b-90ec-a3402b65203d","html":"<h1 id=\"-쏙쏙-들어오는-함수형-코딩---심플한-코드로-복잡한-소프트웨어-길들이기\" style=\"position:relative;\"><a href=\"#-%EC%8F%99%EC%8F%99-%EB%93%A4%EC%96%B4%EC%98%A4%EB%8A%94-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%94%A9---%EC%8B%AC%ED%94%8C%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B8%B8%EB%93%A4%EC%9D%B4%EA%B8%B0\" aria-label=\" 쏙쏙 들어오는 함수형 코딩   심플한 코드로 복잡한 소프트웨어 길들이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖍 쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</h1>\n<p>이 글은 <a href=\"https://product.kyobobook.co.kr/detail/S000001952246\">쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</a>를 읽고 작성한 글입니다.\n함수형도 함수형이지만, 이 책을 통해 좀더 깔끔하고 직관적인 코드를 작성할 수 있을 것이란 팀원들의 의견을 토대로 이번 스터디 서적으로 선정하였습니다.</p>\n<h2 id=\"chap-5-더-좋은-액션-만들기\" style=\"position:relative;\"><a href=\"#chap-5-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EC%95%A1%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"chap 5 더 좋은 액션 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chap 5. 더 좋은 액션 만들기</h2>\n<ul>\n<li>암묵적 입력과 출력을 제거해서 재사용하기 좋은 코드 만들기</li>\n<li>복잡하게 엉킨 코드를 풀고 더 좋은 코드 만들기</li>\n</ul>\n<p>모든 액션을 없앨 수는 없다. 액션은 필요하다. 하지만 암묵적 입력과 출력을 줄임으로써 액션을 최소화할 수 있다.</p>\n<h3 id=\"1-비즈니스-요구사항과-설계-고려하기\" style=\"position:relative;\"><a href=\"#1-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%EA%B3%BC-%EC%84%A4%EA%B3%84-%EA%B3%A0%EB%A0%A4%ED%95%98%EA%B8%B0\" aria-label=\"1 비즈니스 요구사항과 설계 고려하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 비즈니스 요구사항과 설계 고려하기</h3>\n<ul>\n<li>기계적인 리팩토링만이 항상 최선의 구조를 만들어주진 않는다.</li>\n<li>비즈니스 요구사항을 고려해야 한다.</li>\n</ul>\n<p>비즈니스 요구 사항: 장바구니에 담긴 제품을 주문할 때 무료 배송인지 확인하는 기능</p>\n<p>아래 함수는 비즈니스 요구사항인 <code class=\"language-text\">장바구니에 담긴 제품</code>에 대한 내용 없이 <code class=\"language-text\">총액</code>과 <code class=\"language-text\">무료배송</code>에 대한 내용만을 가지고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFreeShipping</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> itemPrice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> total <span class=\"token operator\">+</span> itemPrice <span class=\"token operator\">>=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이를 좀더 비즈니스 로직에 맞게 개선하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFreeShipping</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cart</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getTotalPriceFromCart</span><span class=\"token punctuation\">(</span>cart<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getTotalPriceFromCart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cart</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> cart<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> result <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사실 위의 경우, <code class=\"language-text\">함수의 동작</code>을 변경했기 때문에 엄밀히 말하면 <code class=\"language-text\">리팩토링</code>이라고 할 수 없다.</p>\n<blockquote>\n<p>Tip1) 리팩토링(함수 분리)을 하다보면 코드가 더 길어지기도 하는데, 괜찮은건가?<br/></p>\n<ul>\n<li>함수를 분리함으로써 코드의 가독성이 높아지고, 재사용성이 높아지기 때문에 코드의 길이가 늘어나더라도 좋은 코드라고 할 수 있다.<br/>\nTip2) 불변성 유지를 위해 객체를 복사하는 게 오히려 비용을 많이 쓰지 않나?<br/></li>\n<li>굳이 비교하자면 기존 객체를 변경하는 방식보다는 비용이 더 든다. 하지만 현대의 언어 런타임과 가비지 컬렉터는 이를 최적화하고 있기 때문에 큰 문제가 되지 않는다. 또한, 이에 반해 불변성을 유지했을 때 얻는 이점이 너무 크다.</li>\n</ul>\n</blockquote>\n<h3 id=\"2-압묵적-입력과-출력은-적으면-적을수록-좋다\" style=\"position:relative;\"><a href=\"#2-%EC%95%95%EB%AC%B5%EC%A0%81-%EC%9E%85%EB%A0%A5%EA%B3%BC-%EC%B6%9C%EB%A0%A5%EC%9D%80-%EC%A0%81%EC%9C%BC%EB%A9%B4-%EC%A0%81%EC%9D%84%EC%88%98%EB%A1%9D-%EC%A2%8B%EB%8B%A4\" aria-label=\"2 압묵적 입력과 출력은 적으면 적을수록 좋다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 압묵적 입력과 출력은 적으면 적을수록 좋다!</h3>\n<ul>\n<li>암묵적 입력: 전역변수를 읽는 등 <code class=\"language-text\">인자 외의 다른 모든 입력값</code></li>\n<li>암묵적 출력: console.log(), DOM 변경, 전역변수 변경 등 <code class=\"language-text\">반환값 외의 다른 모든 출력값</code></li>\n</ul>\n<p>어떤 함수(컴포넌트)에 암묵적 입력과 출력이 있다면, 다른 함수(컴포넌트)와 강하게 연결된 컴포넌트가 된다. 이는 재사용성을 떨어뜨리고, 테스트하기 어렵게 만든다.\n또한 다른 곳에서 사용할 수 없기 때문에 <code class=\"language-text\">모듈</code>이라고 할 수 없다. 암묵적인 것들을 명시적으로 변경함으로써 모듈화할 수 있다.</p>\n<blockquote>\n<p>계산: 암묵적 입력과 출력이 없는 함수 => 모듈화 가능 및 테스트하기 좋다.</p>\n</blockquote>\n<h3 id=\"3-설계는-엉켜있는-코드를-푸는-것이다\" style=\"position:relative;\"><a href=\"#3-%EC%84%A4%EA%B3%84%EB%8A%94-%EC%97%89%EC%BC%9C%EC%9E%88%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%91%B8%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4\" aria-label=\"3 설계는 엉켜있는 코드를 푸는 것이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 설계는 엉켜있는 코드를 푸는 것이다.</h3>\n<ul>\n<li>함수를 사용하면 자연스럽게 관심사를 분리할 수 있다.</li>\n<li>함수는 인자와 반환값을을 사용하는 방법을 분리한다.(너무도 자연스럽게 input과 output을 나누게 되니까)</li>\n<li>때로는 함수를 합치고 싶을 수 있다. 그러나 조합하는 것은 언제든 쉽게 할 수 있지만, 분리하는 것은 어렵다. 즉, 가능하면 함수를 분리해두는 것이 더 좋다.</li>\n</ul>\n<h4 id=\"함수를-작게-분리해두었을-때의-이점\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9E%91%EA%B2%8C-%EB%B6%84%EB%A6%AC%ED%95%B4%EB%91%90%EC%97%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EC%9D%B4%EC%A0%90\" aria-label=\"함수를 작게 분리해두었을 때의 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수를 작게 분리해두었을 때의 이점</h4>\n<ol>\n<li>재사용하기 쉽다.</li>\n<li>유지보수하기 쉽다.</li>\n<li>테스트하기 쉽다.</li>\n</ol>\n<h3 id=\"4-패턴-빼내기유틸-함수-만들기\" style=\"position:relative;\"><a href=\"#4-%ED%8C%A8%ED%84%B4-%EB%B9%BC%EB%82%B4%EA%B8%B0%EC%9C%A0%ED%8B%B8-%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"4 패턴 빼내기유틸 함수 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) 패턴 빼내기(유틸 함수 만들기)</h3>\n<p>만약 아래와 같은 함수가 존재한다고 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cart<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newCart <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>cart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  newCart<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newCart<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>잘 생각해보자. 위의 함수는 과연 <code class=\"language-text\">cart(장바구니)</code>에만 한정된 함수인가??? 아니다. 새로운 배열(cart)에 새로운 값(item)을 추가하는 <code class=\"language-text\">유틸 함수</code>이다. 따라서 아래와 같이 변경해주는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  newArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이로써 의미적으로 좀더 다양한 곳에서 활용할 수 있는 <code class=\"language-text\">유틸 함수</code>를 만들었다.</p>\n<blockquote>\n<p>Tip1) 코드에서 비즈니스 로직은 어떻게 구분할 수 있는가?<br/></p>\n<ul>\n<li>예를 들어 <code class=\"language-text\">장바구니 기능을 담당하는 코드</code>는 대부분의 전자상거래 서비스에서 공통적으로 사용된다. 즉, 그 서비스만의 비즈니스 로직이라고 볼 수 없다.<br/></li>\n<li>반면 <code class=\"language-text\">총 가격이 50,000원이 넘어갈 때는 배송비가 무료</code>라는 기능은 그 서비스만의 로직이다. 즉, 그 서비스만의 비즈니스 로직이라고 볼 수 있다.<br/></li>\n<li>일반적으로 <code class=\"language-text\">비즈니스 로직</code>을 담당하는 코드는 더 자주 바뀐다.(기획에 따라서 언제든 변경되니까) 반면에 유틸 함수는 그렇지 않다.</li>\n</ul>\n</blockquote>\n<h3 id=\"5-정리\" style=\"position:relative;\"><a href=\"#5-%EC%A0%95%EB%A6%AC\" aria-label=\"5 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) 정리</h3>\n<ul>\n<li>일반적으로 암묵적 입력과 출력은 명시적 입력과 출력인 <code class=\"language-text\">인자와 리턴값로 바꿔주는 게 좋다.</code></li>\n<li>코드를 설계하는 것은 엉켜있는 것을 푸는 것이다. 최대한 많이 풀어두면 언제든 쉽게 조합할 수 있다.</li>\n<li>엉켜있는 것을 풀어 각 함수가 각자 하나의 책임, 역할을 갖게 하면 개념을 기준으로 쉽게 코드를 구성할 수 있다.(ex. 장바구니 기능, 배송비 기능, 할인 기능, 유틸 함수 등)</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#chap-5-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EC%95%A1%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\">Chap 5. 더 좋은 액션 만들기</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%EA%B3%BC-%EC%84%A4%EA%B3%84-%EA%B3%A0%EB%A0%A4%ED%95%98%EA%B8%B0\">1) 비즈니스 요구사항과 설계 고려하기</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EC%95%95%EB%AC%B5%EC%A0%81-%EC%9E%85%EB%A0%A5%EA%B3%BC-%EC%B6%9C%EB%A0%A5%EC%9D%80-%EC%A0%81%EC%9C%BC%EB%A9%B4-%EC%A0%81%EC%9D%84%EC%88%98%EB%A1%9D-%EC%A2%8B%EB%8B%A4\">2) 압묵적 입력과 출력은 적으면 적을수록 좋다!</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%84%A4%EA%B3%84%EB%8A%94-%EC%97%89%EC%BC%9C%EC%9E%88%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%91%B8%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4\">3) 설계는 엉켜있는 코드를 푸는 것이다.</a></p>\n<ul>\n<li><a href=\"#%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9E%91%EA%B2%8C-%EB%B6%84%EB%A6%AC%ED%95%B4%EB%91%90%EC%97%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EC%9D%B4%EC%A0%90\">함수를 작게 분리해두었을 때의 이점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%ED%8C%A8%ED%84%B4-%EB%B9%BC%EB%82%B4%EA%B8%B0%EC%9C%A0%ED%8B%B8-%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\">4) 패턴 빼내기(유틸 함수 만들기)</a></p>\n</li>\n<li>\n<p><a href=\"#5-%EC%A0%95%EB%A6%AC\">5) 정리</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 29, 2023","title":"쏙쏙 들어오는 함수형 코딩 Chapter 5","categories":"스터디 책","author":"제이든","emoji":"🖍️"},"fields":{"slug":"/from-time-to-time/study/ssok-ssok-functional/ch-5/"}},"prev":{"id":"a7f4a3b6-5ff2-5e86-a037-f24d2c5a4e12","html":"<h2 id=\"-잡동사니\" style=\"position:relative;\"><a href=\"#-%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88\" aria-label=\" 잡동사니 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📦 잡동사니</h2>\n<p>하나의 키워드를 잡고 좀 편하게 정리하고 싶어 만든 <code class=\"language-text\">잡동사니</code><br/></p>\n<blockquote>\n<p>잡동사니는 조선 후기 학자 <code class=\"language-text\">안정복</code>이 편찬한 <code class=\"language-text\">잡동산이(雜同散異)</code>에서 유래된 말이다.<br/>\n잡동산이는 <code class=\"language-text\">잡기(雜記)</code>의 형태를 빌려온 책으로 구체적인 체계가 잡혀있지 않은 형식이다.<br/>\n항목이 다소 난잡하고 내용의 구분이 혼동되어있다고 한다. 🤣</p>\n</blockquote>\n<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>\n<p>이 글은 <a href=\"https://www.wanted.co.kr/jobsfeed\">원티드</a>에서 주관하는\n<a href=\"https://www.wanted.co.kr/events/pre_challenge_fe_12\">프리온보딩 프론트엔드 챌린지 8월 - 리액트 리팩토링 실전가이드: 테스트부터 최적화까지</a>\n에 제출할 사전과제를 기반으로 작성한 글입니다.</p>\n<h2 id=\"️-1-테스트\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-1-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"️ 1 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗂️ 1) 테스트</h2>\n<h3 id=\"1-1-유닛테스트-vs-통합테스트-vs-e2e테스트를-비교하여-설명해주세요\" style=\"position:relative;\"><a href=\"#1-1-%EC%9C%A0%EB%8B%9B%ED%85%8C%EC%8A%A4%ED%8A%B8-vs-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-vs-e2e%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%B9%84%EA%B5%90%ED%95%98%EC%97%AC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"1 1 유닛테스트 vs 통합테스트 vs e2e테스트를 비교하여 설명해주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1) 유닛테스트 vs 통합테스트 vs E2E테스트를 비교하여 설명해주세요</h3>\n<p>유닛테스트</p>\n<ul>\n<li>실행 가능한 가장 작은 단위의 소프트웨어(주로 <code class=\"language-text\">함수</code>)를 테스트</li>\n<li>일반적으로 함수, class의 method 단위로 진행한다.</li>\n<li>가장 작은 단위를 테스트하는만큼 좀더 직관적이고 빠른 테스트가 가능하다.</li>\n<li>사실상 테스트의 기본이라고 할 수 있다.</li>\n<li>JS 진영에서는 주로 <code class=\"language-text\">Jest</code>를 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// sum.test.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'더하기'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1과 2를 더하면 3이 반환된다.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>통합테스트</p>\n<ul>\n<li>유닛테스트보다는 큰 단위의 소프트웨어를 테스트</li>\n<li>개발자가 변경할 수 없는 외부 의존성을 가진 모듈을 테스트할 때 사용한다.\n<ul>\n<li>ex) DB에 접근하는 것, 다른 모듈을 import 하는 것, 외부 API를 호출하는 것 등</li>\n</ul>\n</li>\n<li>테스트의 범위가 넓어지기 때문에 유닛테스트보다 에러 검출이 어렵다.</li>\n<li>사실상 유닛테스트의 확장판이라고 할 수 있다.</li>\n<li>JS 진영에서는 주로 <code class=\"language-text\">Jest</code>를 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// sum.test.js</span>\n\n<span class=\"token keyword\">import</span> sum <span class=\"token keyword\">from</span> <span class=\"token string\">'./sum'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 외부의 라이브러리에서 가져온 함수라고 생각하자</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'더하기'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1과 2를 더하면 3이 반환된다.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>E2E테스트</p>\n<ul>\n<li>End to End 테스트의 약자로, 사용자의 시점에서 테스트를 진행한다.</li>\n<li>소프트웨어의 내부 코드 구조를 테스트하기보단 비즈니스쪽에 초점을 두고 사용자가 사용하는 관점에서 동작이 잘 되는지를 테스트한다.</li>\n<li>Acceptance Test(인수 테스트), UI Test라고도 불린다.</li>\n<li>JS 진영에서는 주로 <code class=\"language-text\">Cypress</code>를 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// sum.spec.js</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'더하기'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1과 2를 더하면 3이 반환된다.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[name=\"a\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[name=\"b\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button[type=\"submit\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div[name=\"result\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.text'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"1-2-리액트-테스트에-사용되는-도구들을-비교하여-설명해주세요\" style=\"position:relative;\"><a href=\"#1-2-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EB%8F%84%EA%B5%AC%EB%93%A4%EC%9D%84-%EB%B9%84%EA%B5%90%ED%95%98%EC%97%AC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"1 2 리액트 테스트에 사용되는 도구들을 비교하여 설명해주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2) 리액트 테스트에 사용되는 도구들을 비교하여 설명해주세요</h3>\n<h4 id=\"테스트를-진행한다는-것은\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%9C%EB%8B%A4%EB%8A%94-%EA%B2%83%EC%9D%80\" aria-label=\"테스트를 진행한다는 것은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트를 진행한다는 것은</h4>\n<p>테스트를 진행하는 방법은 크게 2가지가 있다.</p>\n<ol>\n<li>HTML 페이지를 만들고 JS 테스트 코드를 작성하여 브라우저에서 직접 테스트를 진행하는 방법</li>\n<li>Headless 브라우저를 사용하여 브라우저를 띄우지 않고 테스트를 진행하는 방법\n<ul>\n<li>Headless 브라우저: 브라우저의 화면을 띄우지 않고 브라우저의 기능을 사용할 수 있는 브라우저(주로 브라우저의 Headless mode를 사용한다.)</li>\n<li>우리가 일반적으로 사용하는 크롬, 파이어폭스 등의 브라우저는 Headful 브라우저라고 한다.</li>\n</ul>\n</li>\n<li>브라우저가 아닌 Node.js 환경에서 테스트를 진행하는 방법 => 당연히 직접 렌더링을 할 수는 없고 jsdom과 같은 가상 DOM(혹은 가상 브라우저)를 사용한다.\n<ul>\n<li>이 때, 브라우저의 Headless mode와는 다르다. Headless mode는 실제 브라우저를 사용하지만 브라우저의 화면을 띄우지 않는 것이다.</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>3번의 방법을 추천한다. 또한, 일반적으로 3번의 방법이 자주 사용된다.</p>\n</blockquote>\n<h4 id=\"테스팅-툴-in-js\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8C%85-%ED%88%B4-in-js\" aria-label=\"테스팅 툴 in js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스팅 툴 in JS</h4>\n<p>테스팅 툴들의 종류는 매우 많다. 하나의 기능만을 제공하는 것들부터 여러 기능을 조합해서 제공하는 것들까지 말이다. 보통은 후자의 테스팅 툴을 사용한다.</p>\n<h2 id=\"️-최적화\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"️ 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗂️ 최적화</h2>\n<h3 id=\"cdncontent-distributed-network에-대해-설명해주세요\" style=\"position:relative;\"><a href=\"#cdncontent-distributed-network%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"cdncontent distributed network에 대해 설명해주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CDN(Content Distributed Network)에 대해 설명해주세요</h3>\n<ul>\n<li>전세계 여러 지역에 분산된 서버 네트워크로 유저에게 웹사이트 콘텐츠를 효율적이고 빠르게 전달하는 역할을 한다.</li>\n<li>웹사이트의 트래픽을 처리하고 데이터 로딩 시간을 최소화하기 위해 서버들이 여러 곳에 분산 배치되어 있다.\n<ul>\n<li>일반적으로 유저가 웹사이트에 엑세스하려면 해당 웹사이트의 원격 호스트 서버로부터 정보를 가져와야하는데, 거리가 멀수록 더 많은 시간이 소모된다.</li>\n</ul>\n</li>\n<li>CDN은 웹사이트의 콘텐츠를 여러 지역에 위치한 여러 서버에 복제하여, 유저가 웹사이트에 접속할 때 가장 가까운 서버에서 콘텐츠를 제공한다.\n<ul>\n<li>전송 시간이 줄어든다.</li>\n<li>웹사이트의 로딩 시간이 단축된다.</li>\n<li>트래픽이 분산되어 원격 호스트 서버의 부하를 줄일 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"web-vitals에-대해-설명해주세요\" style=\"position:relative;\"><a href=\"#web-vitals%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"web vitals에 대해 설명해주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Vitals에 대해 설명해주세요</h3>\n<ul>\n<li>UX(사용자 경험)를 평가하고 개선하기 위해 사용되는 웹 성능 측정 지표</li>\n<li>Google에서 제공하는 Web Vitals는 웹 페이지의 로딩 속도, 상호작용 가능성, 시각정 안정성 등을 측정하여 웹 페이지의 품질을 평가하고 개선하는 데 도움을 준다.</li>\n</ul>\n<p>크게 3가지 지표가 있다.</p>\n<h4 id=\"largest-contentful-paintlcp\" style=\"position:relative;\"><a href=\"#largest-contentful-paintlcp\" aria-label=\"largest contentful paintlcp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Largest Contentful Paint(LCP)</h4>\n<ul>\n<li>유저가 웹 페이지를 처음으로 볼 때 <code class=\"language-text\">가장 큰 콘텐츠 요소가 화면에 표시되는 시간</code></li>\n<li>일반적으로 이미지나 텍스트 블록과 같은 대형 요소가 가장 큰 콘텐츠가 된다.</li>\n<li>좋은 UX를 위해서는 LCP가 웹 페이지의 로딩 시간 내에 발생해야 하며, 2.5초 이내로 완료되는 것이 권장된다.</li>\n</ul>\n<h4 id=\"first-input-delayfid\" style=\"position:relative;\"><a href=\"#first-input-delayfid\" aria-label=\"first input delayfid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First Input Delay(FID)</h4>\n<ul>\n<li>웹 페이지가 로딩된 후, 유저의 첫 번째 상호작용(클릭, 터치 등)과 실제로 브라우저가 해당 상호작용에 응답하는 시간</li>\n<li>웹 페이지가 얼마나 빠르게 대화형으로 작동하는지 나타내며, 유저가 페이지와 상호작용하기까지 느끼는 지연 시간을 평가한다.</li>\n<li>좋은 UX를 위해서는 FID가 100ms 미만이 되도록 최적화하는 것이 권장된다.</li>\n</ul>\n<h4 id=\"cumulative-layout-shiftcls\" style=\"position:relative;\"><a href=\"#cumulative-layout-shiftcls\" aria-label=\"cumulative layout shiftcls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cumulative Layout Shift(CLS)</h4>\n<ul>\n<li>웹 페이지의 로딩된 동안 콘텐츠의 레이아웃 변화에 따른 시각적 안정성을 측정한다.</li>\n<li>유저가 버튼을 클릭하거나 이미지가 동적으로 로드되는 경우 페이지의 레이아웃이 변경될 수 있다. 이 때, 레이아웃의 변화가 사용자 경험에 부정적인 영향을 미치지 않도록 최적화하는 것이 중요하다.</li>\n<li>좋은 UX를 위해서는 CLS가 0.1 미만이 되도록 최적화하는 것이 권장된다.\n<ul>\n<li>CLS에 대한 점수 산출 방법은 <a href=\"https://web.dev/i18n/ko/cls/#layout-shift-score\">CLS 점수 산출 방법</a>을 참고하자!</li>\n<li>정말 단순하게 말하면 <code class=\"language-text\">레이아웃 변화가 일어날 때마다 변화된 요소의 크기와 위치를 곱한 값</code>을 모두 더한 것이다.</li>\n</ul>\n</li>\n</ul>\n<p>Web Vitals는 웹 페이지 성능 측정을 위해 Chrome 브라우저와 다른 성능 측정 도구들에서 사용할 수 있다.\nGoogle Search Console에서 웹 페이지의 Web Vitals 데이터를 확인하고 개선 방안을 제시해 줍니다. 이러한 측정 지표를 바탕으로 웹 개발자들은 사용자 경험을 향상시키고 웹 페이지의 성능을 최적화하는 작업을 수행할 수 있습니다.</p>\n<h3 id=\"lighthouse에-대해-설명해주세요\" style=\"position:relative;\"><a href=\"#lighthouse%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"lighthouse에 대해 설명해주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lighthouse에 대해 설명해주세요</h3>\n<ul>\n<li>Lighthouse는 Google에서 개발한 오픈 소스로, 자동화된 웹 페이지 성능 측정 도구</li>\n<li>웹 페이지의 성능과 품질을 평가하기 위해 다양한 측정 항목들을 실행하고 UX를 개선하는 데 도움이 되는 피드백과 권장 사항을 제공한다.</li>\n<li>Lighthouse는 Chrome 브라우저의 DevTools에 포함되어 있으며, 커맨드 라인에서도 실행할 수 있다.</li>\n</ul>\n<ol>\n<li>성능 지표:</li>\n</ol>\n<ul>\n<li>First Contentful Paint(FCP): 웹 페이지가 로딩된 후 첫 번째 콘텐츠가 화면에 표시되는 시간을 측정한다.</li>\n<li>Largest Contentful Paint(LCP): 웹 페이지에서 가장 큰 콘텐츠 요소가 화면에 표시되는 시간을 측정한다. Web Vitals의 하나로도 사용된다.</li>\n<li>Speed Index(SI): 웹 페이지의 로딩 과정에서 얼마나 빨리 콘텐츠가 표시되는지에 대한 측정 지표입니다.</li>\n<li>Time to Interactive(TTI): 웹 페이지가 로딩된 후 상호작용 가능한 상태가 되는 시간을 측정한다.</li>\n<li>Total Blocking Time(TBT): 웹 페이지가 로딩된 후 사용자의 상호작용과 브라우저의 응답 사이의 지연 시간을 측정한다. Web Vitals의 하나로도 사용된다.</li>\n<li>Cumulative Layout Shift(CLS): 웹 페이지의 로딩 중 발생하는 콘텐츠의 시각적 안정성을 측정한다. Web Vitals의 하나로도 사용된다.</li>\n</ul>\n<ol start=\"2\">\n<li>품질 측정 항목:</li>\n</ol>\n<ul>\n<li>Accessibility(접근성): 웹 페이지가 접근성 지침을 따르고 있는지를 평가한다.</li>\n<li>Best Practices(모범 사례): 웹 페이지가 모범 사례를 따르고 있는지를 평가한다.</li>\n<li>SEO(검색 엔진 최적화): 웹 페이지의 검색 엔진 최적화 상태를 평가한다.</li>\n<li>Progressive Web App(PWA; 점진적 웹 앱): 웹 페이지가 점진적 웹 앱으로서의 조건을 충족하는지를 평가한다.</li>\n</ul>\n<p>Lighthouse는 이러한 성능 지표와 품질 측정 항목들을 사용하여 웹 페이지의 전반적인 품질을 평가하고, 개발자들이 사용자 경험을 향상시키기 위해 어떤 부분을 개선해야 하는지에 대한 정보를 제공한다. 또한, Lighthouse 결과 보고서는 웹 개발자들이 성능 최적화 작업을 추적하고 검증하는 데도 유용하게 활용될 수 있다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://learn-react-test.vlpt.us/#/\">벨로퍼트와 함께하는 리액트 테스팅</a></li>\n<li><a href=\"https://velog.io/@ongsim123/TIL-Unit-test-Integration-test-e2e-test-%EA%B7%B8%EB%A6%AC%EA%B3%A0-TDD\">Unit test, Integration test, e2e test 그리고 TDD</a></li>\n<li><a href=\"https://medium.com/welldone-software/an-overview-of-javascript-testing-in-2019-264e19514d0a\">An Overview of JavaScript Testing in 2019</a></li>\n<li><a href=\"https://medium.com/welldone-software/an-overview-of-javascript-testing-7ce7298b9870\">An Overview of JavaScript Testing in 2022</a></li>\n<li><a href=\"https://web.dev/i18n/ko/vitals/\">Web Vitals</a></li>\n<li><a href=\"https://web.dev/i18n/ko/cls/#layout-shift-score\">CLS 점수 산출 방법</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88\">📦 잡동사니</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">들어가기에 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-1-%ED%85%8C%EC%8A%A4%ED%8A%B8\">🗂️ 1) 테스트</a></p>\n<ul>\n<li>\n<p><a href=\"#1-1-%EC%9C%A0%EB%8B%9B%ED%85%8C%EC%8A%A4%ED%8A%B8-vs-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-vs-e2e%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%B9%84%EA%B5%90%ED%95%98%EC%97%AC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\">1-1) 유닛테스트 vs 통합테스트 vs E2E테스트를 비교하여 설명해주세요</a></p>\n</li>\n<li>\n<p><a href=\"#1-2-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EB%8F%84%EA%B5%AC%EB%93%A4%EC%9D%84-%EB%B9%84%EA%B5%90%ED%95%98%EC%97%AC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\">1-2) 리액트 테스트에 사용되는 도구들을 비교하여 설명해주세요</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%9C%EB%8B%A4%EB%8A%94-%EA%B2%83%EC%9D%80\">테스트를 진행한다는 것은</a></li>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8C%85-%ED%88%B4-in-js\">테스팅 툴 in JS</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%B5%9C%EC%A0%81%ED%99%94\">🗂️ 최적화</a></p>\n<ul>\n<li>\n<p><a href=\"#cdncontent-distributed-network%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\">CDN(Content Distributed Network)에 대해 설명해주세요</a></p>\n</li>\n<li>\n<p><a href=\"#web-vitals%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\">Web Vitals에 대해 설명해주세요</a></p>\n<ul>\n<li><a href=\"#largest-contentful-paintlcp\">Largest Contentful Paint(LCP)</a></li>\n<li><a href=\"#first-input-delayfid\">First Input Delay(FID)</a></li>\n<li><a href=\"#cumulative-layout-shiftcls\">Cumulative Layout Shift(CLS)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#lighthouse%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\">Lighthouse에 대해 설명해주세요</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 31, 2023","title":"React Test and Optimization(feat. Web Vitals)","categories":"잡동사니","author":"제이든","emoji":"📦"},"fields":{"slug":"/from-time-to-time/oddments/react-test-optimization/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/from-time-to-time/study/ssok-ssok-functional/ch-6/","nextSlug":"/from-time-to-time/study/ssok-ssok-functional/ch-5/","prevSlug":"/from-time-to-time/oddments/react-test-optimization/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}