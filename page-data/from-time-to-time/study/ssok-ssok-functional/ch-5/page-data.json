{"componentChunkName":"component---src-templates-blog-template-js","path":"/from-time-to-time/study/ssok-ssok-functional/ch-5/","result":{"data":{"cur":{"id":"3b444bc0-675b-587b-90ec-a3402b65203d","html":"<h1 id=\"-쏙쏙-들어오는-함수형-코딩---심플한-코드로-복잡한-소프트웨어-길들이기\" style=\"position:relative;\"><a href=\"#-%EC%8F%99%EC%8F%99-%EB%93%A4%EC%96%B4%EC%98%A4%EB%8A%94-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%94%A9---%EC%8B%AC%ED%94%8C%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B8%B8%EB%93%A4%EC%9D%B4%EA%B8%B0\" aria-label=\" 쏙쏙 들어오는 함수형 코딩   심플한 코드로 복잡한 소프트웨어 길들이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖍 쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</h1>\n<p>이 글은 <a href=\"https://product.kyobobook.co.kr/detail/S000001952246\">쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</a>를 읽고 작성한 글입니다.\n함수형도 함수형이지만, 이 책을 통해 좀더 깔끔하고 직관적인 코드를 작성할 수 있을 것이란 팀원들의 의견을 토대로 이번 스터디 서적으로 선정하였습니다.</p>\n<h2 id=\"chap-5-더-좋은-액션-만들기\" style=\"position:relative;\"><a href=\"#chap-5-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EC%95%A1%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"chap 5 더 좋은 액션 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chap 5. 더 좋은 액션 만들기</h2>\n<ul>\n<li>암묵적 입력과 출력을 제거해서 재사용하기 좋은 코드 만들기</li>\n<li>복잡하게 엉킨 코드를 풀고 더 좋은 코드 만들기</li>\n</ul>\n<p>모든 액션을 없앨 수는 없다. 액션은 필요하다. 하지만 암묵적 입력과 출력을 줄임으로써 액션을 최소화할 수 있다.</p>\n<h3 id=\"1-비즈니스-요구사항과-설계-고려하기\" style=\"position:relative;\"><a href=\"#1-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%EA%B3%BC-%EC%84%A4%EA%B3%84-%EA%B3%A0%EB%A0%A4%ED%95%98%EA%B8%B0\" aria-label=\"1 비즈니스 요구사항과 설계 고려하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 비즈니스 요구사항과 설계 고려하기</h3>\n<ul>\n<li>기계적인 리팩토링만이 항상 최선의 구조를 만들어주진 않는다.</li>\n<li>비즈니스 요구사항을 고려해야 한다.</li>\n</ul>\n<p>비즈니스 요구 사항: 장바구니에 담긴 제품을 주문할 때 무료 배송인지 확인하는 기능</p>\n<p>아래 함수는 비즈니스 요구사항인 <code class=\"language-text\">장바구니에 담긴 제품</code>에 대한 내용 없이 <code class=\"language-text\">총액</code>과 <code class=\"language-text\">무료배송</code>에 대한 내용만을 가지고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFreeShipping</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> itemPrice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> total <span class=\"token operator\">+</span> itemPrice <span class=\"token operator\">>=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이를 좀더 비즈니스 로직에 맞게 개선하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFreeShipping</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cart</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getTotalPriceFromCart</span><span class=\"token punctuation\">(</span>cart<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getTotalPriceFromCart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cart</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> cart<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> result <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사실 위의 경우, <code class=\"language-text\">함수의 동작</code>을 변경했기 때문에 엄밀히 말하면 <code class=\"language-text\">리팩토링</code>이라고 할 수 없다.</p>\n<blockquote>\n<p>Tip1) 리팩토링(함수 분리)을 하다보면 코드가 더 길어지기도 하는데, 괜찮은건가?<br/></p>\n<ul>\n<li>함수를 분리함으로써 코드의 가독성이 높아지고, 재사용성이 높아지기 때문에 코드의 길이가 늘어나더라도 좋은 코드라고 할 수 있다.<br/>\nTip2) 불변성 유지를 위해 객체를 복사하는 게 오히려 비용을 많이 쓰지 않나?<br/></li>\n<li>굳이 비교하자면 기존 객체를 변경하는 방식보다는 비용이 더 든다. 하지만 현대의 언어 런타임과 가비지 컬렉터는 이를 최적화하고 있기 때문에 큰 문제가 되지 않는다. 또한, 이에 반해 불변성을 유지했을 때 얻는 이점이 너무 크다.</li>\n</ul>\n</blockquote>\n<h3 id=\"2-압묵적-입력과-출력은-적으면-적을수록-좋다\" style=\"position:relative;\"><a href=\"#2-%EC%95%95%EB%AC%B5%EC%A0%81-%EC%9E%85%EB%A0%A5%EA%B3%BC-%EC%B6%9C%EB%A0%A5%EC%9D%80-%EC%A0%81%EC%9C%BC%EB%A9%B4-%EC%A0%81%EC%9D%84%EC%88%98%EB%A1%9D-%EC%A2%8B%EB%8B%A4\" aria-label=\"2 압묵적 입력과 출력은 적으면 적을수록 좋다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 압묵적 입력과 출력은 적으면 적을수록 좋다!</h3>\n<ul>\n<li>암묵적 입력: 전역변수를 읽는 등 <code class=\"language-text\">인자 외의 다른 모든 입력값</code></li>\n<li>암묵적 출력: console.log(), DOM 변경, 전역변수 변경 등 <code class=\"language-text\">반환값 외의 다른 모든 출력값</code></li>\n</ul>\n<p>어떤 함수(컴포넌트)에 암묵적 입력과 출력이 있다면, 다른 함수(컴포넌트)와 강하게 연결된 컴포넌트가 된다. 이는 재사용성을 떨어뜨리고, 테스트하기 어렵게 만든다.\n또한 다른 곳에서 사용할 수 없기 때문에 <code class=\"language-text\">모듈</code>이라고 할 수 없다. 암묵적인 것들을 명시적으로 변경함으로써 모듈화할 수 있다.</p>\n<blockquote>\n<p>계산: 암묵적 입력과 출력이 없는 함수 => 모듈화 가능 및 테스트하기 좋다.</p>\n</blockquote>\n<h3 id=\"3-설계는-엉켜있는-코드를-푸는-것이다\" style=\"position:relative;\"><a href=\"#3-%EC%84%A4%EA%B3%84%EB%8A%94-%EC%97%89%EC%BC%9C%EC%9E%88%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%91%B8%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4\" aria-label=\"3 설계는 엉켜있는 코드를 푸는 것이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 설계는 엉켜있는 코드를 푸는 것이다.</h3>\n<ul>\n<li>함수를 사용하면 자연스럽게 관심사를 분리할 수 있다.</li>\n<li>함수는 인자와 반환값을을 사용하는 방법을 분리한다.(너무도 자연스럽게 input과 output을 나누게 되니까)</li>\n<li>때로는 함수를 합치고 싶을 수 있다. 그러나 조합하는 것은 언제든 쉽게 할 수 있지만, 분리하는 것은 어렵다. 즉, 가능하면 함수를 분리해두는 것이 더 좋다.</li>\n</ul>\n<h4 id=\"함수를-작게-분리해두었을-때의-이점\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9E%91%EA%B2%8C-%EB%B6%84%EB%A6%AC%ED%95%B4%EB%91%90%EC%97%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EC%9D%B4%EC%A0%90\" aria-label=\"함수를 작게 분리해두었을 때의 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수를 작게 분리해두었을 때의 이점</h4>\n<ol>\n<li>재사용하기 쉽다.</li>\n<li>유지보수하기 쉽다.</li>\n<li>테스트하기 쉽다.</li>\n</ol>\n<h3 id=\"4-패턴-빼내기유틸-함수-만들기\" style=\"position:relative;\"><a href=\"#4-%ED%8C%A8%ED%84%B4-%EB%B9%BC%EB%82%B4%EA%B8%B0%EC%9C%A0%ED%8B%B8-%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"4 패턴 빼내기유틸 함수 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) 패턴 빼내기(유틸 함수 만들기)</h3>\n<p>만약 아래와 같은 함수가 존재한다고 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cart<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newCart <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>cart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  newCart<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newCart<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>잘 생각해보자. 위의 함수는 과연 <code class=\"language-text\">cart(장바구니)</code>에만 한정된 함수인가??? 아니다. 새로운 배열(cart)에 새로운 값(item)을 추가하는 <code class=\"language-text\">유틸 함수</code>이다. 따라서 아래와 같이 변경해주는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  newArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이로써 의미적으로 좀더 다양한 곳에서 활용할 수 있는 <code class=\"language-text\">유틸 함수</code>를 만들었다.</p>\n<blockquote>\n<p>Tip1) 코드에서 비즈니스 로직은 어떻게 구분할 수 있는가?<br/></p>\n<ul>\n<li>예를 들어 <code class=\"language-text\">장바구니 기능을 담당하는 코드</code>는 대부분의 전자상거래 서비스에서 공통적으로 사용된다. 즉, 그 서비스만의 비즈니스 로직이라고 볼 수 없다.<br/></li>\n<li>반면 <code class=\"language-text\">총 가격이 50,000원이 넘어갈 때는 배송비가 무료</code>라는 기능은 그 서비스만의 로직이다. 즉, 그 서비스만의 비즈니스 로직이라고 볼 수 있다.<br/></li>\n<li>일반적으로 <code class=\"language-text\">비즈니스 로직</code>을 담당하는 코드는 더 자주 바뀐다.(기획에 따라서 언제든 변경되니까) 반면에 유틸 함수는 그렇지 않다.</li>\n</ul>\n</blockquote>\n<h3 id=\"5-정리\" style=\"position:relative;\"><a href=\"#5-%EC%A0%95%EB%A6%AC\" aria-label=\"5 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) 정리</h3>\n<ul>\n<li>일반적으로 암묵적 입력과 출력은 명시적 입력과 출력인 <code class=\"language-text\">인자와 리턴값로 바꿔주는 게 좋다.</code></li>\n<li>코드를 설계하는 것은 엉켜있는 것을 푸는 것이다. 최대한 많이 풀어두면 언제든 쉽게 조합할 수 있다.</li>\n<li>엉켜있는 것을 풀어 각 함수가 각자 하나의 책임, 역할을 갖게 하면 개념을 기준으로 쉽게 코드를 구성할 수 있다.(ex. 장바구니 기능, 배송비 기능, 할인 기능, 유틸 함수 등)</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#chap-5-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EC%95%A1%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\">Chap 5. 더 좋은 액션 만들기</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%EA%B3%BC-%EC%84%A4%EA%B3%84-%EA%B3%A0%EB%A0%A4%ED%95%98%EA%B8%B0\">1) 비즈니스 요구사항과 설계 고려하기</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EC%95%95%EB%AC%B5%EC%A0%81-%EC%9E%85%EB%A0%A5%EA%B3%BC-%EC%B6%9C%EB%A0%A5%EC%9D%80-%EC%A0%81%EC%9C%BC%EB%A9%B4-%EC%A0%81%EC%9D%84%EC%88%98%EB%A1%9D-%EC%A2%8B%EB%8B%A4\">2) 압묵적 입력과 출력은 적으면 적을수록 좋다!</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%84%A4%EA%B3%84%EB%8A%94-%EC%97%89%EC%BC%9C%EC%9E%88%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%91%B8%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4\">3) 설계는 엉켜있는 코드를 푸는 것이다.</a></p>\n<ul>\n<li><a href=\"#%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9E%91%EA%B2%8C-%EB%B6%84%EB%A6%AC%ED%95%B4%EB%91%90%EC%97%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EC%9D%B4%EC%A0%90\">함수를 작게 분리해두었을 때의 이점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%ED%8C%A8%ED%84%B4-%EB%B9%BC%EB%82%B4%EA%B8%B0%EC%9C%A0%ED%8B%B8-%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\">4) 패턴 빼내기(유틸 함수 만들기)</a></p>\n</li>\n<li>\n<p><a href=\"#5-%EC%A0%95%EB%A6%AC\">5) 정리</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🖍 쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기 이 글은 쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기를 읽고 작성한 글입니다.\n함수형도 함수형이지만, 이 책을 통해 좀더 깔끔하고 직관적인 코드를 작성할 수 있을 것이란 팀원들의 의견을 토대로 이번 스터디 서적으로 선정하였습니다. Chap 5. 더 좋은 액션 만들기 암묵적 입력과 출력을 제거해서 재사용하기 좋은 코드 만들기 복잡하게 엉킨 코드를 풀고 더 좋은 코드 만들기 모든 액션을 없앨 수는 없다. 액션은 필요하다. 하지만 암묵적 입력과 출력을 줄임으로써 액션을 최소화할 수 있다. 1) 비즈니스 요구사항과 설계 고려하기 기계적인 리팩토링만이 항상 최선의 구조를 만들어주진 않는다. 비즈니스 요구사항을 고려해야 한다. 비즈니스 요구 사항: 장바구니에 담긴 제품을 주문할 때 무료 배송인지 확인하는 기능 아래 함수는 비즈니스 요구사항인 에 대한 내용 없이 과 에 대한 내용만을 가지고 있…","frontmatter":{"date":"July 29, 2023","title":"쏙쏙 들어오는 함수형 코딩 Chapter 5","categories":"스터디 책","author":"제이든","emoji":"🖍️"},"fields":{"slug":"/from-time-to-time/study/ssok-ssok-functional/ch-5/"}},"next":{"id":"1ebc7050-963c-5e5a-bcc2-9da287229bd0","html":"<h2 id=\"-성장일지-60\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-60\" aria-label=\" 성장일지 60 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚤 성장일지 6.0</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌾 (4.0)학습 키워드에서 최대한 간단한 정보 제공, 고민에서 내 경험을 자세히 적자!<br/>\n🥊 (5.0)학습 키워드는 한줄의 핵심으로만 정리, 성공/실패 일지 작성하기! 이 때, 실패의 경험은 자세히 적기!<br/>\n🍉 (6.0)&#x3C;완전 개편!!!> 매일 습관적으로 핵심만 적을 수 있게 프레임 변경. 성공보단 실패에 초점을 맞추기.<br/></p>\n<ul>\n<li>🍉 (6.1)&#x3C;수정> 매번 성공, 실패를 따로 적는 것보단 경험으로 표현하자</li>\n</ul>\n</blockquote>\n<h2 id=\"-오늘의-회고\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%9A%8C%EA%B3%A0\" aria-label=\" 오늘의 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌈 오늘의 회고</h2>\n<p>이것저것 많이 하고 금요일 밤도 즐겁게 보낸 하루였다. :) 세워놓은 계획들 중에서 너무 개발이나 공부에 치중하는 경향이 있는 것 같은데, 남은 주말에 이력서에 좀더 집중해보려 한다.</p>\n<h2 id=\"-오늘의-고민\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B3%A0%EB%AF%BC\" aria-label=\" 오늘의 고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🫧 오늘의 고민</h2>\n<h3 id=\"프로젝트---세컨드-핸드-동네-설정-api-부분을-수정하면-좋지-않을까\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8---%EC%84%B8%EC%BB%A8%EB%93%9C-%ED%95%B8%EB%93%9C-%EB%8F%99%EB%84%A4-%EC%84%A4%EC%A0%95-api-%EB%B6%80%EB%B6%84%EC%9D%84-%EC%88%98%EC%A0%95%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%A7%80-%EC%95%8A%EC%9D%84%EA%B9%8C\" aria-label=\"프로젝트   세컨드 핸드 동네 설정 api 부분을 수정하면 좋지 않을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 - 세컨드 핸드: 동네 설정 api 부분을 수정하면 좋지 않을까?</h3>\n<p>기존 우리 프로젝트에서는 사용자가 선택한 동네 설정 부분을 PATCH로만 변경 및 수정을 하고 있었다. 요청 시 body에 담는 구조는 객체구조로 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mainTownId</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">subTownId</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 main과 sub의 동네 id 값을 채워서 보내면 무조건 그렇게 변경이 되고 sub는 없이 보내면 sub 동네는 삭제가 된다. 헌데 위와 같은 구조로 state를 받아서 조건 처리하려니\n너무 복잡하고 코드 로직이 가독성이 떨어져서 백엔드 동료분께 동네 데이터 구조를 배열로 변경하고 오름차순으로 보내는 건 어떨지 제안드렸다. 다행히 둘의 생각이 같아서 그렇게 변경하기로 하고\n배열로 전달하기로 했다! 이제 배열의 순서만 잘 맞춰주면 코드가 훨씬 깔끔하고 로직도 가독성이 좋아지게 된다!(또한 어차피 동네는 최대 2개이기 때문에 배열로 전달해서 순회해도 성능상 큰 문제는 없을 것 같다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 너무 까아아아알끔</span></code></pre></div>\n<h2 id=\"️-오늘의-경험\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B2%BD%ED%97%98\" aria-label=\"️ 오늘의 경험 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>☀️ 오늘의 경험</h2>\n<h3 id=\"reduce-익숙해지기\" style=\"position:relative;\"><a href=\"#reduce-%EC%9D%B5%EC%88%99%ED%95%B4%EC%A7%80%EA%B8%B0\" aria-label=\"reduce 익숙해지기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reduce 익숙해지기</h3>\n<p>오늘은 Array 메서드에 대해 좀더 깊은 내용을 공부했다. 허… 그런데 은재님의 reduce에 대한 강의 내용이 너무 좋았다. 사실 그동안 reduce를 사용하면서도 매번 조금 헷갈리고 생각을 많이 했었는데, 오늘\n좀 깔끔하게 정리된 것 같아서 넘 행복하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callbackFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> initialValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, '', {} 등등 어떤 데이터를 누적해서 저장하기 위한 구조</span>\n<span class=\"token keyword\">const</span> newResult <span class=\"token operator\">=</span> someArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>callbackFn<span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>reduce는 <code class=\"language-text\">마치 국물을 쫄이는 것</code>과 같이 어떤 input에 대해서 새로운 차원의 output을 만든다. 그리고 callbackFn의 인자를 acc, cur 보다는 result, item으로 받는 것이 더 직관적이고 가독성이 좋다. initialValue를 통해서 reduce 함수만 보고서 어떤 형태의 결과가 나오는지 알 수 있다.(반대로 내가 원하는 결과의 모양이 나오도록 initialValue를 설정해주면 된다.)</p>\n<p>정말 이 사실을 아는 것만해도 앞으로 reduce를 통해서 코드를 작성하는 게 훨씬 쉬워질 것 같다.</p>\n<h2 id=\"-오늘의-교훈\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B5%90%ED%9B%88\" aria-label=\" 오늘의 교훈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐾 오늘의 교훈</h2>\n<p>개발과 공부도 좋지만, 이력서 작성과 같은 준비도 서두르자. 아니, 어쩌면 지금은 이게 더 중요할 수도 있다. 집중하자!</p>\n<h2 id=\"-참고\" style=\"position:relative;\"><a href=\"#-%EC%B0%B8%EA%B3%A0\" aria-label=\" 참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪵 참고</h2>\n<ul>\n<li>없음</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-60\">🚤 성장일지 6.0</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%9A%8C%EA%B3%A0\">🌈 오늘의 회고</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B3%A0%EB%AF%BC\">🫧 오늘의 고민</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8---%EC%84%B8%EC%BB%A8%EB%93%9C-%ED%95%B8%EB%93%9C-%EB%8F%99%EB%84%A4-%EC%84%A4%EC%A0%95-api-%EB%B6%80%EB%B6%84%EC%9D%84-%EC%88%98%EC%A0%95%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%A7%80-%EC%95%8A%EC%9D%84%EA%B9%8C\">프로젝트 - 세컨드 핸드: 동네 설정 api 부분을 수정하면 좋지 않을까?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B2%BD%ED%97%98\">☀️ 오늘의 경험</a></p>\n<ul>\n<li><a href=\"#reduce-%EC%9D%B5%EC%88%99%ED%95%B4%EC%A7%80%EA%B8%B0\">reduce 익숙해지기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B5%90%ED%9B%88\">🐾 오늘의 교훈</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%B0%B8%EA%B3%A0\">🪵 참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 28, 2023","title":"230728(금)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/7/28-gl/"}},"prev":{"id":"bbabcfe6-ab1a-5157-9481-aa6ff17a5ff1","html":"<h1 id=\"-쏙쏙-들어오는-함수형-코딩---심플한-코드로-복잡한-소프트웨어-길들이기\" style=\"position:relative;\"><a href=\"#-%EC%8F%99%EC%8F%99-%EB%93%A4%EC%96%B4%EC%98%A4%EB%8A%94-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%94%A9---%EC%8B%AC%ED%94%8C%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B8%B8%EB%93%A4%EC%9D%B4%EA%B8%B0\" aria-label=\" 쏙쏙 들어오는 함수형 코딩   심플한 코드로 복잡한 소프트웨어 길들이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖍 쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</h1>\n<p>이 글은 <a href=\"https://product.kyobobook.co.kr/detail/S000001952246\">쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</a>를 읽고 작성한 글입니다.\n함수형도 함수형이지만, 이 책을 통해 좀더 깔끔하고 직관적인 코드를 작성할 수 있을 것이란 팀원들의 의견을 토대로 이번 스터디 서적으로 선정하였습니다.</p>\n<h2 id=\"chap-6-변경-가능한-데이터-구조를-가진-언어에서-불변성-유지하기feat-js\" style=\"position:relative;\"><a href=\"#chap-6-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EA%B0%80%EC%A7%84-%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C-%EB%B6%88%EB%B3%80%EC%84%B1-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0feat-js\" aria-label=\"chap 6 변경 가능한 데이터 구조를 가진 언어에서 불변성 유지하기feat js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chap 6. 변경 가능한 데이터 구조를 가진 언어에서 불변성 유지하기(feat. JS)</h2>\n<ul>\n<li>데이터가 바뀌지 않도록 <code class=\"language-text\">카피-온-라이트</code> 적용하기</li>\n<li>깊이 중첩된 데이터에도 <code class=\"language-text\">카피-온-라이트</code> 적용하기</li>\n<li><code class=\"language-text\">불변성</code> 이해하기</li>\n</ul>\n<h3 id=\"1-동작을-읽기-쓰기-혹은-둘-다로-분류하기\" style=\"position:relative;\"><a href=\"#1-%EB%8F%99%EC%9E%91%EC%9D%84-%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0-%ED%98%B9%EC%9D%80-%EB%91%98-%EB%8B%A4%EB%A1%9C-%EB%B6%84%EB%A5%98%ED%95%98%EA%B8%B0\" aria-label=\"1 동작을 읽기 쓰기 혹은 둘 다로 분류하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 동작을 읽기, 쓰기 혹은 둘 다로 분류하기</h3>\n<ul>\n<li><code class=\"language-text\">읽기(Read)</code>: 데이터를 바꾸지 않고 정보를 꺼내는 것\n<ul>\n<li>인자에만 의존해서 정보를 가져오는 읽기는 <code class=\"language-text\">순수 함수</code> 즉, <code class=\"language-text\">계산</code>이 된다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">쓰기(Write)</code>: 데이터를 바꾸는 것\n<ul>\n<li>변경되는 데이터가 어디에서 사용될지 알 수 없기 때문에 <code class=\"language-text\">불변성 원칙(카피-온-라이트)</code>이 필요하다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">읽기와 쓰기 둘 다</code>: 데이터를 바꾸면서 정보를 꺼내는 것</li>\n</ul>\n<h3 id=\"2-카피-온-라이트-원칙-세-단계\" style=\"position:relative;\"><a href=\"#2-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8-%EC%9B%90%EC%B9%99-%EC%84%B8-%EB%8B%A8%EA%B3%84\" aria-label=\"2 카피 온 라이트 원칙 세 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 카피-온-라이트 원칙 세 단계</h3>\n<ol>\n<li>복사본 만들기</li>\n<li>복사본 변경하기</li>\n<li>복사본 반환하기</li>\n</ol>\n<h4 id=\"2-1-배열의-카피-온-라이트\" style=\"position:relative;\"><a href=\"#2-1-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8\" aria-label=\"2 1 배열의 카피 온 라이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1) 배열의 카피-온-라이트</h4>\n<ul>\n<li>push() 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAddedArray</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  newArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> <span class=\"token function\">getAddedArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4]</span></code></pre></div>\n<h4 id=\"2-2-객체의-카피-온-라이트\" style=\"position:relative;\"><a href=\"#2-2-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8\" aria-label=\"2 2 객체의 카피 온 라이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2) 객체의 카피-온-라이트</h4>\n<ul>\n<li>Object.assign() 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAddedObject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  newObject<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newObject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"3-불변-데이터-구조를-읽는-것은-계산이다\" style=\"position:relative;\"><a href=\"#3-%EB%B6%88%EB%B3%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%9D%BD%EB%8A%94-%EA%B2%83%EC%9D%80-%EA%B3%84%EC%82%B0%EC%9D%B4%EB%8B%A4\" aria-label=\"3 불변 데이터 구조를 읽는 것은 계산이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 불변 데이터 구조를 읽는 것은 계산이다.</h3>\n<ul>\n<li>변경 가능한 데이터를 읽는 것 => <code class=\"language-text\">액션</code></li>\n<li><code class=\"language-text\">쓰기</code>는 데이터를 변경 가능한 구조로 만든다.</li>\n<li>어떤 데이터에 <code class=\"language-text\">쓰기가 없다면</code> 그 데이터는 <code class=\"language-text\">불변 데이터</code>이다.</li>\n<li>불변 데이터를 읽는 것 => <code class=\"language-text\">계산</code></li>\n<li><code class=\"language-text\">쓰기</code>를 <code class=\"language-text\">읽기</code>로 바꾸면 <code class=\"language-text\">액션</code>은 줄고 <code class=\"language-text\">계산</code>이 많아진다.</li>\n</ul>\n<h3 id=\"4-불변성도-좋지만-당연히-변경-가능한-데이터는-필요하다\" style=\"position:relative;\"><a href=\"#4-%EB%B6%88%EB%B3%80%EC%84%B1%EB%8F%84-%EC%A2%8B%EC%A7%80%EB%A7%8C-%EB%8B%B9%EC%97%B0%ED%9E%88-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4\" aria-label=\"4 불변성도 좋지만 당연히 변경 가능한 데이터는 필요하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) 불변성도 좋지만, 당연히 변경 가능한 데이터는 필요하다.</h3>\n<p>ex) 장바구니가 변경 가능하지 않다면, 장바구니에 물건을 담을 수 없다.</p>\n<h3 id=\"5-불변-데이터는-느리지-않다\" style=\"position:relative;\"><a href=\"#5-%EB%B6%88%EB%B3%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EB%8A%90%EB%A6%AC%EC%A7%80-%EC%95%8A%EB%8B%A4\" aria-label=\"5 불변 데이터는 느리지 않다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) 불변 데이터는 느리지 않다.</h3>\n<p>일반적으로 불변 데이터를 만드는 건, 기존 데이터를 변경하는 것보다는 더 많은 메모리를 사용하고 느리다.</p>\n<p>다만,</p>\n<ul>\n<li>느린 부분은 언제든 최적화가 가능하다.</li>\n<li>현대 대부분의 언어의 가비지 컬렉터는 불변 데이터를 처리하는 데 최적화되어 있다.</li>\n<li>우리의 생각보다 많이 복사하지 않는다.\n<ul>\n<li>ex) [1, 2, 3, …, 100]이란 배열을 복사 => 1부터 100까지의 숫자는 이미 메모리에 존재하기 때문에 복사하지 않는다. 단지\n배열의 참조만 복사한다.(100개의 숫자를 복사할 것 같지만, 아니라는 이야기)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-정리\" style=\"position:relative;\"><a href=\"#6-%EC%A0%95%EB%A6%AC\" aria-label=\"6 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6) 정리</h3>\n<ul>\n<li>함수형 프로그래밍에서 <code class=\"language-text\">불변 데이터</code>는 필요하다.</li>\n<li>변경 가능한 데이터에 쓰기를 하는 것은 <code class=\"language-text\">계산</code>이 아니라 <code class=\"language-text\">액션</code>이다.</li>\n<li><code class=\"language-text\">카피-온-라이트</code>: 데이터를 불변형으로 유지할 수 있는 원칙. 즉, 복사본을 만들고 복사본을 변경한 후 복사본을 반환하는 것.</li>\n</ul>\n<blockquote>\n<p>중첩 데이터(nested data): 데이터 구조 안에 데이터 구조가 있는 데이터<br/>\n얕은 복사(shallow copy): 데이터 구조 안에 있는 데이터 구조는 복사하지 않고 참조만 복사하는 것(최상위 데이터 구조만 복사한다.)<br/>\n구조적 공유(structural sharing): 두 개의 중첩된 데이터 구조에서 그 내부 데이터가 같은 데이터를 참조하는 경우</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#chap-6-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EA%B0%80%EC%A7%84-%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C-%EB%B6%88%EB%B3%80%EC%84%B1-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0feat-js\">Chap 6. 변경 가능한 데이터 구조를 가진 언어에서 불변성 유지하기(feat. JS)</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EB%8F%99%EC%9E%91%EC%9D%84-%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0-%ED%98%B9%EC%9D%80-%EB%91%98-%EB%8B%A4%EB%A1%9C-%EB%B6%84%EB%A5%98%ED%95%98%EA%B8%B0\">1) 동작을 읽기, 쓰기 혹은 둘 다로 분류하기</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8-%EC%9B%90%EC%B9%99-%EC%84%B8-%EB%8B%A8%EA%B3%84\">2) 카피-온-라이트 원칙 세 단계</a></p>\n<ul>\n<li><a href=\"#2-1-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8\">2-1) 배열의 카피-온-라이트</a></li>\n<li><a href=\"#2-2-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%B9%B4%ED%94%BC-%EC%98%A8-%EB%9D%BC%EC%9D%B4%ED%8A%B8\">2-2) 객체의 카피-온-라이트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EB%B6%88%EB%B3%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%9D%BD%EB%8A%94-%EA%B2%83%EC%9D%80-%EA%B3%84%EC%82%B0%EC%9D%B4%EB%8B%A4\">3) 불변 데이터 구조를 읽는 것은 계산이다.</a></p>\n</li>\n<li>\n<p><a href=\"#4-%EB%B6%88%EB%B3%80%EC%84%B1%EB%8F%84-%EC%A2%8B%EC%A7%80%EB%A7%8C-%EB%8B%B9%EC%97%B0%ED%9E%88-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4\">4) 불변성도 좋지만, 당연히 변경 가능한 데이터는 필요하다.</a></p>\n</li>\n<li>\n<p><a href=\"#5-%EB%B6%88%EB%B3%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EB%8A%90%EB%A6%AC%EC%A7%80-%EC%95%8A%EB%8B%A4\">5) 불변 데이터는 느리지 않다.</a></p>\n</li>\n<li>\n<p><a href=\"#6-%EC%A0%95%EB%A6%AC\">6) 정리</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 30, 2023","title":"쏙쏙 들어오는 함수형 코딩 Chapter 6","categories":"스터디 책","author":"제이든","emoji":"🖍️"},"fields":{"slug":"/from-time-to-time/study/ssok-ssok-functional/ch-6/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/from-time-to-time/study/ssok-ssok-functional/ch-5/","nextSlug":"/steadily/growth-diary/2023/7/28-gl/","prevSlug":"/from-time-to-time/study/ssok-ssok-functional/ch-6/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}