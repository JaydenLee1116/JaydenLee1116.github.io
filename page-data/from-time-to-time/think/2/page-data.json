{"componentChunkName":"component---src-templates-blog-template-js","path":"/from-time-to-time/think/2/","result":{"data":{"cur":{"id":"5f97a87d-84ba-5df6-a04e-3e6db29bdba6","html":"<h2 id=\"-블로그-방향성\" style=\"position:relative;\"><a href=\"#-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B0%A9%ED%96%A5%EC%84%B1\" aria-label=\" 블로그 방향성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙃 블로그 방향성</h2>\n<p>매일 매일 공부한 내용을 정리하는 느낌으로 블로그를 시작했으나, 점점 시간이 갈수록 조금 단순한 정보 나열이 되어가는 게 아닌지 생각이 든다.<br/>\n아주 큰 개편은 아니더라도, 약간의 변화를 줘야할 필요가 있다고 느낀다.<br/>\n현재 성장일지와 같은 항목을 통해 매일매일 공부하는 기록을 남기되, 일주일에 한 번씩 <code class=\"language-text\">딥하게</code> 들어가는 칼럼 느낌의 글을 작성해보는 방향을 생각 중이다.<br/>\n방향이 잘 정해지고 나면 훨씬 더 효율적이고 의미있는 글을 쓸 수 있을 것이다.</p>\n<blockquote>\n<p>추가로 글 검색 기능에서 제목뿐만이 아닌 내용에서도 검색이 되게 하는 것도 추가해봐야겠다.</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B0%A9%ED%96%A5%EC%84%B1\">🙃 블로그 방향성</a></li>\n</ul>\n</div>","excerpt":"🙃 블로그 방향성 매일 매일 공부한 내용을 정리하는 느낌으로 블로그를 시작했으나, 점점 시간이 갈수록 조금 단순한 정보 나열이 되어가는 게 아닌지 생각이 든다.\n아주 큰 개편은 아니더라도, 약간의 변화를 줘야할 필요가 있다고 느낀다.\n현재 성장일지와 같은 항목을 통해 매일매일 공부하는 기록을 남기되, 일주일에 한 번씩  들어가는 칼럼 느낌의 글을 작성해보는 방향을 생각 중이다.\n방향이 잘 정해지고 나면 훨씬 더 효율적이고 의미있는 글을 쓸 수 있을 것이다. 추가로 글 검색 기능에서 제목뿐만이 아닌 내용에서도 검색이 되게 하는 것도 추가해봐야겠다. 🙃 블로그 방향성","frontmatter":{"date":"August 28, 2022","title":"블로그의 방향성을 확실히","categories":"생각","author":"제이든","emoji":"🧐"},"fields":{"slug":"/from-time-to-time/think/2/"}},"next":{"id":"629d6ce1-76ba-5d84-91eb-2ec539becc1a","html":"<h2 id=\"-성장일지\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\" aria-label=\" 성장일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-객체-리터럴\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"code classlanguage textjavascriptcode 객체 리터럴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 객체 리터럴</h3>\n<h4 id=\"객체란-뭘까\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%9E%80-%EB%AD%98%EA%B9%8C\" aria-label=\"객체란 뭘까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체란 뭘까</h4>\n<p>하나의 값만 나타내는 원시 타입과 다르게 객체는 다양한 타입의 값을 하나의 단위로 합쳐놓은 복합적인 자료구조이다.<br/>\n또한 자바스크립트의 함수는 <code class=\"language-text\">일급 객체</code>이기에 값으로 취급할 수 있다.</p>\n<blockquote>\n<p>일급 객체란?</p>\n<ul>\n<li>변수에 할당할 수 있다.</li>\n<li>다른 함수를 인자로 전달받을 수 있다.</li>\n<li>다른 함수의 결과로 리턴될 수 있다.</li>\n</ul>\n</blockquote>\n<p>객체는 크게 <code class=\"language-text\">프로퍼티</code>와 <code class=\"language-text\">메서드</code>로 구성된다.<br/>\n조금 단순하게 생각하면 프로퍼티는 <code class=\"language-text\">상태를 나타내는 값</code>을 나타내고 메서드는 <code class=\"language-text\">그 값을 참조하고 조작 가능한 동작</code>이라고 생각할 수 있다.</p>\n<p>아래 예시처럼, 자동차라는 객체를 만들었을 때 그 안에는 자동차가 움직인 distance(프로퍼티)가 있고 그 거리를 증가시키는 함수인 move(메서드)가 있다.<br/>\n약간 어떤 특정 값과 기능을 가진 로봇을 만드는 기분..? 이라 생각하면 편하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">distance</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">move</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distance<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이처럼 객체를 통해 <code class=\"language-text\">상태</code>와 <code class=\"language-text\">동작</code>을 하나의 단위로 구조화할 수 있어 유용하며, 이렇게 객체의 집합으로 프로그램을 표현하는 프로그래밍 패러다임을 <code class=\"language-text\">객체지향 프로그래밍</code>이라고 한다.</p>\n<h4 id=\"객체-리터럴은-뭐지\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%80-%EB%AD%90%EC%A7%80\" aria-label=\"객체 리터럴은 뭐지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 리터럴은 뭐지?</h4>\n<p>일반적으로 C++이나 자바같은 클래스 기반 객체지향 언어는 객체를 생성할 때, 미리 클래스를 만들고 new 연산자를 통해서 객체를 생성한다.<br/>\n그런데 이게 웬걸, 자바스크립트는 객체를 표현하기 위한 표현법(리터럴)을 약속함으로써 아주 간단하게 객체를 생성할 수 있다.</p>\n<ul>\n<li>객체 리터럴</li>\n<li>Object 생성자 함수</li>\n<li>생성자 함수</li>\n<li>Object.create 메서드</li>\n<li>클래스(ES6에 추가됨)</li>\n</ul>\n<p>위의 방법 중 객체 리터럴은 <code class=\"language-text\">{}</code>로 객체를 바로 생성할 수 있는 방법이다. 따로 클래스를 생성하고 new 연산자 없이도 바로 뿅 하고 객체를 만들 수 있다.</p>\n<h4 id=\"propertymethod-keyvalue\" style=\"position:relative;\"><a href=\"#propertymethod-keyvalue\" aria-label=\"propertymethod keyvalue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>property/method, key/value</h4>\n<p>위 용어 4가지를 확실히 짚고 넘어가자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'jayden'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이 상태값을 나타내는 한 줄 자체가 property</span>\n  <span class=\"token function-variable function\">do</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이렇게 동작을 나타내는(value가 함수) 게 method</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 위에서 name과 do는 key, 'jayden'과 function() ~ 는 value에 해당한다.</span></code></pre></div>\n<h3 id=\"code-classlanguage-textjavascriptcode-다양한-함수들\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%EB%8B%A4%EC%96%91%ED%95%9C-%ED%95%A8%EC%88%98%EB%93%A4\" aria-label=\"code classlanguage textjavascriptcode 다양한 함수들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 다양한 함수들</h3>\n<h4 id=\"즉시-실행-함수\" style=\"position:relative;\"><a href=\"#%EC%A6%89%EC%8B%9C-%EC%8B%A4%ED%96%89-%ED%95%A8%EC%88%98\" aria-label=\"즉시 실행 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>즉시 실행 함수</h4>\n<p>함수 정의와 동시에 즉시 호출되는 함수로 <code class=\"language-text\">단 한 번만</code> 호출되며 다시 호출할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'즉시 실행'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// test() 해도 실행 안됨. 에러 난다. (() 내의 함수 선언문은 선언문이 아닌 함수 리터럴로 평가되기 때문)</span>\n\n<span class=\"token comment\">// 위와 ()의 위치만 바뀌고 이렇게 쓰기도 한다.</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'즉시 실행'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"재귀-함수\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EA%B7%80-%ED%95%A8%EC%88%98\" aria-label=\"재귀 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재귀 함수</h4>\n<p>함수가 자기 자신을 호출하는 것을 재귀 호출이라고 하고, 이런 재귀 호출하는 함수를 재귀 함수라고 한다.<br/>\n재귀 함수를 사용하면 반복문 없이 같은 결과를 낼 수 있다. 또한, 재귀 함수는 반드시 재귀를 멈출 <code class=\"language-text\">탈출 조건</code>이 있어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 재귀 함수를 이용해 구현한 팩토리얼</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">factorial</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이게 무한 재귀를 멈출 탈출 조건(없으면 계속 재귀재귀재귀재귀재귀재귀재귀재...)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>재귀 함수는 반복되는 처리를 반복문 없이 쓸 수 있다는 장점이 있으나!!! 무한 반복에 빠질 수 있기 때문에 특별히 재귀 함수가 더 직관적이고 편안한 경우가 아니라면 한정적으로 사용하는 게 낫다.</p>\n<blockquote>\n<p>재귀 함수가 무한 반복되어서 함수마다의 실행 컨텍스트가 콜스택에 쌓이면 그게 바로 유명한 <code class=\"language-text\">스택오버플로우</code></p>\n</blockquote>\n<h4 id=\"중첩-함수내부-함수\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A9-%ED%95%A8%EC%88%98%EB%82%B4%EB%B6%80-%ED%95%A8%EC%88%98\" aria-label=\"중첩 함수내부 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩 함수(내부 함수)</h4>\n<p>함수 내부에 정의된 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">outer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">inner</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'내부 함수입니당.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같은 식인데, 내부 함수(중첩 함수) 바깥은 외부 함수라고 부르며 ‘이게 뭐 복잡한 게 있나?’ 싶을 수 있지만<br/>\n이 내부/외부 함수의 변수 참조 및 내부 함수의 외부 전달 등에 따라 <code class=\"language-text\">클로저</code> 현상이 일어난다.</p>\n<h4 id=\"콜백-함수\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98\" aria-label=\"콜백 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백 함수</h4>\n<p>어떤 함수(고차 함수)의 인자로 전달되는 함수로, 고차 함수에게 그 제어권을 넘겨주는 함수를 말한다.<br/>\n비동기 처리와 배열의 고차 함수에서 매우매우 중요한 개념이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 예시1: 비동기 처리에서의 콜백 함수 활용</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'비동기 처리~'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 예시2: 배열 고차 함수에서의 콜백 함수 활용</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"순수-함수와-비순수-함수\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98%EC%99%80-%EB%B9%84%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98\" aria-label=\"순수 함수와 비순수 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순수 함수와 비순수 함수</h4>\n<ul>\n<li>순수 함수: 외부 상태에 의존하지 않고, 외부 상태를 변경하지도 않는 본인의 인자만을 갖고 노는 함수(동일한 인수가 전달되면 언제나 동일한 값이 나옴)</li>\n<li>비순수 함수: 외부 상태에 의존도 하고, 외부 상태를 멋대로 바꾸기도 하고 깨랑까랑한 함수</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 순수 함수</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pure</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>n\n<span class=\"token punctuation\">}</span>\n\ncount <span class=\"token operator\">=</span> <span class=\"token function\">pure</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// count에 1 할당</span>\ncount <span class=\"token operator\">=</span> <span class=\"token function\">pure</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// count에 2 할당</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token comment\">// 비순수 함수</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">dirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// count에 1 할당됨</span>\n<span class=\"token function\">dirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// count에 2 할당됨</span></code></pre></div>\n<p>비순수 함수를 사용함으로써 함수 내의 값이 아닌 외부의 값이 변경되는 것을 <code class=\"language-text\">부수 효과</code>라고 한다.<br/>\n물론 이와 같은 효과를 활용할 수도 있지만, 코드가 길어질수록 비순수 함수의 부수 효과는 오류를 범할 확률을 높이므로\n최대한 순수 함수를 사용하여 함수 본연의 값 외에는 바뀌지 않도록 하는 것이 좋다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\">🪴 성장일지</a></p>\n<ul>\n<li>\n<p><a href=\"#javascript-%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4\"><code class=\"language-text\">JavaScript</code> 객체 리터럴</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4%EB%9E%80-%EB%AD%98%EA%B9%8C\">객체란 뭘까</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%80-%EB%AD%90%EC%A7%80\">객체 리터럴은 뭐지?</a></li>\n<li><a href=\"#propertymethod-keyvalue\">property/method, key/value</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#javascript-%EB%8B%A4%EC%96%91%ED%95%9C-%ED%95%A8%EC%88%98%EB%93%A4\"><code class=\"language-text\">JavaScript</code> 다양한 함수들</a></p>\n<ul>\n<li><a href=\"#%EC%A6%89%EC%8B%9C-%EC%8B%A4%ED%96%89-%ED%95%A8%EC%88%98\">즉시 실행 함수</a></li>\n<li><a href=\"#%EC%9E%AC%EA%B7%80-%ED%95%A8%EC%88%98\">재귀 함수</a></li>\n<li><a href=\"#%EC%A4%91%EC%B2%A9-%ED%95%A8%EC%88%98%EB%82%B4%EB%B6%80-%ED%95%A8%EC%88%98\">중첩 함수(내부 함수)</a></li>\n<li><a href=\"#%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98\">콜백 함수</a></li>\n<li><a href=\"#%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98%EC%99%80-%EB%B9%84%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98\">순수 함수와 비순수 함수</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 26, 2022","title":"220826(금)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/8/220826-gl/"}},"prev":{"id":"5e52507e-0576-58c7-8a6b-101153195f23","html":"<h2 id=\"-성장일지\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\" aria-label=\" 성장일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-일급-객체\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4\" aria-label=\"code classlanguage textjavascriptcode 일급 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 일급 객체</h3>\n<p>자바스크립트의 함수는 <code class=\"language-text\">일급 객체</code>라고 한다. 일급 객체란 무엇일까?</p>\n<ul>\n<li>무명의 리터럴로 생성할 수 있다.(즉, 런타임에 생성이 가능하다.)</li>\n<li>변수나 자료구조(객체, 배열 등)에 저장할 수 있다.</li>\n<li>함수의 매개변수에 전달할 수 있다.</li>\n<li>함수의 반환값으로 사용 가능하다.</li>\n</ul>\n<p>자바스크립트의 함수는 위 조건을 모두 만족하므로 <code class=\"language-text\">일급 객체</code>이다.<br/>\n말 그대로 함수를 객체와 동일하게 사용할 수 있다는 의미이다.<br/>\n다만 함수는 호출이 가능하고 일반 객체에는 없는 함수 고유의 프로퍼티를 소유할 수 있다.</p>\n<h3 id=\"code-classlanguage-textjavascriptcode-프로토타입\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\" aria-label=\"code classlanguage textjavascriptcode 프로토타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 프로토타입</h3>\n<p>자바스크립트는 <code class=\"language-text\">프로토타입</code> 기반 언어이다. 그래서 프로토타입이 정확히 뭘까?<br/>\n사전적 의미로는 <code class=\"language-text\">원형</code>의 의미를 지닌다. 비유를 해보자면 어떤 객체의 유전 정보같은 느낌이다.<br/>\n대표적으로 생성자 함수에서 생성자의 프로퍼티이며 new 연산자를 통해 인스턴스를 만들었을 때, 그 인스턴스는 생성자의 프로토타입을 참조하는 <code class=\"language-text\">__proto__</code>라는 접근자 프로퍼티를 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Dog</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> hodu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hodu'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">===</span> hodu<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>hodu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<br/>\n<blockquote>\n<p>객체지향 프로그래밍이란?\n실세계의 실체(사물 혹은 개념)를 인식하는 철학적 사고를 프로그래밍에 접목하려는 프로그래밍 패러다임\n강아지가 있다면, 강아지라는 개념에서 각각의 강아지 개체들은 이름, 나이 등 다양한 속성이 존재한다.\n이 때 필요한 속성들만 간추려 표현하는 것을 <code class=\"language-text\">추상화</code>라고 한다.\n객체의 <code class=\"language-text\">상태</code>를 나타내는 데이터는 <code class=\"language-text\">프로퍼티</code>, 객체의 <code class=\"language-text\">동작</code>을 나타내는 함수는 <code class=\"language-text\">메서드</code>라고 한다.</p>\n</blockquote>\n<h4 id=\"프로토타입-체이닝\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B4%EB%8B%9D\" aria-label=\"프로토타입 체이닝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 체이닝</h4>\n<p>객체의 프로퍼티(혹은 메서드)에 접근하려 할 때, 해당 객체에 접근하려는 프로퍼티가 없다면 상위에 있는(체이닝되어있는) 프로토타입의 프로퍼티를 순차적으로 검색한다.<br/>\n식별자에서 스코프 체이닝이 있었다면, 객체의 프로퍼티에선 프로토타입 체이닝이 있다고 생각하면 편하다.<br/>\n실제로 이 두 체이닝은 서로 협력하며 식별자와 프로퍼티를 검색하는 데 사용된다.</p>\n<blockquote>\n<p>프로토타입 체이닝을 이용하여 원하는 생성자를 상속시켜줄 수 있다.</p>\n</blockquote>\n<h4 id=\"정적-메서드-프로토타입-메서드-인스턴스-메서드\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"정적 메서드 프로토타입 메서드 인스턴스 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 메서드, 프로토타입 메서드, 인스턴스 메서드</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 정적 메서드 : 생성자 자체의 메서드</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 프로토타입 메서드 : 생성자의 프로토타입의 메서드</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 인스턴스 메서드 : 인스턴스가 직접 갖고 있는 메서드</span>\n<span class=\"token keyword\">var</span> example <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nexample<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"code-classlanguage-textjavascriptcode-this\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-this\" aria-label=\"code classlanguage textjavascriptcode this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> this</h3>\n<p>어떤 객체의 메서드가 자신이 속한 객체의 프로퍼티를 참조하기 위해서 자신이 속한 객체를 가리키는 식별자가 있어야한다.<br/>\n그래서 생긴 게 <code class=\"language-text\">this</code>이다.(객체 본인을 내부에서 참조하기 위함)\n즉, <code class=\"language-text\">this</code>는 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 <code class=\"language-text\">자기 참조 변수</code>이다.<br/></p>\n<blockquote>\n<p>this 기억할 키워드</p>\n<ol>\n<li>this는 함수의 <code class=\"language-text\">호출</code>에 따라 바인딩되며 함수 호출 방법에 따라 바인딩이 다르게 된다.</li>\n<li>일반 함수와 메서드로 호출되었을 때의 this 차이</li>\n<li>기본적으로 this는 전역 객체를 참조하고 있다는 점</li>\n<li>Function.prototype의 메서드인 apply, call, bind의 공통점 및 차이점</li>\n</ol>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\">🪴 성장일지</a></p>\n<ul>\n<li>\n<p><a href=\"#javascript-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4\"><code class=\"language-text\">JavaScript</code> 일급 객체</a></p>\n</li>\n<li>\n<p><a href=\"#javascript-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\"><code class=\"language-text\">JavaScript</code> 프로토타입</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B4%EB%8B%9D\">프로토타입 체이닝</a></li>\n<li><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%84%9C%EB%93%9C\">정적 메서드, 프로토타입 메서드, 인스턴스 메서드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#javascript-this\"><code class=\"language-text\">JavaScript</code> this</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 29, 2022","title":"220829(월)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/8/220829-gl/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/from-time-to-time/think/2/","nextSlug":"/steadily/growth-diary/2022/8/220826-gl/","prevSlug":"/steadily/growth-diary/2022/8/220829-gl/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}