{"componentChunkName":"component---src-templates-blog-template-js","path":"/from-time-to-time/newspaper/2023/1/12-np/","result":{"data":{"cur":{"id":"55eb7bf7-6b55-5081-864d-adfa9d369e85","html":"<h2 id=\"️-신문스크랩-21\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%8B%A0%EB%AC%B8%EC%8A%A4%ED%81%AC%EB%9E%A9-21\" aria-label=\"️ 신문스크랩 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗞️ 신문스크랩 2.1</h2>\n<p>기존 티스토리 블로그에서 매일 작성하던 신문 스크랩을 다시 시작하기로 했다.<br/>\n개발자는 문제를 해결하는 사람이다. 그러니 항상 세상에서 일어나는 일(문제)에 관심을 가져야 한다.<br/>\n인상깊은 기사의 헤드라인을 적고 모르는 단어에 대한 정리, 그리고 내 생각을 간단하게 덧붙이는 것으로 가볍게 시작해보자.<br/>\n(v2.1 추가) 기사의 핵심 키워드를 추가해보자.</p>\n<h2 id=\"-주요-기사\" style=\"position:relative;\"><a href=\"#-%EC%A3%BC%EC%9A%94-%EA%B8%B0%EC%82%AC\" aria-label=\" 주요 기사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌻 주요 기사</h2>\n<p><code class=\"language-text\">부하직원들 성과 낮아 고민이라면... '독분장군 리더' 아닌지 돌아보세요</code></p>\n<ul>\n<li>조직을 관리하는 스킬보다 리더의 마인드셋이 먼저</li>\n<li>리더십은 리더가 <code class=\"language-text\">어떤 사람인가</code>의 문제</li>\n<li>주목받는 리더십 마인드: 정직과 겸손</li>\n<li>한 번에 모든 것을 바꾸기보단, 조금씩 나아지려는 시도가 필요하다.</li>\n</ul>\n<h3 id=\"-키워드\" style=\"position:relative;\"><a href=\"#-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\" 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗞 키워드</h3>\n<ul>\n<li>조직, 리더, 리더십, 정직, 겸손</li>\n</ul>\n<h3 id=\"-단어-정리\" style=\"position:relative;\"><a href=\"#-%EB%8B%A8%EC%96%B4-%EC%A0%95%EB%A6%AC\" aria-label=\" 단어 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔤 단어 정리</h3>\n<ul>\n<li>없음</li>\n</ul>\n<h3 id=\"-내-생각\" style=\"position:relative;\"><a href=\"#-%EB%82%B4-%EC%83%9D%EA%B0%81\" aria-label=\" 내 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 내 생각</h3>\n<p>따르고 싶은 리더는 어떤 사람일까? 물론 이 질문은 사람마다 다른 대답이 돌아올 것이다. 누군가는 자신과 비슷한, 누군가는 자신에게 없는 모습을 리더에게 바랄\n수 있기 때문이다. 하지만 확실한 것은 대다수의 사람들은 <code class=\"language-text\">그 리더가 정말 내가 믿고 의지해도 될 사람인가?</code>에 대해 긍정적인 대답이 되는 사람을 따를 것이라는 사실이다.\n그리고 이런 믿음에 기반해 적절한 능력이 같이 있는 사람이 조금은 특출난 리더가 아닐까 생각한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8B%A0%EB%AC%B8%EC%8A%A4%ED%81%AC%EB%9E%A9-21\">🗞️ 신문스크랩 2.1</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%A3%BC%EC%9A%94-%EA%B8%B0%EC%82%AC\">🌻 주요 기사</a></p>\n<ul>\n<li><a href=\"#-%ED%82%A4%EC%9B%8C%EB%93%9C\">🗞 키워드</a></li>\n<li><a href=\"#-%EB%8B%A8%EC%96%B4-%EC%A0%95%EB%A6%AC\">🔤 단어 정리</a></li>\n<li><a href=\"#-%EB%82%B4-%EC%83%9D%EA%B0%81\">🤔 내 생각</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🗞️ 신문스크랩 2.1 기존 티스토리 블로그에서 매일 작성하던 신문 스크랩을 다시 시작하기로 했다.\n개발자는 문제를 해결하는 사람이다. 그러니 항상 세상에서 일어나는 일(문제)에 관심을 가져야 한다.\n인상깊은 기사의 헤드라인을 적고 모르는 단어에 대한 정리, 그리고 내 생각을 간단하게 덧붙이는 것으로 가볍게 시작해보자.\n(v2.1 추가) 기사의 핵심 키워드를 추가해보자. 🌻 주요 기사  조직을 관리하는 스킬보다 리더의 마인드셋이 먼저 리더십은 리더가 의 문제 주목받는 리더십 마인드: 정직과 겸손 한 번에 모든 것을 바꾸기보단, 조금씩 나아지려는 시도가 필요하다. 🗞 키워드 조직, 리더, 리더십, 정직, 겸손 🔤 단어 정리 없음 🤔 내 생각 따르고 싶은 리더는 어떤 사람일까? 물론 이 질문은 사람마다 다른 대답이 돌아올 것이다. 누군가는 자신과 비슷한, 누군가는 자신에게 없는 모습을 리더에게 바랄\n수 있기 때문이다. 하지만 확실한 것은 대다수의 사람들은 에 대해 긍정적인 대답이 되는 …","frontmatter":{"date":"January 12, 2023","title":"230112(목)","categories":"신문스크랩","author":"제이든","emoji":"📰"},"fields":{"slug":"/from-time-to-time/newspaper/2023/1/12-np/"}},"next":{"id":"dbc8ea08-837a-5d82-beae-8ef8f14f5598","html":"<h2 id=\"-성장일지-31\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-31\" aria-label=\" 성장일지 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎄 성장일지 3.1</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드 (1.0)<br/>\n최대한 간단하게 정리, 추후에 보면서 스스로 설명<br/>\n🍉 경험 위주로 (2.0)<br/>\n단순 정보를 전달하기보다 무엇을 배웠고 어떻게 해결했는지 짧고 간단하게 작성<br/>\n❄️ 정해진 템플릿에 맞춰서 (3.0)<br/>\n키워드, 경험 모두 좋다. 다만 매일 작성하기로 마음 먹은만큼 핵심만 간결하게 정리할 수 있게 템플릿을 작성\n(3.1) 230102부터 시작되는 학습에 관한 내용 추가</p>\n</blockquote>\n<h2 id=\"-오늘의-키워드\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\" 오늘의 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔑 오늘의 키워드</h2>\n<h3 id=\"컴퓨터-구조\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0\" aria-label=\"컴퓨터 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴퓨터 구조</h3>\n<ul>\n<li>중앙처리장치(CPU), 기억장치(RAM; Memory), 기타 입출력장치(I/O)로 구성되어있다. 각 장치는 시스템 버스로 연결되어있다.</li>\n</ul>\n<h3 id=\"cpu\" style=\"position:relative;\"><a href=\"#cpu\" aria-label=\"cpu permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CPU</h3>\n<ul>\n<li>중앙처리장치. 컴퓨터 시스템을 통제하고 프로그램의 연산을 실행 및 처리한다.</li>\n<li>제어장치(CU), 연산장치(ALU), 레지스터 그리고 이 3개를 연결해주는 버스(회선)로 구성된다.</li>\n</ul>\n<blockquote>\n<p>CPU 작동 순서: Memory에 저장된 프로그램(명령어)을 차례대로 fetch해서(가져와서) 해당 명령어를 decode하여(분류하여) execute한다.(실행한다.)<br/>\ndump: 컴퓨터 프로그램이 특정 시점에 작업 중이던 메모리 상태를 기록한 것으로, 보통 비정상적으로 종료됐을 때 만들어진다. 즉, 비정상적인 종료가 발생하는 경우 커널에서 해당 프로세스와 관련된메모리 상태를 기록한 파일이다.</p>\n</blockquote>\n<h4 id=\"제어장치cu\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%96%B4%EC%9E%A5%EC%B9%98cu\" aria-label=\"제어장치cu permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제어장치(CU)</h4>\n<blockquote>\n<p>레지스터 사이의 데이터 전송을 감시하고 ALU(연산장치)의 동작을 지시한다.<br/>\n적절한 순서로 명령을 꺼내고, 각 명령을 해석하여 산술논리 연산 장치나 기타 부분으로 적절한 신호를 보낸다.</p>\n</blockquote>\n<ul>\n<li>프로그램 카운터(Program Counter): 다음에 수행할 명령어의 주소를 기억하는 레지스터</li>\n<li>명령 해독기(Instruction Decoder): 수행해야할 명령어를 해석하여 부호기로 전달하는 회로</li>\n<li>부호기(Encoder): 전송된 명령어를 제어, 필요한 신호로 변환하는 회로</li>\n<li>명령 레지스터(Instruction Register; IR): 현재 수행 중인 명령어를 기억하는 레지스터</li>\n<li>주소 해독기(Address Decoder): IR로부터 받은 주소를 해석하는 회로</li>\n<li>메모리 주소 레지스터(Memory Address Register; MAR): 주소를 기억하는 레지스터</li>\n<li>메모리 버퍼 레지스터(Memory Buffer Register; MBR): 내용(자료)를 기억하는 레지스터</li>\n</ul>\n<h4 id=\"연산장치alu\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%A5%EC%B9%98alu\" aria-label=\"연산장치alu permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연산장치(ALU)</h4>\n<blockquote>\n<p>명령어를 실행하기 위한 연산을 수행하는 장치<br/>\n연산에 필요한 자료를 입력받아 더하기, 빼기, AND, OR 등의 실제적인 연산을 처리한다.</p>\n</blockquote>\n<ul>\n<li>가산기: 2진수 덧셈을 수행하는 회로</li>\n<li>보수기: 입력된 값을 보수로 변환하여 뺄셈을 수행하는 회로</li>\n<li>누산기: 중간 연산 결과를 일시적으로 기억하는 레지스터</li>\n<li>데이터 레지스터: 연산한 데이터를 기억하는 레지스터</li>\n</ul>\n<h4 id=\"레지스터\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0\" aria-label=\"레지스터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레지스터</h4>\n<ul>\n<li>CPU의 요청을 처리하는 데이터의 임시공간.(CPU에서 사용하는 <code class=\"language-text\">변수</code>라고 생각하자.)</li>\n<li>공간 자체가 작고 가격은 비싸지만, CPU에 직접 연결되어 있어 연산 속도가 매우 빠르다.(RAM보다 훨씬 더 빠르다.)</li>\n<li>CPU는 자체적으로 데이터를 저장할 수 없다.</li>\n<li>그러므로 레지스터를 이용하여 연산처리와 번지지정을 한다.</li>\n</ul>\n<h5 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h5>\n<p><a href=\"https://www.youtube.com/watch?v=Fg00LN30Ezg&#x26;t=2s\">CPU는 어떻게 작동할까?</a>\n<a href=\"https://coding-factory.tistory.com/651\">어셈블리어 기초 사용법</a></p>\n<h2 id=\"-요약-및-하루-간단-회고\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%95%BD-%EB%B0%8F-%ED%95%98%EB%A3%A8-%EA%B0%84%EB%8B%A8-%ED%9A%8C%EA%B3%A0\" aria-label=\" 요약 및 하루 간단 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 요약 및 하루 간단 회고</h2>\n<p>CPU에 대한 좀더 구체적인 개념을 이해할 수 있는 하루였다. 이 개념을 바탕으로 정말 정말 아주 간단하지만, CPU가 명령어를 처리하는 과정을 구현해보았다.\n솔직히 자바스크립트 언어로 CPU의 복잡한 과정을 구현하는 건 쉽지 않은 일이다. 허나, 이렇게 실제로 존재하는 CPU 하드웨어의 과정을 내 생각을 갖고 코드로\n구현해보는 경험은 정말정말정말 의미있고 도움이 되는 것 같다. 사실 그동안 프로그래밍 공부를 하면서 제일 걱정되고 자신없던 게, 실제하는 무언가를 코드로 구현하는\n일이었는데, 점차 자신이 생기고 있어서 계속 더 구현해보고 싶은 욕심이 생긴다. 앞으로도 이렇게 스스로 동기를 부여하고 찾으면서 공부해 나아가자. :)</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-31\">🎄 성장일지 3.1</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%82%A4%EC%9B%8C%EB%93%9C\">🔑 오늘의 키워드</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0\">컴퓨터 구조</a></p>\n</li>\n<li>\n<p><a href=\"#cpu\">CPU</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%A0%9C%EC%96%B4%EC%9E%A5%EC%B9%98cu\">제어장치(CU)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%A5%EC%B9%98alu\">연산장치(ALU)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0\">레지스터</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\">참고 자료</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%9A%94%EC%95%BD-%EB%B0%8F-%ED%95%98%EB%A3%A8-%EA%B0%84%EB%8B%A8-%ED%9A%8C%EA%B3%A0\">📝 요약 및 하루 간단 회고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 11, 2023","title":"230111(수)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/1/11-gl/"}},"prev":{"id":"b32d9fae-5399-5b3a-ba71-24025c0efa59","html":"<h2 id=\"-성장일지-31\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-31\" aria-label=\" 성장일지 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎄 성장일지 3.1</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드 (1.0)<br/>\n최대한 간단하게 정리, 추후에 보면서 스스로 설명<br/>\n🍉 경험 위주로 (2.0)<br/>\n단순 정보를 전달하기보다 무엇을 배웠고 어떻게 해결했는지 짧고 간단하게 작성<br/>\n❄️ 정해진 템플릿에 맞춰서 (3.0)<br/>\n키워드, 경험 모두 좋다. 다만 매일 작성하기로 마음 먹은만큼 핵심만 간결하게 정리할 수 있게 템플릿을 작성\n(3.1) 230102부터 시작되는 학습에 관한 내용 추가</p>\n</blockquote>\n<h2 id=\"-오늘의-키워드\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\" 오늘의 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔑 오늘의 키워드</h2>\n<h3 id=\"패딩바이트-패딩\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%EB%94%A9%EB%B0%94%EC%9D%B4%ED%8A%B8-%ED%8C%A8%EB%94%A9\" aria-label=\"패딩바이트 패딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패딩(바이트 패딩)</h3>\n<p>바이트 패딩(Byte Padding)이란 <code class=\"language-text\">구조체(클래스)에 바이트를 추가해 CPU 접근에 부하를 덜어주는 기법</code></p>\n<blockquote>\n<p>패딩: 속, 충전재 / 불필요하게 넣은 군더더기</p>\n</blockquote>\n<p>좀더 직관적인 설명을 위해 자바 코드를 이해해보자(아주 간단함)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> <span class=\"token class-name\">I</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 클래스의 크기는 단순하게 char(1byte) + int(4byte) => 5byte이다.<br/>\n하지만 결과적으로는 8byte가 나온다.</p>\n<p>위의 경우를 메모리로 살펴보자면 아래와 같다.</p>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F214C9E4857977B1522\" alt=\"메모리 모습\"></p>\n<p>C는 1byte, I는 4byte를 차지한다.<br/>\n만약 32bit CPU라고 가정했을 때, 32bit CPU는 메모리에서 한 번에 32bit(4byte)를 가져와서 연산한다. 즉, 4byte 단위로 접근을 하게 된다.</p>\n<p>이제 C에 값을 대입하면 아래와 같이 4byte 단위로 접근(빨간색)하여 ‘P’라는 값을 쓴다.</p>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F223B674857977C5737\" alt=\"메모리 값 대입\"></p>\n<p>다음 I에 값을 대입할 때는 아래와 같이 2번의 접근을 하게 된다.(한 번으로 안되니까)</p>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F23456F4857977EA636\" alt=\"\"></p>\n<p>위와 같이 I에 값을 쓰기 위해 2번이나 메모리에 다녀와야하는 것은 비효율적이다. 그렇기 때문에 padding을 추가하여 메모리를 조금 낭비하더라도 접근 횟수를 효율적으로 만든다.</p>\n<p>아래와 같이 중간에 3byte의 패딩을 알아서 추가하는 개념이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token number\">3</span>byte <span class=\"token comment\">// padding</span>\n  <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 C와 I에 값을 대입할 때 4byte 단위로 한 번씩만 메모리에 다녀올 수 있게 된다.</p>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F251F604D579782A70A\" alt=\"패딩1\">\n<img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F2114124A5797868905\" alt=\"패딩2\"></p>\n<h3 id=\"포인터\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\"포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포인터</h3>\n<p>모든 데이터는 주소값을 갖고 있으면, 우리가 할당하는 것은 그 값 자체라기보단 그 값을 담고 있는 메모리 주소이다.<br/>\n이 때, 이 메모리 주소를 담을 수 있는 변수가 <code class=\"language-text\">포인터 변수</code>이다. 자바스크립트에는 포인터가 없다. 다만, 비슷하게 표현해보자면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n0x10a1(임의의 메모리주소)에 10이 할당되고\na에는 0x10a1이 할당되는 것이다.\n*/</span>\n<span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nb에는 a의 메모리 주소값이 할당된다.\n*/</span></code></pre></div>\n<p>생각해보면 어차피 a가 메모리 주소를 참조하고 있는데, 무엇때문에 구디 포인터 변수를 만들어서 직접 메모리 주소값을 받아오는걸까?<br/>\n메모리 주솟값을 담고 있는 포인트 변수의 이점은 아래와 같다.</p>\n<ol>\n<li>메모리에 직접 접근이 가능하다.</li>\n<li>구조화된 자료를 만들어 효율적인 운영이 가능하다.</li>\n<li>Call by reference 방식을 이용할 수 있다.</li>\n<li>배열, 구조체 등의 복잡한 자료 구조와 함수에 쉽게 접근 가능하다.</li>\n<li>메모리 동적 할당이 가능하다.</li>\n</ol>\n<p>실질적으로 자바스크립트에는 포인터 변수와 같은 개념이 구현되어있지는 않지만, 개념을 이해하고 있도록 하자.</p>\n<h3 id=\"가비지-컬렉션\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98\" aria-label=\"가비지 컬렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가비지 컬렉션</h3>\n<p>더 이상 참조되지 않는 값이 가비지 컬렉터에 의해 삭제되는 것.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'jayden'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// a에 다른 객체를 할당</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'hodu'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 예시에서 첫 번째 객체를 담은 메모리 주소는 더 이상 참조되지 않게 된다. 어느 곳에도 사용하지 않는 값이 메모리에 남아있으면 낭비이기 때문에 가비지 컬렉터에 의해서 삭제된다.<br/>\n자바스크립트 엔진은 실행에 영향을 미치지 않는 다양한 가비지 컬렉션 최적화 기법을 적용한다.</p>\n<h3 id=\"메모리-구조\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-label=\"메모리 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 구조</h3>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbUMTK9%2FbtqAxORN5Zp%2Fw7T9wYU3CBESv7ByHy18f0%2Fimg.jpg\" alt=\"메모리 구조\"></p>\n<p>메모리는 크게 커널 영역과 유저 영역으로 나뉜다.<br/>\n커널 영역은 말 그대로 운영체제의 핵심인 커널이 위치하는 영역으로 유저가 접근할 수 없다. 간단하게 메모리 중에서 운영체제(OS)가 시스템 통제를 위해 사용하는 영역이라고 생각하면 된다. 커널 영역이 가장 높은 메모리 주소값들을 갖고 그 다음 스택 영역이 높은 메모리 주소를 갖는다.(이 때, 스택에 값이 저장될 때는 점차 메모리 주소가 낮아지며 저장된다. 이렇게 함으로써 힙 영역과 같은 공간을 공유하고 커널 영역을 침범하지 않게 한다.<br/>\n커널 영역을 제외한 유저 영역은 스택 영역, 힙 영역, 데이터 영역, 코드 영역으로 나뉜다. 사실은 엄밀히 따지면 하드디스크에 있는 프로그램을 실행하게 되면 그 프로그램이 메모리에 올라와 프로세스가 되고 이 프로세스마다 (스택, 힙, 데이터, 코드)로 구성된 유저 영역을 갖게 된다. 이 개념이 <code class=\"language-text\">프로세스 메모리</code>이다.</p>\n<h4 id=\"스택-영역\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D-%EC%98%81%EC%97%AD\" aria-label=\"스택 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택 영역</h4>\n<ul>\n<li>함수 내에서 지역변수(Local Variable)와 매개변수(Parameter)가 저장되는 영역</li>\n<li>함수가 호출될 때(실행될 때), 필요한 크기만큼 만들어지며 데이터를 저장해 나간다.</li>\n<li>지역변수가 저장되는 영역이기 때문에 함수가 끝나게 되면 스택 영역은 소멸된다.</li>\n<li>LIFO(선입선출) 방식으로 저장된다.</li>\n<li>메모리 주솟값이 높은 곳에서 시작하여 점차 낮아지며 데이터가 저장된다는 특징이 있다.</li>\n</ul>\n<h4 id=\"힙-영역\" style=\"position:relative;\"><a href=\"#%ED%9E%99-%EC%98%81%EC%97%AD\" aria-label=\"힙 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙 영역</h4>\n<ul>\n<li>동적할당된 변수가 저장되는 영역</li>\n<li>필요한 크기만큼 만들어 놓는 스택 영역과 달리 프로그램이 실행되는 도중에 메모리를 할당하는 영역</li>\n<li>참조형 타입(객체)들이 할당되는 영역이다.</li>\n<li>콜 스택(스택 영역)과 달리 LIFO 정책을 따르지 않고 랜덤하게 배치된다.</li>\n<li>메모리 누수를 방지하기 위해 JS엔진의 메모리 관리자(가비지 컬렉터)가 항상 관리한다.(가비지 컬렉션이 발생하는 영역)\n<blockquote>\n<p>참고) <code class=\"language-text\">메모리 누수</code>: 이렇게 더이상 참조되지 않는 메모리가 가비지 컬렉터에 의해 삭제되지 않은 경우를 말한다.(계속 남아서 메모리를 차지하는 경우)</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"데이터-영역\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%98%81%EC%97%AD\" aria-label=\"데이터 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 영역</h4>\n<ul>\n<li>프로그램의 전역 변수와 정적 변수가 저장되는 영역\n<ul>\n<li>자바스크립트에서는 static으로 구현된 정적 변수는 없다.</li>\n</ul>\n</li>\n<li>프로그램의 시작과 함께 할당되고 프로그램이 종료되면 소멸한다.</li>\n</ul>\n<h4 id=\"코드-영역\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%81%EC%97%AD\" aria-label=\"코드 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 영역</h4>\n<ul>\n<li>실행할 프로그램의 코드가 저장되는 영역</li>\n<li>CPU에서 코드 영역에 저장된 명령어를 하나씩 가져가 처리하게 된다.</li>\n</ul>\n<h3 id=\"mallocmemory-allocation-메모리-할당\" style=\"position:relative;\"><a href=\"#mallocmemory-allocation-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9\" aria-label=\"mallocmemory allocation 메모리 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>malloc(memory allocation; 메모리 할당)</h3>\n<ul>\n<li>memory allocation(메모리 할당)의 약자</li>\n<li>c언어에서 malloc 함수는 프로그램이 실행되는 도중에 상황에 따라 가변적으로 메모리 공간을 사용하게 해준다.(동적 할당)</li>\n<li>++) 반대로 malloc을 통해 메모리를 할당해주고 다시 사용한 뒤에 다시 할당을 해제해주어야 한다.\n<ul>\n<li>자바스크립트와 같은 고수준 언어에서는 가비지 컬렉터가 알아서 정리해준다.</li>\n<li>c와 같은 저수준 언어에서는 free 함수를 통해 해제해주어야 한다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h4>\n<p><a href=\"https://supercoding.tistory.com/37\">바이트 패딩</a><br/>\n<a href=\"http://www.tcpschool.com/c/c_pointer_intro\">포인터 개념</a><br/>\n<a href=\"https://ggodong.tistory.com/28\">포인트를 왜 쓸까?</a><br/>\n<a href=\"https://ko.javascript.info/garbage-collection\">자바스크립트-가비지 컬렉션</a><br/>\n<a href=\"https://hdacker.tistory.com/6\">메모리 구조(커널영역 포함)</a></p>\n<h2 id=\"-요약-및-하루-간단-회고\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%95%BD-%EB%B0%8F-%ED%95%98%EB%A3%A8-%EA%B0%84%EB%8B%A8-%ED%9A%8C%EA%B3%A0\" aria-label=\" 요약 및 하루 간단 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 요약 및 하루 간단 회고</h2>\n<p>저번 CPU에 이어서 메모리에 대한 공부를 진행했다. 그 동안 코어 자바스크립트와 같은 책을 보고 구글링을 하면서 콜 스택이 뭐고 힙이 뭔지에 대해서 막연하게 알고 있었다.\n아직도 알아야할 내용들이 많지만, 메모리의 각 영역이 어떻게 구분되어있고 운영체제는 어떻게 메모리를 관리하고 있는지 알게 되었다. 물론 생각보다 메모리와 관련한 자료를 서치하면\nc나 자바를 기준으로 설명된 게 많아서, 좀더 자바스크립트와 관련된 방향으로 공부를 할 생각이다. CS 파트가 조금은 지루할 줄 알았는데, 미션이 주어지고 구현을 위주로 하다보니\n공부하는 재미도 있고 머리에 더 남는 기분이다. 무엇보다 하드웨어를 정말 간단하게라도 구현해보는 게 재미있는 거 같다!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-31\">🎄 성장일지 3.1</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%82%A4%EC%9B%8C%EB%93%9C\">🔑 오늘의 키워드</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%8C%A8%EB%94%A9%EB%B0%94%EC%9D%B4%ED%8A%B8-%ED%8C%A8%EB%94%A9\">패딩(바이트 패딩)</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%8F%AC%EC%9D%B8%ED%84%B0\">포인터</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98\">가비지 컬렉션</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\">메모리 구조</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%83%9D-%EC%98%81%EC%97%AD\">스택 영역</a></li>\n<li><a href=\"#%ED%9E%99-%EC%98%81%EC%97%AD\">힙 영역</a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%98%81%EC%97%AD\">데이터 영역</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%81%EC%97%AD\">코드 영역</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mallocmemory-allocation-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9\">malloc(memory allocation; 메모리 할당)</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\">참고 자료</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%9A%94%EC%95%BD-%EB%B0%8F-%ED%95%98%EB%A3%A8-%EA%B0%84%EB%8B%A8-%ED%9A%8C%EA%B3%A0\">📝 요약 및 하루 간단 회고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 12, 2023","title":"230112(목)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2023/1/12-gl/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/from-time-to-time/newspaper/2023/1/12-np/","nextSlug":"/steadily/growth-diary/2023/1/11-gl/","prevSlug":"/steadily/growth-diary/2023/1/12-gl/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}