{"componentChunkName":"component---src-templates-blog-template-js","path":"/from-time-to-time/newspaper/2023/7/18-np/","result":{"data":{"cur":{"id":"416e829c-9d11-5796-85ce-67df75329f83","html":"<h2 id=\"️-신문스크랩-21\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%8B%A0%EB%AC%B8%EC%8A%A4%ED%81%AC%EB%9E%A9-21\" aria-label=\"️ 신문스크랩 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗞️ 신문스크랩 2.1</h2>\n<p>기존 티스토리 블로그에서 매일 작성하던 신문 스크랩을 다시 시작하기로 했다.<br/>\n개발자는 문제를 해결하는 사람이다. 그러니 항상 세상에서 일어나는 일(문제)에 관심을 가져야 한다.<br/>\n인상깊은 기사의 헤드라인을 적고 모르는 단어에 대한 정리, 그리고 내 생각을 간단하게 덧붙이는 것으로 가볍게 시작해보자.<br/>\n(v2.1 추가) 기사의 핵심 키워드를 추가해보자.</p>\n<h2 id=\"-주요-기사\" style=\"position:relative;\"><a href=\"#-%EC%A3%BC%EC%9A%94-%EA%B8%B0%EC%82%AC\" aria-label=\" 주요 기사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌻 주요 기사</h2>\n<p><code class=\"language-text\">원격의료 결국 탈났다 플랫폼 4곳 운영 중단</code></p>\n<ul>\n<li>재진 환자 중심, 약 배송 금지 등의 조건으로 팬데믹 기간 중 비대며 진료보다 불편함 가중</li>\n<li>의료기관의 진료 취소율마저 눈에 띄게 상승, 환자도 비대면 진료 서비스에 대해 회의적</li>\n<li>산업계 “플랫폼 업체가 전부 문을 닫고 시장 자체가 아예 사라지지 않을까 걱정”</li>\n</ul>\n<h3 id=\"-키워드\" style=\"position:relative;\"><a href=\"#-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\" 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗞 키워드</h3>\n<ul>\n<li>산업, IT, 의료산업</li>\n</ul>\n<h3 id=\"-단어-정리\" style=\"position:relative;\"><a href=\"#-%EB%8B%A8%EC%96%B4-%EC%A0%95%EB%A6%AC\" aria-label=\" 단어 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔤 단어 정리</h3>\n<ul>\n<li>없음</li>\n</ul>\n<h3 id=\"-내-생각\" style=\"position:relative;\"><a href=\"#-%EB%82%B4-%EC%83%9D%EA%B0%81\" aria-label=\" 내 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 내 생각</h3>\n<p>제대로 찾아본 적은 없지만, 원격의료에 대해서 내심 기대했었다. 회사를 다니던 시절, 아파도 도저히 병원에 갈 시간이 잘 나지 않아서 난처했던 기억때문이었다.\n시간과 장소에 구애받지 않고 진료를 받을 수 있다는 점이 매력적이었다. 하지만 이번 기사를 보고 나니 원격의료가 그렇게 쉽게 이루어지지 않는다는 것을 알게 되었다.\n원격의료 자체가 기존 의료산업에 IT가 접목되기에 가능한 것인데, 보수적인 혹은 이미 기존의 시스템에 익숙해진 의료계에서 쉽게 받아들이기는 어려운 것 같다. 이는\n의료계만의 문제는 아니다. 환자인 우리도 마찬가지다. 비슷한 비용을 내고 원격으로 진단을 받게 된다면 어떤 선택을 할까? 기대하던 나조차도 마냥 좋을 것 같다는 생각은 들지 않는다.\n그렇기 때문에 이런 단점들 혹은 기존의 인식을 극복하려면 법이나 정책으로 더 강력하게 지원해야 한다. 그래도 기존의 시스템을 바꿀 수 있을까 말까일텐데, 보통 우리나라는\nIT가 접목되는 것에 대해 오히려 제한을 하는 경우가 많으니… 쉽지 않은 것 같다. 그래도 이런 시도를 통해 우리나라 산업계에 계속 문을 두드리는 건 좋다고 생각한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8B%A0%EB%AC%B8%EC%8A%A4%ED%81%AC%EB%9E%A9-21\">🗞️ 신문스크랩 2.1</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%A3%BC%EC%9A%94-%EA%B8%B0%EC%82%AC\">🌻 주요 기사</a></p>\n<ul>\n<li><a href=\"#-%ED%82%A4%EC%9B%8C%EB%93%9C\">🗞 키워드</a></li>\n<li><a href=\"#-%EB%8B%A8%EC%96%B4-%EC%A0%95%EB%A6%AC\">🔤 단어 정리</a></li>\n<li><a href=\"#-%EB%82%B4-%EC%83%9D%EA%B0%81\">🤔 내 생각</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🗞️ 신문스크랩 2.1 기존 티스토리 블로그에서 매일 작성하던 신문 스크랩을 다시 시작하기로 했다.\n개발자는 문제를 해결하는 사람이다. 그러니 항상 세상에서 일어나는 일(문제)에 관심을 가져야 한다.\n인상깊은 기사의 헤드라인을 적고 모르는 단어에 대한 정리, 그리고 내 생각을 간단하게 덧붙이는 것으로 가볍게 시작해보자.\n(v2.1 추가) 기사의 핵심 키워드를 추가해보자. 🌻 주요 기사  재진 환자 중심, 약 배송 금지 등의 조건으로 팬데믹 기간 중 비대며 진료보다 불편함 가중 의료기관의 진료 취소율마저 눈에 띄게 상승, 환자도 비대면 진료 서비스에 대해 회의적 산업계 “플랫폼 업체가 전부 문을 닫고 시장 자체가 아예 사라지지 않을까 걱정” 🗞 키워드 산업, IT, 의료산업 🔤 단어 정리 없음 🤔 내 생각 제대로 찾아본 적은 없지만, 원격의료에 대해서 내심 기대했었다. 회사를 다니던 시절, 아파도 도저히 병원에 갈 시간이 잘 나지 않아서 난처했던 기억때문이었다.\n시간과 장소에 구애받지…","frontmatter":{"date":"July 18, 2023","title":"230718(화) 원격의료... 이대로 끝나나?","categories":"신문스크랩","author":"제이든","emoji":"📰"},"fields":{"slug":"/from-time-to-time/newspaper/2023/7/18-np/"}},"next":{"id":"6d74997a-02c0-5fb8-a1f2-1fbecf4dc9ab","html":"<h2 id=\"-cs-network-스터디\" style=\"position:relative;\"><a href=\"#-cs-network-%EC%8A%A4%ED%84%B0%EB%94%94\" aria-label=\" cs network 스터디 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧷 CS-Network 스터디</h2>\n<p>코드스쿼드 과정을 마치고 프론트엔드 개발자로서 알아야될 네트워크 지식을 채우기 위해 시작한 CS 스터디!<br/>\n<a href=\"https://github.com/VSFe/Tech-Interview/blob/main/03-NETWORK.md\">Tech-Interview-Network</a>를 참고하여 스터디를 진행하기로 했다.</p>\n<h1 id=\"2-http-응답코드에-대해-설명해-주세요\" style=\"position:relative;\"><a href=\"#2-http-%EC%9D%91%EB%8B%B5%EC%BD%94%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4-%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"2 http 응답코드에 대해 설명해 주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. HTTP 응답코드에 대해 설명해 주세요.</h1>\n<p>HTTP 응답코드는 HTTP 요청에 대한 응답으로 요청의 처리 상태를 알려주는 코드로 클라이언트와 서버 간의 HTTP 통신이 복잡해짐에 따라 이를 간다나게 표현하기 위해 만들어졌습니다. 100번부터 500번대로 크게 5가지의 응답을 코드로 나타냅니다.\n100번대는 <code class=\"language-text\">요청을 받아 작업을 진행 중</code>이라는 의미, 200번대는 <code class=\"language-text\">요청을 성공적으로 받았고 해당 요청을 성공적으로 완료했다</code>는 의미, 300번대는 <code class=\"language-text\">해당 요청을 완료하기 위해서는 다른 페이지로 리다이렉션 해야한다</code>는 의미, 400번대는 <code class=\"language-text\">클라이언트 측의 오류로, 요청 자체가 올바르지 않다</code>는 의미, 500번대는 <code class=\"language-text\">서버에서 오류가 생겨 요청을 처리할 수 없다</code>는 의미입니다. 일반적으로 통신이 성공했을 때, 200번 그리고 클라이언트 측의 요청 리소스가 서버에 존재하지 않을 때의 404번을 자주 볼 수 있습니다.</p>\n<h2 id=\"1-401-unauthorized-와-403-forbidden은-의미적으로-어떤-차이가-있나요\" style=\"position:relative;\"><a href=\"#1-401-unauthorized-%EC%99%80-403-forbidden%EC%9D%80-%EC%9D%98%EB%AF%B8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%96%B4%EB%96%A4-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%9E%88%EB%82%98%EC%9A%94\" aria-label=\"1 401 unauthorized 와 403 forbidden은 의미적으로 어떤 차이가 있나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 401 (Unauthorized) 와 403 (Forbidden)은 의미적으로 어떤 차이가 있나요?</h2>\n<p>401번은 사용자가 인증되지 않은 상태에서 특정 리소스에 접근할 때 발생하고 403번은 사용자가 인증되어있지만 해당 사용자에게는 부여되지 않은 권한에 접근할 때 발생합니다. 근본적으로 이 둘의 큰 차이는 현재 유저가 인증이 되어있느냐, 되어있지 않느냐입니다.</p>\n<h2 id=\"2-200-ok-와-201-created-의-차이에-대해-설명해-주세요\" style=\"position:relative;\"><a href=\"#2-200-ok-%EC%99%80-201-created-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4-%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"2 200 ok 와 201 created 의 차이에 대해 설명해 주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 200 (ok) 와 201 (created) 의 차이에 대해 설명해 주세요.</h2>\n<p>200번은 클라이언트가 서버에게 요청한 작업이 성공적으로 수행되었음을 나타냅니다. 마찬가지로 201번도 클라이언트의 요청이 성공했다는 의미지만 좀더 나아가서 서버에 새로운 리소스가 생성되었음을 나타냅니다.그러므로 보통 POST, PUT 요청 성공에 대한 응답을 나타냅니다.</p>\n<h1 id=\"3-http-method-에-대해-설명해-주세요\" style=\"position:relative;\"><a href=\"#3-http-method-%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4-%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"3 http method 에 대해 설명해 주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. HTTP Method 에 대해 설명해 주세요.</h1>\n<p>HTTP 메서드는 클라이언트가 서버에 어떤 작업을 요청할지 즉, 어떤 종류의 요청인지를 나타냅니다.\n일반적으로 GET, POST, PUT, PATCH, DELETE 5가지의 메서드가 자주 사용됩니다.</p>\n<h2 id=\"1-http-method의-멱등성에-대해-설명해-주세요\" style=\"position:relative;\"><a href=\"#1-http-method%EC%9D%98-%EB%A9%B1%EB%93%B1%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4-%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"1 http method의 멱등성에 대해 설명해 주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. HTTP Method의 멱등성에 대해 설명해 주세요.</h2>\n<p>멱등성은 특정 연산을 1번 한 것과 여러 번 진행한 것이 동일한 결과를 가지는 성질입니다. 즉, HTTP 메서드의 멱등성은 동일한 요청을 1번 보내는 것과 여러 번 보내는 것의 결과가 동일하다는 것을 의미합니다. 즉, 멱등성의 핵심은 ‘여러번 연산을 진행해도 상관없다.‘는 것에 있습니다.\n예를 들어 GET 메서드의 경우 1번 요청을 보내거나 여러 번 요청을 보내도 그 결과가 언제나 동일하므로 멱등성을 가집니다. 이렇게 멱등성을 갖는 대표적인 메서드는 GET, PUT, DELETE가 있습니다. 반대로 POST와 같이 1번 보내면 요청에 대해 어떤 데이터를 1번 생성하고 여러 번 보내면 어떤 데이터를 여러 번 생성하기 때문에 둘의 결과가 동일하지 않아 멱등하지 않습니다.\n추가로 데이터의 일부를 수정하는 PATCH의 경우, 요청의 조건에 따라 멱등 유무가 달라집니다. ‘어떤 유저의 이메일을 특저 이메일로 변경하는’ PATCH 요청의 경우, 1번 보내나 여러 번 보내나 동일한 이메일로 변경되므로 멱등합니다. 그렇지만 ‘특정 유저의 방문 횟수를 1씩 증가시키도록 변경하는’ PATCH 요청의 경우, 1번 보내는 것과 여러 번 보내는 것의 결과가 달라지므로 멱등하지 않게 됩니다.</p>\n<blockquote>\n<p>궁금증. POST가 아닌 GET으로도 데이터를 생성하는 경우도 있는 걸로 알고 있는데, 이런 경우 GET은 멱등성이 없어지는 게 아닌가?\n해결. GET으로도 서버에 데이터를 생성하는 게 불가능한 것은 아니다. 그렇지만 엄밀히 HTTP 프로토콜에서의 GET 메서드는 안전하고 멱등해야한다. 즉, 애초에 GET으로 데이터를 생성하는 요청을 보내는 것 자체가 HTTP 프로토콜의 원칙을 깬 것이다. 이렇게 되면 웹 스크랩핑, 웹 서버 로그 분석, 캐싱 등에서 문제가 발생할 수 있다.</p>\n</blockquote>\n<h2 id=\"2-get과-post의-차이는-무엇인가요\" style=\"position:relative;\"><a href=\"#2-get%EA%B3%BC-post%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"2 get과 post의 차이는 무엇인가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. GET과 POST의 차이는 무엇인가요?</h2>\n<p>먼저 데이터를 전송하는 관점에서 말씀드리겠습니다.\nGET은 URL의 일부로 데이터를 전송하고 POST는 요청의 본문(body)으로 데이터를 전송합니다. 그렇기에 GET은 본문에 데이터가 노출되어 보안에 비교적 취약하다고 브라우저의 url 제한에 따른 데이터 크기 제한이 있다는 단점이 있습니다. 반면 POST는 요청의 본문에 데이터를 전송하기에 보안이 비교적 강하고 데이터 크기의 제한이 비교적 여유롭다는 장점이 있습니다.</p>\n<p>다음으로 안정성과 멱등성의 관점입니다.\nGET은 안정하고 멱등하기 때문에 여러 번 요청을 보내도 서버 혹은 DB의 상태를 변경시키지 않습니다. 반면, POST의 경우 요청에 따라 서버의 상태를 변경시키기 때문에 안정하고 멱등하지 않습니다.</p>\n<p>앞선 특징들에 따라 GET은 주로 데이터를 조회하는 데 사용되고 POST는 서버에 데이터를 전송하거나 서버의 상태를 변경하는데 사용합니다.</p>\n<h2 id=\"3-post와-put-patch의-차이는-무엇인가요\" style=\"position:relative;\"><a href=\"#3-post%EC%99%80-put-patch%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"3 post와 put patch의 차이는 무엇인가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. POST와 PUT, PATCH의 차이는 무엇인가요?</h2>\n<p>3가지 메서드 모두 서버의 상태를 변경하는 데 사용됩니다.\n다만, POST는 주로 서버에 새로운 데이터를 생성할 때 사용됩니다. 즉, 멱등하지 않습니다.\nPUT은 기존의 데이터를 완전히 새로운 상태로 업데이트하거나 새로운 데이터를 생성하는 데 사용됩니다. PUT의 경우 멱등성을 가집니다.\nPATCH는 기존 데이터의 일부를 변경하는 데 사용되는 메서드로, 요청의 형태에 따라 멱등 유무가 달라집니다. ‘어떤 유저의 이메일을 특저 이메일로 변경하는’ PATCH 요청의 경우, 1번 보내나 여러 번 보내나 동일한 이메일로 변경되므로 멱등합니다. 그렇지만 ‘특정 유저의 방문 횟수를 1씩 증가시키도록 변경하는’ PATCH 요청의 경우, 1번 보내는 것과 여러 번 보내는 것의 결과가 달라지므로 멱등하지 않게 됩니다.</p>\n<h2 id=\"4-http-11-이후로-get에도-body에-데이터를-실을-수-있게-되었습니다-그럼에도-불구하고-왜-아직도-이런-방식을-지양하는-것일까요\" style=\"position:relative;\"><a href=\"#4-http-11-%EC%9D%B4%ED%9B%84%EB%A1%9C-get%EC%97%90%EB%8F%84-body%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%8B%A4%EC%9D%84-%EC%88%98-%EC%9E%88%EA%B2%8C-%EB%90%98%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4-%EA%B7%B8%EB%9F%BC%EC%97%90%EB%8F%84-%EB%B6%88%EA%B5%AC%ED%95%98%EA%B3%A0-%EC%99%9C-%EC%95%84%EC%A7%81%EB%8F%84-%EC%9D%B4%EB%9F%B0-%EB%B0%A9%EC%8B%9D%EC%9D%84-%EC%A7%80%EC%96%91%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%BC%EA%B9%8C%EC%9A%94\" aria-label=\"4 http 11 이후로 get에도 body에 데이터를 실을 수 있게 되었습니다 그럼에도 불구하고 왜 아직도 이런 방식을 지양하는 것일까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. HTTP 1.1 이후로, GET에도 Body에 데이터를 실을 수 있게 되었습니다. 그럼에도 불구하고 왜 아직도 이런 방식을 지양하는 것일까요?</h2>\n<p>HTTP는 응용 계층의 프로토콜로서 결국 하나의 약속이기 때문입니다. HTTP의 버전과는 상관없이 GET 메서드는 안정성과 멱등성을 유지해야합니다. 즉, 서버의 상태를 업데이트하면 HTTP라는 약속을 어기는 것이 됩니다. HTTP 1.1부터 명세의 일관성과 유연성을 위해 모든 HTTP 메서드가 요청 라인(request line), 헤더(header), 본문(body) 구조를 갖게 작성되었을 뿐, GET으로 body에 데이터를 담는 게 옳다는 것은 아닙니다.\n만약 데이터를 요청 본문(body)에 담아 GET 요청을 보내게 되면 웹 스크랩핑, 웹 서버 로그 분석, 캐싱 등에서 문제가 발생할 수 있습니다. 이를 해결하기 위해 많은 서버와 클라이언트 구현체는 본문(body)을 포함한 GET 요청을 무시하거나 오류를 반환하게 하고 있습니다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-cs-network-%EC%8A%A4%ED%84%B0%EB%94%94\">🧷 CS-Network 스터디</a></li>\n<li><a href=\"#1-401-unauthorized-%EC%99%80-403-forbidden%EC%9D%80-%EC%9D%98%EB%AF%B8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%96%B4%EB%96%A4-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%9E%88%EB%82%98%EC%9A%94\">1. 401 (Unauthorized) 와 403 (Forbidden)은 의미적으로 어떤 차이가 있나요?</a></li>\n<li><a href=\"#2-200-ok-%EC%99%80-201-created-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4-%EC%A3%BC%EC%84%B8%EC%9A%94\">2. 200 (ok) 와 201 (created) 의 차이에 대해 설명해 주세요.</a></li>\n<li><a href=\"#1-http-method%EC%9D%98-%EB%A9%B1%EB%93%B1%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4-%EC%A3%BC%EC%84%B8%EC%9A%94\">1. HTTP Method의 멱등성에 대해 설명해 주세요.</a></li>\n<li><a href=\"#2-get%EA%B3%BC-post%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\">2. GET과 POST의 차이는 무엇인가요?</a></li>\n<li><a href=\"#3-post%EC%99%80-put-patch%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\">3. POST와 PUT, PATCH의 차이는 무엇인가요?</a></li>\n<li><a href=\"#4-http-11-%EC%9D%B4%ED%9B%84%EB%A1%9C-get%EC%97%90%EB%8F%84-body%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%8B%A4%EC%9D%84-%EC%88%98-%EC%9E%88%EA%B2%8C-%EB%90%98%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4-%EA%B7%B8%EB%9F%BC%EC%97%90%EB%8F%84-%EB%B6%88%EA%B5%AC%ED%95%98%EA%B3%A0-%EC%99%9C-%EC%95%84%EC%A7%81%EB%8F%84-%EC%9D%B4%EB%9F%B0-%EB%B0%A9%EC%8B%9D%EC%9D%84-%EC%A7%80%EC%96%91%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%BC%EA%B9%8C%EC%9A%94\">4. HTTP 1.1 이후로, GET에도 Body에 데이터를 실을 수 있게 되었습니다. 그럼에도 불구하고 왜 아직도 이런 방식을 지양하는 것일까요?</a></li>\n</ul>\n</div>","frontmatter":{"date":"July 17, 2023","title":"CS-Network. HTTP에 대해","categories":"스터디","author":"제이든","emoji":"🧷"},"fields":{"slug":"/from-time-to-time/study/cs-network/http/"}},"prev":{"id":"ceb4ee44-11cd-51c9-ba7e-34cf80a93200","html":"<h1 id=\"-쏙쏙-들어오는-함수형-코딩---심플한-코드로-복잡한-소프트웨어-길들이기\" style=\"position:relative;\"><a href=\"#-%EC%8F%99%EC%8F%99-%EB%93%A4%EC%96%B4%EC%98%A4%EB%8A%94-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%94%A9---%EC%8B%AC%ED%94%8C%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B8%B8%EB%93%A4%EC%9D%B4%EA%B8%B0\" aria-label=\" 쏙쏙 들어오는 함수형 코딩   심플한 코드로 복잡한 소프트웨어 길들이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖍 쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</h1>\n<p>이 글은 <a href=\"https://product.kyobobook.co.kr/detail/S000001952246\">쏙쏙 들어오는 함수형 코딩 - 심플한 코드로 복잡한 소프트웨어 길들이기</a>를 읽고 작성한 글입니다.\n함수형도 함수형이지만, 이 책을 통해 좀더 깔끔하고 직관적인 코드를 작성할 수 있을 것이란 팀원들의 의견을 토대로 이번 스터디 서적으로 선정하였습니다.</p>\n<h2 id=\"chap-1-쏙쏙-들어오는-함수형-코딩에-오신-것을-환영합니다\" style=\"position:relative;\"><a href=\"#chap-1-%EC%8F%99%EC%8F%99-%EB%93%A4%EC%96%B4%EC%98%A4%EB%8A%94-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%94%A9%EC%97%90-%EC%98%A4%EC%8B%A0-%EA%B2%83%EC%9D%84-%ED%99%98%EC%98%81%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"chap 1 쏙쏙 들어오는 함수형 코딩에 오신 것을 환영합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chap 1. 쏙쏙 들어오는 함수형 코딩에 오신 것을 환영합니다.</h2>\n<p>함수형 사고가 무엇인지 그리고 왜 함수형 사고가 더 좋은 소프트웨어를 만드려는 개발자에게 도움이 되는지 설명한다.</p>\n<h3 id=\"함수형-프로그래밍이란\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\" aria-label=\"함수형 프로그래밍이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍이란?</h3>\n<ul>\n<li>수학 함수를 사용하고 부수 효과를 피하는 것이 특징인 프로그래밍 패러다임</li>\n<li>부수 효과 없이 순수 함수만 사용하는 프로그래밍 스타일</li>\n</ul>\n<h4 id=\"부수-효과\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC\" aria-label=\"부수 효과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부수 효과</h4>\n<ul>\n<li>함수가 리턴값 이외에 하는 모든 일</li>\n<li>리턴값이 필요해서 호출했지만 의도하지 않게 부수효과가 발생할 수 있다.</li>\n<li>ex) 이메일 보내기, 파일 읽기, 웹 요청하기 등</li>\n</ul>\n<h4 id=\"순수-함수\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98\" aria-label=\"순수 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순수 함수</h4>\n<ul>\n<li>인자에만 의존하고 부수 효과가 없는 함수</li>\n<li>같은 인자를 넣으면 항상 같은 결과를 돌려준다.</li>\n</ul>\n<blockquote>\n<p>정의에 따르면 함수형 프로그래머는 항상 부수 효과를 피하고 순수 함수만 사용해야할 것 같지만, <code class=\"language-text\">실제 함수형 프로그래머는 부수 효과와 순수하지 않은 함수를 사용한다.</code></p>\n</blockquote>\n<h3 id=\"실용주의자가-바라본-함수형-프로그래밍-정의의-문제점\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%9A%A9%EC%A3%BC%EC%9D%98%EC%9E%90%EA%B0%80-%EB%B0%94%EB%9D%BC%EB%B3%B8-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%A0%95%EC%9D%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"실용주의자가 바라본 함수형 프로그래밍 정의의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실용주의자가 바라본 함수형 프로그래밍 정의의 문제점</h3>\n<p>함수형 프로그래밍의 정의는 학문적으로 가치가 있으나, 실제 프로그래밍을 하는 데에 있어서 큰 도움이 되지 않는다.</p>\n<h4 id=\"문제-1-부수-효과는-필요하다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-1-%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4\" aria-label=\"문제 1 부수 효과는 필요하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 1. 부수 효과는 필요하다!</h4>\n<p>정의에는 부수 효과를 완전히 쓰지 말라는 것처럼 되어 있지만 필요할 때는 써야 한다.(내 생각: react의 useEffect도 필요하다!)</p>\n<h4 id=\"문제-2-함수형-프로그래밍은-부수-효과를-잘-다룰-수-있다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-2-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%80-%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EC%9E%98-%EB%8B%A4%EB%A3%B0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"문제 2 함수형 프로그래밍은 부수 효과를 잘 다룰 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 2. 함수형 프로그래밍은 부수 효과를 잘 다룰 수 있다.</h4>\n<p>순수하지 않음 함수를 잘 다룰 수 있는 기술들이 많이 존재한다.</p>\n<h4 id=\"문제-3-함수형-프로그래밍은-실용적이다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-3-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%80-%EC%8B%A4%EC%9A%A9%EC%A0%81%EC%9D%B4%EB%8B%A4\" aria-label=\"문제 3 함수형 프로그래밍은 실용적이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 3. 함수형 프로그래밍은 실용적이다.</h4>\n<p>정의만 보면 함수형 프로그래밍은 수학적이라 실제 소프트웨어 개발에서 사용하지 않는 것처럼 느껴지지만, 함수형 프로그래밍으로 잘 만들어진 좋은 소프트웨어가 많이 있다.</p>\n<h3 id=\"함수형-프로그래밍을-기술과-개념으로-보기\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%EA%B8%B0%EC%88%A0%EA%B3%BC-%EA%B0%9C%EB%85%90%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EA%B8%B0\" aria-label=\"함수형 프로그래밍을 기술과 개념으로 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍을 기술과 개념으로 보기</h3>\n<p>함수형 프로그래밍의 중요한 개념은 객체지향, 절차지향 프로그래밍을 가리지 않고 모든 프로그래밍 언어에서 사용할 수 있다는 것이다. 함수형 프로그래밍은 코드 어느 곳에서나\n적용할 수 있는 유익한 개념이다.</p>\n<h3 id=\"액션과-계산-데이터-구분하기\" style=\"position:relative;\"><a href=\"#%EC%95%A1%EC%85%98%EA%B3%BC-%EA%B3%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0\" aria-label=\"액션과 계산 데이터 구분하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>액션과 계산, 데이터 구분하기</h3>\n<p>함수형 프로그래밍의 시작은 모든 코드를 액션과 계산, 데이터로 구분할 수 있는 것이다.</p>\n<h4 id=\"액션\" style=\"position:relative;\"><a href=\"#%EC%95%A1%EC%85%98\" aria-label=\"액션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>액션</h4>\n<ul>\n<li>호출하는 횟수나 시점에 영향을 받는 함수(횟수나 시점이 중요한 함수)</li>\n<li>그러므로 호출 시 조심해야 한다.</li>\n<li>다른 코드나 소프트웨어 외부에 영향을 줄 수 있다.</li>\n</ul>\n<h4 id=\"계산\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%82%B0\" aria-label=\"계산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계산</h4>\n<ul>\n<li>호출하는 횟수나 시점이 중요하지 않은 함수</li>\n<li>입력값이 같으면 출력값도 같다.</li>\n<li>실행하기 전까지는 어떻게 동작할지 알 수 없다.</li>\n<li>언제, 어디서 계산해도 결과는 같고 외부에 영향을 주지 않는다.(언제든지 몇 번을 불러도 안전하다.)</li>\n<li>테스트하기 쉽다.</li>\n<li>액션보다 다루기 쉽다.</li>\n</ul>\n<h4 id=\"데이터\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0\" aria-label=\"데이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터</h4>\n<ul>\n<li>호출하는 횟수나 시점이 중요하지 않다.</li>\n<li>정적이고 보이는 그대로의 값을 갖는다.(이벤트에 대해 기록한 사실이다.)</li>\n<li>같은 데이터를 여러 형태로 해석할 수 있다.</li>\n<li>계산보다도 다루기 쉽다.</li>\n</ul>\n<h3 id=\"액션-계산-데이터를-구분했을-때의-장점\" style=\"position:relative;\"><a href=\"#%EC%95%A1%EC%85%98-%EA%B3%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"액션 계산 데이터를 구분했을 때의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>액션, 계산, 데이터를 구분했을 때의 장점?</h3>\n<ul>\n<li>계산과 데이터는 실행 시점이나 횟수에 의존하지 않는다. 그러므로 코드를 계산과 데이터로 바꿀수록 여러가지 복잡한 문제를 더 쉽게 해결할 수 있다.</li>\n<li>액션은 실행 시점과 횟수에 의존하기 때문에 문제가 되지만, 코드 전체에 영향을 주지 않도록 격리시키면 된다. 액션을 계산으로 옮기면 다루기 쉬워진다. 또한, 액션을 안전하게 다룰 수 있는 많은 기술들이 있다.</li>\n</ul>\n<h3 id=\"함수형-사고란\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%82%AC%EA%B3%A0%EB%9E%80\" aria-label=\"함수형 사고란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 사고란?</h3>\n<p>함수형 프로그래머가 소프트웨어 문제를 해결하기 위해 사용하는 기술과 생각</p>\n<h4 id=\"1-액션과-계산-데이터를-구분해서-생각하기\" style=\"position:relative;\"><a href=\"#1-%EC%95%A1%EC%85%98%EA%B3%BC-%EA%B3%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%95%B4%EC%84%9C-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\" aria-label=\"1 액션과 계산 데이터를 구분해서 생각하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 액션과 계산, 데이터를 구분해서 생각하기</h4>\n<p>코드를 구분하고 액션을 계산으로 리팩토링하고 나머지 액션을 더 쉽게 다루는 방법을 알아야 한다. 그리고 이렇게 분류한 코드가 설계 관점에서 왜 유지보수와 테스트가 쉽고 재사용성이 좋은지\n알 수 있어야 한다.</p>\n<h4 id=\"2-일급-추상의-개념-알기\" style=\"position:relative;\"><a href=\"#2-%EC%9D%BC%EA%B8%89-%EC%B6%94%EC%83%81%EC%9D%98-%EA%B0%9C%EB%85%90-%EC%95%8C%EA%B8%B0\" aria-label=\"2 일급 추상의 개념 알기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 일급 추상의 개념 알기</h4>\n<p>대부분의 프로그래밍은 재사용을 위해 조금 더 일반적인 함수 이름을 짓기 위해 고민한다. 함수형도 그렇지만, 함수형은 함수에 함수를 넘겨 더 많은 함수를 재사용할 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#chap-1-%EC%8F%99%EC%8F%99-%EB%93%A4%EC%96%B4%EC%98%A4%EB%8A%94-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%94%A9%EC%97%90-%EC%98%A4%EC%8B%A0-%EA%B2%83%EC%9D%84-%ED%99%98%EC%98%81%ED%95%A9%EB%8B%88%EB%8B%A4\">Chap 1. 쏙쏙 들어오는 함수형 코딩에 오신 것을 환영합니다.</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\">함수형 프로그래밍이란?</a></p>\n<ul>\n<li><a href=\"#%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC\">부수 효과</a></li>\n<li><a href=\"#%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98\">순수 함수</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%A4%EC%9A%A9%EC%A3%BC%EC%9D%98%EC%9E%90%EA%B0%80-%EB%B0%94%EB%9D%BC%EB%B3%B8-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%A0%95%EC%9D%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">실용주의자가 바라본 함수형 프로그래밍 정의의 문제점</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-1-%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4\">문제 1. 부수 효과는 필요하다!</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-2-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%80-%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EC%9E%98-%EB%8B%A4%EB%A3%B0-%EC%88%98-%EC%9E%88%EB%8B%A4\">문제 2. 함수형 프로그래밍은 부수 효과를 잘 다룰 수 있다.</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-3-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%80-%EC%8B%A4%EC%9A%A9%EC%A0%81%EC%9D%B4%EB%8B%A4\">문제 3. 함수형 프로그래밍은 실용적이다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%EA%B8%B0%EC%88%A0%EA%B3%BC-%EA%B0%9C%EB%85%90%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EA%B8%B0\">함수형 프로그래밍을 기술과 개념으로 보기</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%A1%EC%85%98%EA%B3%BC-%EA%B3%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0\">액션과 계산, 데이터 구분하기</a></p>\n<ul>\n<li><a href=\"#%EC%95%A1%EC%85%98\">액션</a></li>\n<li><a href=\"#%EA%B3%84%EC%82%B0\">계산</a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0\">데이터</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%95%A1%EC%85%98-%EA%B3%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EC%9E%A5%EC%A0%90\">액션, 계산, 데이터를 구분했을 때의 장점?</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%82%AC%EA%B3%A0%EB%9E%80\">함수형 사고란?</a></p>\n<ul>\n<li><a href=\"#1-%EC%95%A1%EC%85%98%EA%B3%BC-%EA%B3%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%95%B4%EC%84%9C-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\">1. 액션과 계산, 데이터를 구분해서 생각하기</a></li>\n<li><a href=\"#2-%EC%9D%BC%EA%B8%89-%EC%B6%94%EC%83%81%EC%9D%98-%EA%B0%9C%EB%85%90-%EC%95%8C%EA%B8%B0\">2. 일급 추상의 개념 알기</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 18, 2023","title":"쏙쏙 들어오는 함수형 코딩 Chapter 1","categories":"스터디 책","author":"제이든","emoji":"🖍️"},"fields":{"slug":"/from-time-to-time/study/ssok-ssok-functional/ch-1/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/from-time-to-time/newspaper/2023/7/18-np/","nextSlug":"/from-time-to-time/study/cs-network/http/","prevSlug":"/from-time-to-time/study/ssok-ssok-functional/ch-1/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}