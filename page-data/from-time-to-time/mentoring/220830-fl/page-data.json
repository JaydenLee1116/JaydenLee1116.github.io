{"componentChunkName":"component---src-templates-blog-template-js","path":"/from-time-to-time/mentoring/220830-fl/","result":{"data":{"cur":{"id":"62c22488-76ed-5ea8-9120-1ff3bc7e8f2a","html":"<h2 id=\"-f-lab-멘토링-기록\" style=\"position:relative;\"><a href=\"#-f-lab-%EB%A9%98%ED%86%A0%EB%A7%81-%EA%B8%B0%EB%A1%9D\" aria-label=\" f lab 멘토링 기록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌕 F-lab 멘토링 기록</h2>\n<p>멘토링 이후 부족한 부분을 채우기 위한 기록</p>\n<h3 id=\"함수형-프로그래밍이란feat불변성\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80feat%EB%B6%88%EB%B3%80%EC%84%B1\" aria-label=\"함수형 프로그래밍이란feat불변성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍이란?(feat.불변성)</h3>\n<h4 id=\"프로그래밍의-패러다임\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84\" aria-label=\"프로그래밍의 패러다임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래밍의 패러다임</h4>\n<p>프로그래밍 패러다임은 프로그래머에게 프로그래밍의 관점을 갖게 하여 코드를 어떻게 작성할지 결정하는 역할을 한다.<br/>\n새로운 프로그래밍 패러다임을 통해서 새로운 방식으로 생각하는 법을 배우고, 이를 바탕으로 코드를 작성할 수 있다.</p>\n<ul>\n<li>\n<p>명령형 프로그래밍: 무엇(what)을 할 것인지보다 <code class=\"language-text\">어떻게(how) 할 것인지</code></p>\n<ul>\n<li>절차지향 프로그래밍: 수행되어야할 순차적인 처리 과정을 포함하는 방식</li>\n<li>객체지향 프로그래밍: 객체들의 집합으로 프로그램의 상호작용을 표현하는 방식</li>\n</ul>\n</li>\n<li>\n<p>선언형 프로그래밍: 어떻게(how) 할 것인지보다 <code class=\"language-text\">무엇(what)을 할 것인지</code></p>\n<ul>\n<li>함수형 프로그래밍: 순수 함수를 조합하여 프로그램을 만드는 방식</li>\n</ul>\n</li>\n</ul>\n<p>[보충 필요]</p>\n<h3 id=\"옛날-브라우저에서는-어떻게-최근-코드를-사용-가능할까\" style=\"position:relative;\"><a href=\"#%EC%98%9B%EB%82%A0-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B5%9C%EA%B7%BC-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%A0%EA%B9%8C\" aria-label=\"옛날 브라우저에서는 어떻게 최근 코드를 사용 가능할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옛날 브라우저에서는 어떻게 최근 코드를 사용 가능할까?</h3>\n<p>바벨(Babel)을 사용한다. 바벨은 ES6이후의 코드를 이전 JavaScript 엔진에서 실행할 수 있는 코드로 변환해주는 무료 오픈소스 JavaScript 트랜스컴파일러이다. 단순하게 생각하면, 최신 자바스크립트 문법을 예전 문법들로 전환해주고 이를 통해 이전 브라우저에서도 해당 코드가 실행될 수 있게 해주는 것이다.</p>\n<p>[보충 필요]</p>\n<h3 id=\"객체-리터럴이란\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%B4%EB%9E%80\" aria-label=\"객체 리터럴이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 리터럴이란?</h3>\n<p>리터럴이란 소스코드의 고정된 값을 대표하는 용어로 <code class=\"language-text\">고정된 값을 나타내는 표현 그 자체</code>이다.<br/>\n즉, 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 어떤 고정된 값을 생성하는 표기법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Dog</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> hodu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hodu'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 생성자 함수를 통한 인스턴스 객체 생성</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'hodu'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 객체 리터럴을 통한 객체 생성</span></code></pre></div>\n<h3 id=\"array의-flatten-메서드를-재귀함수로-구현해보기\" style=\"position:relative;\"><a href=\"#array%EC%9D%98-flatten-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"array의 flatten 메서드를 재귀함수로 구현해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array의 flatten 메서드를 재귀함수로 구현해보기</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>[보충 필요]</p>\n<h3 id=\"일급객체란\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EA%B8%89%EA%B0%9D%EC%B2%B4%EB%9E%80\" aria-label=\"일급객체란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일급객체란?</h3>\n<ol>\n<li>값으로 저정할 수 있다.</li>\n<li>파라미터(인자)로 전달할 수 있다.</li>\n<li>리턴값으로 사용할 수 있다.</li>\n<li>무명의 리터럴로 생성 가능하다.</li>\n</ol>\n<p>위의 조건을 만족하면 일급객체라고 하며 자바스크립트에서의 함수는 일급객체이기에 위의 경우에 모두 해당한다.</p>\n<p>일급객체이기 때문에</p>\n<ul>\n<li>콜백함수라는 것이 가능하다.(함수를 인자로 전달하니까)</li>\n<li>고차함수가 가능하다.(함수를 인자로 받거나 함수를 반환하니까)</li>\n<li>클로저 현상이 가능하다.(내부함수를 외부로 전달이 가능하니까)</li>\n</ul>\n<h3 id=\"array에서-object의-메서드를-어떻게-사용할-수-있는지\" style=\"position:relative;\"><a href=\"#array%EC%97%90%EC%84%9C-object%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94%EC%A7%80\" aria-label=\"array에서 object의 메서드를 어떻게 사용할 수 있는지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array에서 Object의 메서드를 어떻게 사용할 수 있는지?</h3>\n<p>Array의 prototype은 곧 Object의 instance이다.<br/>\n따라서 아래의 코드를 보면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>따라서 프로토타입 체이닝에 의해 Array에서 Object의 프로토타입 메서드를 사용할 수 있다.</p>\n<blockquote>\n<p>이런 식으로 자바스크립트의 모든 함수는 Object의 prototype에 도달 가능하므로 Object만의 메소드는 스태특 메서드로서 구현해두었다.</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-f-lab-%EB%A9%98%ED%86%A0%EB%A7%81-%EA%B8%B0%EB%A1%9D\">🌕 F-lab 멘토링 기록</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80feat%EB%B6%88%EB%B3%80%EC%84%B1\">함수형 프로그래밍이란?(feat.불변성)</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84\">프로그래밍의 패러다임</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%98%9B%EB%82%A0-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B5%9C%EA%B7%BC-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%A0%EA%B9%8C\">옛날 브라우저에서는 어떻게 최근 코드를 사용 가능할까?</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%B4%EB%9E%80\">객체 리터럴이란?</a></p>\n</li>\n<li>\n<p><a href=\"#array%EC%9D%98-flatten-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\">Array의 flatten 메서드를 재귀함수로 구현해보기</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9D%BC%EA%B8%89%EA%B0%9D%EC%B2%B4%EB%9E%80\">일급객체란?</a></p>\n</li>\n<li>\n<p><a href=\"#array%EC%97%90%EC%84%9C-object%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94%EC%A7%80\">Array에서 Object의 메서드를 어떻게 사용할 수 있는지?</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🌕 F-lab 멘토링 기록 멘토링 이후 부족한 부분을 채우기 위한 기록 함수형 프로그래밍이란?(feat.불변성) 프로그래밍의 패러다임 프로그래밍 패러다임은 프로그래머에게 프로그래밍의 관점을 갖게 하여 코드를 어떻게 작성할지 결정하는 역할을 한다.\n새로운 프로그래밍 패러다임을 통해서 새로운 방식으로 생각하는 법을 배우고, 이를 바탕으로 코드를 작성할 수 있다. 명령형 프로그래밍: 무엇(what)을 할 것인지보다  절차지향 프로그래밍: 수행되어야할 순차적인 처리 과정을 포함하는 방식 객체지향 프로그래밍: 객체들의 집합으로 프로그램의 상호작용을 표현하는 방식 선언형 프로그래밍: 어떻게(how) 할 것인지보다  함수형 프로그래밍: 순수 함수를 조합하여 프로그램을 만드는 방식 [보충 필요] 옛날 브라우저에서는 어떻게 최근 코드를 사용 가능할까? 바벨(Babel)을 사용한다. 바벨은 ES6이후의 코드를 이전 JavaScript 엔진에서 실행할 수 있는 코드로 변환해주는 무료 오픈소스 Java…","frontmatter":{"date":"August 30, 2022","title":"멘토링 3번째","categories":"멘토링","author":"제이든","emoji":"🏋️"},"fields":{"slug":"/from-time-to-time/mentoring/220830-fl/"}},"next":{"id":"5e52507e-0576-58c7-8a6b-101153195f23","html":"<h2 id=\"-성장일지\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\" aria-label=\" 성장일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-일급-객체\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4\" aria-label=\"code classlanguage textjavascriptcode 일급 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 일급 객체</h3>\n<p>자바스크립트의 함수는 <code class=\"language-text\">일급 객체</code>라고 한다. 일급 객체란 무엇일까?</p>\n<ul>\n<li>무명의 리터럴로 생성할 수 있다.(즉, 런타임에 생성이 가능하다.)</li>\n<li>변수나 자료구조(객체, 배열 등)에 저장할 수 있다.</li>\n<li>함수의 매개변수에 전달할 수 있다.</li>\n<li>함수의 반환값으로 사용 가능하다.</li>\n</ul>\n<p>자바스크립트의 함수는 위 조건을 모두 만족하므로 <code class=\"language-text\">일급 객체</code>이다.<br/>\n말 그대로 함수를 객체와 동일하게 사용할 수 있다는 의미이다.<br/>\n다만 함수는 호출이 가능하고 일반 객체에는 없는 함수 고유의 프로퍼티를 소유할 수 있다.</p>\n<h3 id=\"code-classlanguage-textjavascriptcode-프로토타입\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\" aria-label=\"code classlanguage textjavascriptcode 프로토타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 프로토타입</h3>\n<p>자바스크립트는 <code class=\"language-text\">프로토타입</code> 기반 언어이다. 그래서 프로토타입이 정확히 뭘까?<br/>\n사전적 의미로는 <code class=\"language-text\">원형</code>의 의미를 지닌다. 비유를 해보자면 어떤 객체의 유전 정보같은 느낌이다.<br/>\n대표적으로 생성자 함수에서 생성자의 프로퍼티이며 new 연산자를 통해 인스턴스를 만들었을 때, 그 인스턴스는 생성자의 프로토타입을 참조하는 <code class=\"language-text\">__proto__</code>라는 접근자 프로퍼티를 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Dog</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> hodu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hodu'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">===</span> hodu<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>hodu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<br/>\n<blockquote>\n<p>객체지향 프로그래밍이란?\n실세계의 실체(사물 혹은 개념)를 인식하는 철학적 사고를 프로그래밍에 접목하려는 프로그래밍 패러다임\n강아지가 있다면, 강아지라는 개념에서 각각의 강아지 개체들은 이름, 나이 등 다양한 속성이 존재한다.\n이 때 필요한 속성들만 간추려 표현하는 것을 <code class=\"language-text\">추상화</code>라고 한다.\n객체의 <code class=\"language-text\">상태</code>를 나타내는 데이터는 <code class=\"language-text\">프로퍼티</code>, 객체의 <code class=\"language-text\">동작</code>을 나타내는 함수는 <code class=\"language-text\">메서드</code>라고 한다.</p>\n</blockquote>\n<h4 id=\"프로토타입-체이닝\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B4%EB%8B%9D\" aria-label=\"프로토타입 체이닝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 체이닝</h4>\n<p>객체의 프로퍼티(혹은 메서드)에 접근하려 할 때, 해당 객체에 접근하려는 프로퍼티가 없다면 상위에 있는(체이닝되어있는) 프로토타입의 프로퍼티를 순차적으로 검색한다.<br/>\n식별자에서 스코프 체이닝이 있었다면, 객체의 프로퍼티에선 프로토타입 체이닝이 있다고 생각하면 편하다.<br/>\n실제로 이 두 체이닝은 서로 협력하며 식별자와 프로퍼티를 검색하는 데 사용된다.</p>\n<blockquote>\n<p>프로토타입 체이닝을 이용하여 원하는 생성자를 상속시켜줄 수 있다.</p>\n</blockquote>\n<h4 id=\"정적-메서드-프로토타입-메서드-인스턴스-메서드\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"정적 메서드 프로토타입 메서드 인스턴스 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 메서드, 프로토타입 메서드, 인스턴스 메서드</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 정적 메서드 : 생성자 자체의 메서드</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 프로토타입 메서드 : 생성자의 프로토타입의 메서드</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 인스턴스 메서드 : 인스턴스가 직접 갖고 있는 메서드</span>\n<span class=\"token keyword\">var</span> example <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nexample<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"code-classlanguage-textjavascriptcode-this\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-this\" aria-label=\"code classlanguage textjavascriptcode this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> this</h3>\n<p>어떤 객체의 메서드가 자신이 속한 객체의 프로퍼티를 참조하기 위해서 자신이 속한 객체를 가리키는 식별자가 있어야한다.<br/>\n그래서 생긴 게 <code class=\"language-text\">this</code>이다.(객체 본인을 내부에서 참조하기 위함)\n즉, <code class=\"language-text\">this</code>는 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 <code class=\"language-text\">자기 참조 변수</code>이다.<br/></p>\n<blockquote>\n<p>this 기억할 키워드</p>\n<ol>\n<li>this는 함수의 <code class=\"language-text\">호출</code>에 따라 바인딩되며 함수 호출 방법에 따라 바인딩이 다르게 된다.</li>\n<li>일반 함수와 메서드로 호출되었을 때의 this 차이</li>\n<li>기본적으로 this는 전역 객체를 참조하고 있다는 점</li>\n<li>Function.prototype의 메서드인 apply, call, bind의 공통점 및 차이점</li>\n</ol>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\">🪴 성장일지</a></p>\n<ul>\n<li>\n<p><a href=\"#javascript-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4\"><code class=\"language-text\">JavaScript</code> 일급 객체</a></p>\n</li>\n<li>\n<p><a href=\"#javascript-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\"><code class=\"language-text\">JavaScript</code> 프로토타입</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B4%EB%8B%9D\">프로토타입 체이닝</a></li>\n<li><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%84%9C%EB%93%9C\">정적 메서드, 프로토타입 메서드, 인스턴스 메서드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#javascript-this\"><code class=\"language-text\">JavaScript</code> this</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 29, 2022","title":"220829(월)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/8/220829-gl/"}},"prev":{"id":"1a85d911-d83d-520e-a7e6-913c6f58b698","html":"<h2 id=\"-성장일지\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\" aria-label=\" 성장일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드\n최대한 간단하게 정리, 추후에 보면서 스스로 설명</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textjavascriptcode-실행-컨텍스트\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"code classlanguage textjavascriptcode 실행 컨텍스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 실행 컨텍스트</h3>\n<p>자바스크립트는 컴파일 언어의 장점을 취한 인터프리터 언어이다.<br/>\n자바스크립트 코드는 평가(<code class=\"language-text\">컴파일</code>) 단계와 실행(<code class=\"language-text\">인터프리터</code>) 단계로 나누어져있는데, 평가 단계 후 코드 실행을 위한 환경 정보를 모아놓은 객체를 형성한다.<br/>\n즉, 코드 실행을 위한 환경 정보를 모아놓은 객체가 <code class=\"language-text\">실행 컨텍스트</code>이다.</p>\n<p>기본적으로 전역 코드에 대한 전역 실행 컨텍스트를 생성하고, 함수의 호출 시 함수의 선언부를 기준으로 실행 컨텍스트를 생성한다.</p>\n<h4 id=\"콜스택실행-컨텍스트-스택\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EC%8A%A4%ED%83%9D%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%83%9D\" aria-label=\"콜스택실행 컨텍스트 스택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜스택(실행 컨텍스트 스택)</h4>\n<p>스택 자료구조 형태로 실행 컨텍스트가 저장되는 구조이다. 최상단에 위치한 실행 컨텍스트부터 처리하며 콜스택을 비워나간다.<br/>\n즉, 코드의 실행 순서를 관리한다.</p>\n<h4 id=\"렉시컬-환경\" style=\"position:relative;\"><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"렉시컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렉시컬 환경</h4>\n<p>현재 실행 컨텍스트에서 선언된 식별자(변수, 함수, 클래스 등의 이름)를 등록한다.<br/>\n즉, 식별자와 스코프를 관리한다.</p>\n<h4 id=\"실행-컨텍스트의-구조\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"실행 컨텍스트의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트의 구조</h4>\n<ul>\n<li>VariableEnvironment: LexicalEnvironment와 같은 구조로 초기값을 snapshot 형식으로 갖고 있다.</li>\n<li>LexicalEnvironment(중요)\n<ul>\n<li>EnvironmentRecord: 현재 스코프에 대한 식별자 정보를 담고 있는 객체(호이스팅관련)\n<ul>\n<li>Object Envioronment Record: var, 함수 선언문에 의한 변수에 대한 정보를 담고 있는 객체</li>\n<li>Declarative Environment Record: let, const에 의한 변수 및 함수에 대한 정보를 담고 있는 객체</li>\n</ul>\n</li>\n<li>OuterEnvironmentReference: 함수가 정의되기 직전 스코프(외부 스코프)에 대한 LexicalRecord를 참조하는 객체(스코프 체인관련)</li>\n<li>ThisBinding: 객체 내부에서 객체를 가리키는 this를 binding하는 객체</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">실행 컨텍스트 생성 -> 렉시컬 환경 생성 -> 환경 레코드 생성(객체 환경 -> 선언적 환경) -> this 바인딩 -> 외부 렉시컬 환경 참조 결정</code></p>\n</blockquote>\n<h4 id=\"블록-레벨-스코프와-렉시컬-환경\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84%EC%99%80-%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"블록 레벨 스코프와 렉시컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>블록 레벨 스코프와 렉시컬 환경</h4>\n<p>if문과 같은 블록이 형성되었을 때, 해당 코드 블록을 위한 새로운 렉시컬 환경이 생성되며 기존의 렉시컬 환경과 교체한다.<br/>\nvar는 함수 레벨 스코프, let/const는 블록 레벨 스코프를 갖는다.</p>\n<h4 id=\"반드시-기억할-것\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%93%9C%EC%8B%9C-%EA%B8%B0%EC%96%B5%ED%95%A0-%EA%B2%83\" aria-label=\"반드시 기억할 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반드시 기억할 것</h4>\n<p>실행 컨텍스트의 생성은 함수를 호출할 때이다. 하지만 그 함수의 실행 컨텍스트에서 OuterEnvironmentReference는 <code class=\"language-text\">함수를 정의한 시점</code>을 기준으로 상위 스코프를 결정한다는 점은 꼭 기억하자!</p>\n<h3 id=\"code-classlanguage-textjavascriptcode-클로저\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%ED%81%B4%EB%A1%9C%EC%A0%80\" aria-label=\"code classlanguage textjavascriptcode 클로저 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 클로저</h3>\n<p>클로저란 어떤 외부함수의 변수를 참조하는 내부함수(중첩함수)가 외부로 전달되어 실행될 수 있을 때 일어나는 현상이다.<br/>\n외부함수의 실행 컨텍스트는 이미 종료가 되었음에도 외부로 전달되 내부함수가 호출 가능하기에 외부함수의 <code class=\"language-text\">렉시컬 환경</code>이 GC(가비지 콜렉터)에 의해 메모리에서 제거되지 않게 된다. 이와 같은 현상이 곧 <code class=\"language-text\">클로저</code>이며 이런 클로저 현상을 이용하여 콜백함수에서 외부 데이터 참조, 정보 은닉, 부분적용함수, 커링함수 등으로 이용할 수 있다.</p>\n<blockquote>\n<p>클로저 현상 시 개념적으론 외부함수의 렉시컬 환경 전부가 메모리에서 지워지면 안되지만, 자바스크립트 엔진에서는 그 렉시컬 환경 내에서 실제 내부함수가 참조하는 변수에 대해서만 제거되지 않도록 구현되어있다.</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80\">🪴 성장일지</a></p>\n<ul>\n<li>\n<p><a href=\"#javascript-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\"><code class=\"language-text\">JavaScript</code> 실행 컨텍스트</a></p>\n<ul>\n<li><a href=\"#%EC%BD%9C%EC%8A%A4%ED%83%9D%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%83%9D\">콜스택(실행 컨텍스트 스택)</a></li>\n<li><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\">렉시컬 환경</a></li>\n<li><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EA%B5%AC%EC%A1%B0\">실행 컨텍스트의 구조</a></li>\n<li><a href=\"#%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84%EC%99%80-%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\">블록 레벨 스코프와 렉시컬 환경</a></li>\n<li><a href=\"#%EB%B0%98%EB%93%9C%EC%8B%9C-%EA%B8%B0%EC%96%B5%ED%95%A0-%EA%B2%83\">반드시 기억할 것</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#javascript-%ED%81%B4%EB%A1%9C%EC%A0%80\"><code class=\"language-text\">JavaScript</code> 클로저</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 30, 2022","title":"220830(화)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/8/220830-gl/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/from-time-to-time/mentoring/220830-fl/","nextSlug":"/steadily/growth-diary/2022/8/220829-gl/","prevSlug":"/steadily/growth-diary/2022/8/220830-gl/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}