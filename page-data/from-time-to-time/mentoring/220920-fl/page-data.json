{"componentChunkName":"component---src-templates-blog-template-js","path":"/from-time-to-time/mentoring/220920-fl/","result":{"data":{"cur":{"id":"862603ab-629d-5734-af93-844f64c4dcc8","html":"<h2 id=\"-f-lab-멘토링-기록\" style=\"position:relative;\"><a href=\"#-f-lab-%EB%A9%98%ED%86%A0%EB%A7%81-%EA%B8%B0%EB%A1%9D\" aria-label=\" f lab 멘토링 기록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌕 F-lab 멘토링 기록</h2>\n<p>멘토링 이후 부족한 부분을 채우기 위한 기록</p>\n<h3 id=\"폴리필polyfill이란\" style=\"position:relative;\"><a href=\"#%ED%8F%B4%EB%A6%AC%ED%95%84polyfill%EC%9D%B4%EB%9E%80\" aria-label=\"폴리필polyfill이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>폴리필(polyfill)이란?</h3>\n<p>바벨: 새로운 문법을 사용해 코드를 작성하면 트랜스파일링을 통해 구 표준을 준수하는 코드로 변경\n폴리필: 새롭게 추가된 함수나 메서드는 명세서 내 정의를 읽고 이에 맞게 직접 함수를 구현해야 사용이 가능하다. 즉, 이렇게 변경된 표준을 준수할 수 있도록 기존 함수의 동작 방식을 수정하거나 새롭게 구현한 함수의 내용을 메꿔주는 역할을 하는 것이 폴리필!</p>\n<h4 id=\"폴리필에서-core-js란\" style=\"position:relative;\"><a href=\"#%ED%8F%B4%EB%A6%AC%ED%95%84%EC%97%90%EC%84%9C-core-js%EB%9E%80\" aria-label=\"폴리필에서 core js란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>폴리필에서 core-js란?</h4>\n<p>기존 폴리필 라이브러리들</p>\n<ul>\n<li>\n<p>@babel/polyfill</p>\n<ul>\n<li>전역공간에 폴리필을 채워 넣기 때문에 전역공간의 오염으로 폴리필 충돌 가능성이 있다.</li>\n<li>브라우저에서 이미 구현된 폴리필까지 전부 번들에 포함되어있어 크기가 커지는 단점</li>\n<li>번들 크기는 커지지만 실행 시에는 브라우저에서 미구현된 문법만 실행하기 때문에 빠르다는 장점</li>\n<li>바벨 7.4버전부터 depeciated됨</li>\n</ul>\n</li>\n<li>\n<p>@babel/plugin-transform-runtime</p>\n<ul>\n<li>바벨이 ES6+의 문법들을 자체 구현한 함수로 트랜스파일링</li>\n<li>번들 크기가 작은 장점이 있지만, Array.prototype.includes()와 같은 메소드는 제대로 트랜스파일링 되지 않는 이슈 존재</li>\n</ul>\n</li>\n</ul>\n<p>개선된 폴리필</p>\n<ul>\n<li>core-js@3\n<ul>\n<li>위에서의 2가지 문제(전역공간 오염문제, 메서드 문제) 모두 해결</li>\n<li>아래와 같이 웹팩을 통한 바벨로더-preset-env와 함께 사용한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n              <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                  <span class=\"token literal-property property\">targets</span><span class=\"token operator\">:</span> <span class=\"token string\">'> 2%, not dead'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">corejs</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">useBuiltIns</span><span class=\"token operator\">:</span> <span class=\"token string\">'entry'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">shippedProposals</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3 id=\"npm이란\" style=\"position:relative;\"><a href=\"#npm%EC%9D%B4%EB%9E%80\" aria-label=\"npm이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm이란</h3>\n<p>Node Packaged Manager의 약자로, Node.js로 만들어진 패키지(모듈)을 관리해주는 툴이다.</p>\n<h4 id=\"packagejson에서-dependency란\" style=\"position:relative;\"><a href=\"#packagejson%EC%97%90%EC%84%9C-dependency%EB%9E%80\" aria-label=\"packagejson에서 dependency란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json에서 dependency란</h4>\n<p>말 그대로 의존성을 나타내며, npm을 통해 모듈을 추가할 때 기본적으로 dependencies 리스트에 추가된다.</p>\n<ul>\n<li>dependencies: 실제로 어플리케이션 운용에 필요한 모듈을 추가한다. —save 옵션을 추가한다.</li>\n<li>devdependencies: 어플리케이션 개발에 필요한 모듈을 추가한다. —save-dev 혹은 -D 옵션을 추가한다.</li>\n</ul>\n<p>왜 나눌까?</p>\n<ul>\n<li>가독성의 차이</li>\n<li>배포 환경에서 해당 프로젝트를 가져와 의존성을 설치해 프로젝트를 빌드하는 경우, devdependencies의 모듈들은 필요하지 않기 때문</li>\n</ul>\n<h5 id=\"추가-peer-dependencies\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80-peer-dependencies\" aria-label=\"추가 peer dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(추가) peer dependencies</h5>\n<p>‘동료’의 의미를 가진 peer 의존성을 의미한다. 예를 들어, A 패키지를 사용하기 위해서 B 패키지의 17.0.0 버전이 필요하다고 할 때, <code class=\"language-text\">A 패키지는 B 패키지의 17.0.0에 의존한다</code>라고 한다. <br/>\n즉, A패키지를 사용하게 될 프로젝트에 <code class=\"language-text\">B패키지는 17.0.0을 사용해주세요!</code>라고 알려주는 역할을 하는 것<br/>\nnpm 7버전부터는 peer dependency의 버전이 맞지 않으면 패키지가 설치되지 않는다.</p>\n<h3 id=\"바벨의-동작원리\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%B2%A8%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\" aria-label=\"바벨의 동작원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바벨의 동작원리</h3>\n<ol>\n<li>(1) 파싱(Parsing)</li>\n</ol>\n<ul>\n<li>소스코드를 통해 추상적인 형태의 코드로 변환하는 과정</li>\n<li>AST(Abstract Systax Tree; 추상구문트리)로 코드를 변환한다.</li>\n<li>babel-parser(bablyon이라고도 부른다.)가 이 과정을 담당한다.</li>\n</ul>\n<ol start=\"2\">\n<li>(2) 변환(Transformation)</li>\n</ol>\n<ul>\n<li>추상구문트리를 받아와 각 브라우저의 환경에 맞는 내용물로 변환하는 작업</li>\n<li>babel preset/plugin에 의해 처리되는 과정</li>\n<li>각 브라우저에서 코드 구문이 어떻게 바뀌어야하는지에 대한 내용을 기술</li>\n</ul>\n<ol start=\"3\">\n<li>(3) 코드 생성(Code Generation)</li>\n</ol>\n<ul>\n<li>2단계에서 생성된 새로운 추상구문트리를 바탕으로 실제 브라우저 환경에 맞는 소스코드로 변환하는 과정</li>\n<li>babel-generator에 의해 이뤄지는 과정</li>\n</ul>\n<h3 id=\"es6-모듈-등장-전\" style=\"position:relative;\"><a href=\"#es6-%EB%AA%A8%EB%93%88-%EB%93%B1%EC%9E%A5-%EC%A0%84\" aria-label=\"es6 모듈 등장 전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>es6 모듈 등장 전</h3>\n<p>html에서 script 태그를 하나하나 다 붙여서 사용<br/>\n파일은 달라도 하나의 전역을 가지기 때문에 문제가 발생한다.</p>\n<h3 id=\"webpack의-대체제-다른-번들러들\" style=\"position:relative;\"><a href=\"#webpack%EC%9D%98-%EB%8C%80%EC%B2%B4%EC%A0%9C-%EB%8B%A4%EB%A5%B8-%EB%B2%88%EB%93%A4%EB%9F%AC%EB%93%A4\" aria-label=\"webpack의 대체제 다른 번들러들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack의 대체제, 다른 번들러들?</h3>\n<p>rollup, vite 등이 존재하며 자세한 사항은 <a href=\"https://ui.toast.com/weekly-pick/ko_20220127\">이곳</a>을 참고!!<br/>\n실제 현업에서는 webpack이 아닌 vite와 같은 다른 번들러를 많이 사용한다고 한다. 아무래도 번들링 속도에서 갖는 이점이 큰가보다!</p>\n<h3 id=\"webpack의-code-splitting이란\" style=\"position:relative;\"><a href=\"#webpack%EC%9D%98-code-splitting%EC%9D%B4%EB%9E%80\" aria-label=\"webpack의 code splitting이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack의 code splitting이란?</h3>\n<p>일반적으로 앱들은 번들러를 통해 하나의 파일로 번들링된다. 번들링은 훌륭한 기법이지만, 앱의 규모가 커짐에 따라서 하나의 번들이 되려 긴 로드시간을 가져오기도 한다. 이 때, code splitting을 통해 런타임시 필요한 코드만 로드할 수 있도록 여러 번들로 쪼개는 작업을 할 수 있다. 이렇게 되면 앱 전체 코드의 양이 줄어드는 것은 아니지만, 사용자가 필요로 하지 않은 코드 로드를 피하여 초기 페이지 로드 속도를 향상시킬 수 있다. 이렇게 나누어진 번들 파일들을 <code class=\"language-text\">chunk</code>라고 한다.</p>\n<h3 id=\"promiseall과-promiseallsettled\" style=\"position:relative;\"><a href=\"#promiseall%EA%B3%BC-promiseallsettled\" aria-label=\"promiseall과 promiseallsettled permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.all과 Promise.allSettled</h3>\n<ul>\n<li>Promise.all: 비동기 처리를 병렬적으로 묶어 처리하게 해준다. and의 개념처럼 모든 promise가 fulfilled되어야 전체값이 반환된다.(하나라도 rejected되면 에러가 발생한다.)</li>\n<li>Promise.allSettled: all에서 하나의 promise라도 rejected되면 에러가 나는 것을 방지하기 위해 ES2020에 추가되었다. 하나가 rejected되어도 rejected된 값으로 반환되어 전체가 반환된다. 이후 값들에 대해 처리를 해주면 된다.</li>\n</ul>\n<blockquote>\n<p>그렇다고 반드시 allSettled가 상위호환인 것은 아니다! 일단 비교적 최신 문법이기에 브라우저 호환도 따져야하고 모든 로직이 완료되어야만 다음 단계로 넘어가는 로직의 경우엔 all을 사용하는 것이 맞다.</p>\n</blockquote>\n<h3 id=\"asyncawait의-내부-로직\" style=\"position:relative;\"><a href=\"#asyncawait%EC%9D%98-%EB%82%B4%EB%B6%80-%EB%A1%9C%EC%A7%81\" aria-label=\"asyncawait의 내부 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async/await의 내부 로직</h3>\n<ul>\n<li>🐾 Promise에 대해 제대로 공부한 후 다시 작성</li>\n</ul>\n<h3 id=\"모달을-개발할-때-싱글톤-패턴-사용--promise-패턴-사용의-장단점-및-차이\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%8B%AC%EC%9D%84-%EA%B0%9C%EB%B0%9C%ED%95%A0-%EB%95%8C-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4-%EC%82%AC%EC%9A%A9--promise-%ED%8C%A8%ED%84%B4-%EC%82%AC%EC%9A%A9%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90-%EB%B0%8F-%EC%B0%A8%EC%9D%B4\" aria-label=\"모달을 개발할 때 싱글톤 패턴 사용  promise 패턴 사용의 장단점 및 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모달을 개발할 때, 싱글톤 패턴 사용 / Promise 패턴 사용의 장단점 및 차이</h3>\n<ul>\n<li>ing</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-f-lab-%EB%A9%98%ED%86%A0%EB%A7%81-%EA%B8%B0%EB%A1%9D\">🌕 F-lab 멘토링 기록</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%8F%B4%EB%A6%AC%ED%95%84polyfill%EC%9D%B4%EB%9E%80\">폴리필(polyfill)이란?</a></p>\n<ul>\n<li><a href=\"#%ED%8F%B4%EB%A6%AC%ED%95%84%EC%97%90%EC%84%9C-core-js%EB%9E%80\">폴리필에서 core-js란?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#npm%EC%9D%B4%EB%9E%80\">npm이란</a></p>\n<ul>\n<li>\n<p><a href=\"#packagejson%EC%97%90%EC%84%9C-dependency%EB%9E%80\">package.json에서 dependency란</a></p>\n<ul>\n<li><a href=\"#%EC%B6%94%EA%B0%80-peer-dependencies\">(추가) peer dependencies</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B0%94%EB%B2%A8%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\">바벨의 동작원리</a></p>\n</li>\n<li>\n<p><a href=\"#es6-%EB%AA%A8%EB%93%88-%EB%93%B1%EC%9E%A5-%EC%A0%84\">es6 모듈 등장 전</a></p>\n</li>\n<li>\n<p><a href=\"#webpack%EC%9D%98-%EB%8C%80%EC%B2%B4%EC%A0%9C-%EB%8B%A4%EB%A5%B8-%EB%B2%88%EB%93%A4%EB%9F%AC%EB%93%A4\">webpack의 대체제, 다른 번들러들?</a></p>\n</li>\n<li>\n<p><a href=\"#webpack%EC%9D%98-code-splitting%EC%9D%B4%EB%9E%80\">webpack의 code splitting이란?</a></p>\n</li>\n<li>\n<p><a href=\"#promiseall%EA%B3%BC-promiseallsettled\">Promise.all과 Promise.allSettled</a></p>\n</li>\n<li>\n<p><a href=\"#asyncawait%EC%9D%98-%EB%82%B4%EB%B6%80-%EB%A1%9C%EC%A7%81\">async/await의 내부 로직</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AA%A8%EB%8B%AC%EC%9D%84-%EA%B0%9C%EB%B0%9C%ED%95%A0-%EB%95%8C-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4-%EC%82%AC%EC%9A%A9--promise-%ED%8C%A8%ED%84%B4-%EC%82%AC%EC%9A%A9%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90-%EB%B0%8F-%EC%B0%A8%EC%9D%B4\">모달을 개발할 때, 싱글톤 패턴 사용 / Promise 패턴 사용의 장단점 및 차이</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🌕 F-lab 멘토링 기록 멘토링 이후 부족한 부분을 채우기 위한 기록 폴리필(polyfill)이란? 바벨: 새로운 문법을 사용해 코드를 작성하면 트랜스파일링을 통해 구 표준을 준수하는 코드로 변경\n폴리필: 새롭게 추가된 함수나 메서드는 명세서 내 정의를 읽고 이에 맞게 직접 함수를 구현해야 사용이 가능하다. 즉, 이렇게 변경된 표준을 준수할 수 있도록 기존 함수의 동작 방식을 수정하거나 새롭게 구현한 함수의 내용을 메꿔주는 역할을 하는 것이 폴리필! 폴리필에서 core-js란? 기존 폴리필 라이브러리들 @babel/polyfill 전역공간에 폴리필을 채워 넣기 때문에 전역공간의 오염으로 폴리필 충돌 가능성이 있다. 브라우저에서 이미 구현된 폴리필까지 전부 번들에 포함되어있어 크기가 커지는 단점 번들 크기는 커지지만 실행 시에는 브라우저에서 미구현된 문법만 실행하기 때문에 빠르다는 장점 바벨 7.4버전부터 depeciated됨 @babel/plugin-transform-runtim…","frontmatter":{"date":"September 20, 2022","title":"멘토링 6번째","categories":"멘토링","author":"제이든","emoji":"🏋️"},"fields":{"slug":"/from-time-to-time/mentoring/220920-fl/"}},"next":{"id":"8eeea7ec-b53e-5cad-a6d0-56fd3143cfce","html":"<h2 id=\"-성장일지-20\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-20\" aria-label=\" 성장일지 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지 2.0</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드 (1.0)\n최대한 간단하게 정리, 추후에 보면서 스스로 설명\n🍉 경험 위주로 (2.0)\n단순 정보를 전달하기보다 무엇을 배웠고 어떻게 해결했는지 짧고 간단하게 작성하자</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textprojectcode-get-shit-done\" style=\"position:relative;\"><a href=\"#code-classlanguage-textprojectcode-get-shit-done\" aria-label=\"code classlanguage textprojectcode get shit done permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Project</code> get-shit-done</h3>\n<p>목표</p>\n<ul>\n<li>webpack을 통한 개발 환경 설정 더 깊고 다양하게 적용해보기</li>\n<li>web component를 염두에 두고 프로젝트 구성하기</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-20\">🪴 성장일지 2.0</a></p>\n<ul>\n<li><a href=\"#project-get-shit-done\"><code class=\"language-text\">Project</code> get-shit-done</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 17, 2022","title":"220917(토)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/9/220917-gl/"}},"prev":{"id":"758b7680-cb73-56fe-bedf-fe34ebe7cc50","html":"<h2 id=\"-성장일지-20\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-20\" aria-label=\" 성장일지 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪴 성장일지 2.0</h2>\n<p>책 <code class=\"language-text\">행복한 이기주의자(웨인 다이어)</code>의 내용에 자극받아 시작하는 소박한 <code class=\"language-text\">성장기록</code></p>\n<blockquote>\n<p>살아있는 꽃과 죽은 꽃은 어떻게 구별하는가?<br/>\n성장하고 있는 것이 살아 있는 것이다.<br/>\n생명의 유일한 증거는 성장이다!</p>\n</blockquote>\n<blockquote>\n<p>🌳 키워드 (1.0)\n최대한 간단하게 정리, 추후에 보면서 스스로 설명\n🍉 경험 위주로 (2.0)\n단순 정보를 전달하기보다 무엇을 배웠고 어떻게 해결했는지 짧고 간단하게 작성하자</p>\n</blockquote>\n<h3 id=\"code-classlanguage-textprojectcode-get-shit-done\" style=\"position:relative;\"><a href=\"#code-classlanguage-textprojectcode-get-shit-done\" aria-label=\"code classlanguage textprojectcode get shit done permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Project</code> get-shit-done</h3>\n<p>프로젝트한다고 바빠서 성장일지를 몇일 쓰질 못했다.<br/>\n성장일지에서는 프로젝트를 하면서 배운 것들을 간단하게 남기고 따로 project 태그로 자세히 정리할 예정이다.</p>\n<p>목표</p>\n<ul>\n<li>웹 컴포넌트를 통한 UI 구현</li>\n</ul>\n<h3 id=\"code-classlanguage-textjavascriptcode-웹-컴포넌트\" style=\"position:relative;\"><a href=\"#code-classlanguage-textjavascriptcode-%EC%9B%B9-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"code classlanguage textjavascriptcode 웹 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">JavaScript</code> 웹 컴포넌트</h3>\n<p>지난 몇 해 동안 수많은 자바스크립트 프레임워크(라이브러리)가 등장했다.(앵귤러, 뷰, 리액트 등등)<br/>\n이런 프레임워크들은 다양한 문제를 편하게 해결할 수 있게 해주었지만, 덩치가 크기에 앱이 무거워지고 프레임워크에 종속된 코드를 생산하게 한다.<br/>\n즉, 웹 컴포넌트는 이런 프레임워크도 좋지만 <code class=\"language-text\">브라우저의 표준 기능</code>을 이용해서 성능 좋은 앱을 만들자는 취지에서 시작한다.<br/>\nHTML, CSS, JS를 컴포넌트화하기 위한 4개의 표준을 묶어서 웹 컴포넌트라고 한다.<br/>\n물론 이 4가지를 모두 동시에 써야만 하는 것이 아닌 원하는 기능만 사용하면 되고 프레임워크와 함께 사용해도 된다.<br/>\n4가지 중 CustomElements와 ShadowDOM을 집중해서 살펴보자.</p>\n<h4 id=\"customelements\" style=\"position:relative;\"><a href=\"#customelements\" aria-label=\"customelements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CustomElements</h4>\n<p>말 그대로, <code class=\"language-text\">내 마음대로 커스텀한 요소</code>를 의미한다. <br/>\n개인적으로 바로 코드를 보는 편이 이해가 빠르기에 아래 코드를 통해 정리한다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 아래와 같이 HTMLElement를 상속하는 개념으로 나만의 element의 클래스 객체를 만든다.</span>\n<span class=\"token comment\">// 참고로 class내의 this는 커스텀 엘리먼트 그 자체를 바인딩한다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JaydenCustom</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 필수는 아니지만, render와 getTemplate 메서드를 통해 좀더 원하는 형태의 element를 만들 수 있다.</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        &lt;div>&lt;/div>\n        &lt;div>&lt;/div>\n        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/*\n  connectedCallback: 커스텀 엘리먼트가 추가될 때, 호출된다. 주로 이곳에서 이벤트 핸들러를 다룬다.\n  여기서 주의할 점은 consructor에서는 이 요소가 `만들어질 때`이고 여기는 `추가될 때`라는 점이다.\n  */</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// disconnectedCallback: 커스텀 엘리먼트가 제거될 때, 호출된다. 주로 위에서 생성한 이벤트 등의 정보를 지울 때 사용한다.</span>\n  <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/*\n  static get observedAttributes()에서는 `감시할 속성`을 알려주는 역할을 한다. [] 배열 형태로 속성을 전달한다.\n  */</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 위에서 감시 대상이 된 속성의 값이 변경될 때마다 실행된다.</span>\n  <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 아무렇게나 원하는 메서드를 작성하여 활용할 수 있다.</span>\n  <span class=\"token function\">anything</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 반드시 이렇게 커스텀 엘리먼트를 정의해주어야한다.</span>\n<span class=\"token comment\">// 또한, 커스텀 엘리먼트는 `aaa-bbb`와 같은 형식의 태그명을 갖도록 한다.</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jayden-custom'</span><span class=\"token punctuation\">,</span> JaydenCustom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"shadowdom\" style=\"position:relative;\"><a href=\"#shadowdom\" aria-label=\"shadowdom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ShadowDOM</h3>\n<p>브라우저의 렌더링 엔진은 html을 파싱하여 DOM을 형성한다. 이 때, 각 요소들은 노드로서 작용한다. 문제는 각 노드가 독럽적인 DOM 영역을 갖지 못하고 있다는 점이다.<br/>\n이를 해결해주는 것이 <code class=\"language-text\">Shadow DOM</code>으로 말 그대로 보이지 않는 DOM을 만들어주어 각 요소가 독립적인 스타일링이 가능하게 해준다. 바로 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JaydenShadow</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// this는 커스텀 엘리먼트를 바인딩, 즉 커스텀 엘리먼트에 shadow DOM을 붙여준다.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 아래와 같이 shadowDOM에 접근하기 위해서는 shadowRoot를 이용해야한다.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        &lt;style>\n        div {\n          background-color: tomato;\n        }\n        &lt;/style>\n        &lt;div>&lt;/div>\n        &lt;div>&lt;/div>\n        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 위에서 커스텀 엘리먼트 내부(정확히는 쉐도우돔)에 속한 div를 제외하고는 배경색(tomato) 값을 갖지 않는다.</span>\n  <span class=\"token comment\">// 즉, 커스텀 엘리먼트만의 독자적인 공간을 만들 수 있는 것이다.</span>\n\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jayden-shadow'</span><span class=\"token punctuation\">,</span> JaydenShadow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>이외에도 Template Element와 HTML Import 등의 요소가 있지만, 위 2가지가 HTML, CSS, JS를 하나의 컴포넌트로 묶어주는 핵심 기능이지 않을까 생각한다.</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EC%9E%A5%EC%9D%BC%EC%A7%80-20\">🪴 성장일지 2.0</a></p>\n<ul>\n<li>\n<p><a href=\"#project-get-shit-done\"><code class=\"language-text\">Project</code> get-shit-done</a></p>\n</li>\n<li>\n<p><a href=\"#javascript-%EC%9B%B9-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\"><code class=\"language-text\">JavaScript</code> 웹 컴포넌트</a></p>\n<ul>\n<li><a href=\"#customelements\">CustomElements</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#shadowdom\">ShadowDOM</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 22, 2022","title":"220922(목)","categories":"성장일지","author":"제이든","emoji":"🌱"},"fields":{"slug":"/steadily/growth-diary/2022/9/220922-gl/"}},"site":{"siteMetadata":{"siteUrl":"https://JaydenLee1116.github.io","comments":{"utterances":{"repo":"JaydenLee1116/JaydenLee1116.github.io"}}}}},"pageContext":{"slug":"/from-time-to-time/mentoring/220920-fl/","nextSlug":"/steadily/growth-diary/2022/9/220917-gl/","prevSlug":"/steadily/growth-diary/2022/9/220922-gl/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}